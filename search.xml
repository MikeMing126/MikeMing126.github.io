<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo开发</title>
    <url>/2025/03/03/Hexo/</url>
    <content><![CDATA[<h1 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h1><h2 id="Hexo开发去除缓存-重新刷新生成"><a href="#Hexo开发去除缓存-重新刷新生成" class="headerlink" title="Hexo开发去除缓存-重新刷新生成"></a>Hexo开发去除缓存-重新刷新生成</h2><h3 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h3><p>在开发一个 Hexo 插件，在开发的过程中，遇到了一些小的问题：插件的代码发生了修改，但运行hexo 的时候却没有实时刷新出来。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在对代码进行分析后发现，hexo 的 tag filter 的结果会缓存在数据库中，由于缓存了，所以我使用的 generator ，所以也会被缓存。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在预览前，删除 db.json 即可让 hexo 重新开始生成</p>
<h2 id="网页缓存问题"><a href="#网页缓存问题" class="headerlink" title="网页缓存问题"></a>网页缓存问题</h2><p>F12打开开发者工具，网络部分，选择禁用缓存即可。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下的Git账号更换</title>
    <url>/2025/03/04/windows-change-git/</url>
    <content><![CDATA[<h3 id="Hexo更换指定Git账号问题"><a href="#Hexo更换指定Git账号问题" class="headerlink" title="Hexo更换指定Git账号问题"></a>Hexo更换指定Git账号问题</h3><ul>
<li><p>Git内设置对应的账号和密码</p>
</li>
<li><p>控制面板 - 用户 - 凭据管理器 - Windows凭据删除对应git的凭据 在使用时重新通过网页处理凭据 </p>
</li>
<li><p>使用新账号登陆即可</p>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>About Theme</title>
    <url>/2025/03/03/theme/</url>
    <content><![CDATA[<h1 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h1><h2 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h2><p><a href="https://github.com/MaLuns/hexo-theme-async">GitHub</a>  </p>
<p><a href="https://hexo-theme-async.imalun.com/guide/">Introduction</a>  </p>
<h2 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a>Butterfly</h2><p><a href="https://butterfly.js.org/">Introduction</a>  </p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.5-GAS-ReadMe</title>
    <url>/2025/03/04/UE55GAS/</url>
    <content><![CDATA[<!-- - <meting-js id="13344900252" server="netease" type="playlist" type="playlist" mutex="true" preload="auto" theme="var(--anzhiyu-main)" order="list"></meting-js>   -->

<h3 id="GAS"><a href="#GAS" class="headerlink" title="GAS"></a>GAS</h3><h1 id="Purpose-of-this-Documentation"><a href="#Purpose-of-this-Documentation" class="headerlink" title="Purpose of this Documentation"></a>Purpose of this Documentation</h1><p>This documentation is meant to support and enhance the <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/gameplay-ability-system-for-unreal-engine">official Gameplay Ability System Unreal Developer Community documentation</a>.  In particular, this document lives in the code repository under <a href="./">Gameplay Ability System plug-in folder</a> and thus any user reading this documentation can submit a pull request to clarify functionality, update inaccurate information, or work with the community to flesh out areas that are missing.</p>
<p>It is worth noting there are extensive resources that the wider end-user developer community has written.  One such source of knowledge is the <a href="https://github.com/tranek/GASDocumentation">tranek GAS documentation</a> which is highly detailed and an excellent resource for implementation details, but risks falling out of date with new feature additions or changes.</p>
<h1 id="Overview-of-the-Gameplay-Ability-System"><a href="#Overview-of-the-Gameplay-Ability-System" class="headerlink" title="Overview of the Gameplay Ability System"></a>Overview of the Gameplay Ability System</h1><p>The Gameplay Ability System is a framework for building abilities and interactions that Actors can own and trigger. This system is designed mainly for RPGs, action-adventure games, MOBAs, and other types of games where characters have abilities that need to coordinate mechanics, visual effects, animations, sounds, and data-driven elements, although it can be adapted to a wide variety of projects. The Gameplay Ability System also supports replication for multiplayer games, and can save developers a lot of time scaling up their designs to support multiplayer.</p>
<p>The concepts that the Gameplay Ability System uses are:</p>
<ul>
<li><a href="#gameplay-attributes">Gameplay Attributes</a>:  An enhancement to float properties that allow them to be temporarily modified (buffed) and used in complex calculations such as damage.</li>
<li><a href="#gameplay-tags">Gameplay Tags</a>:  A hierarchical naming system that allows you to specify states of Actors, and properties of Assets.  A powerful query system allows designers to craft logic statements around these.</li>
<li><a href="#gameplay-cues">Gameplay Cues</a>:  A visual and audio effects system based on Gameplay Tags which allow decoupling of the FX and the implementation.</li>
<li><a href="#gameplay-abilities">Gameplay Abilities</a>:  The code that actually triggers when an action is performed.  Typically a Blueprint graph.</li>
<li><a href="#gameplay-effects">Gameplay Effects</a>:  Predefined rulesets about how to apply all of the above.</li>
</ul>
<p>One of the designers’ often mentioned goals of the Gameplay Ability System is to maintain a record of who triggered a complex set of interactions, so that we can keep proper account of which Actor did what.  For instance, if a Player activates a <a href="#gameplay-abilities">Gameplay Ability</a> that spawns a poison cloud (possibly represented with a <a href="#gameplay-cue">Gameplay Cue</a>) that then does damage-over-time using a <a href="#gameplay-effects">Gameplay Effect</a> which eventually reduces an Actor’s Health <a href="#gameplay-attributes">Gameplay Attribute</a> to zero, we should be able to award the kill to the initiating Player.</p>
<p>It is worth mentioning the damage system upfront, as it’s a pervasive example throughout the documentation.  You may be familiar with the <a href="https://www.unrealengine.com/blog/damage-in-ue4">AActor::TakeDamage function</a> which was used for many years.  At Epic, we no longer use that system internally; instead all damage is done through the Gameplay Ability System.  By using the Gameplay Ability System, we allow buffs&#x2F;debuffs and an extensive and ever-changing list of damage types based on Gameplay Tags.  You can look at <a href="https://dev.epicgames.com/documentation/unreal-engine/lyra-sample-game-in-unreal-engine">Lyra</a> as an example that uses the Gameplay Ability System extensively, as well as a rudimentary damage system.</p>
<hr>
<h1 id="Ability-System-Component-asc"><a href="#Ability-System-Component-asc" class="headerlink" title="Ability System Component asc}"></a>Ability System Component {#asc}</h1><p>The Ability System Component (commonly abbreviated ASC) is the top-level ActorComponent that you use to interface with the Gameplay Ability System (commonly abbreviated GAS).  It is a monolithic class that encapsulates almost all of the functionality GAS uses.  By funneling all of the functionality through the ASC, we are able to better encapsulate and enforce the rules about activation, replication, prediction, and side-effects.</p>
<p>While the Ability System Component <em>is</em> an ActorComponent, we typically recommend against putting it on a Player’s Pawn.  Instead, for a Player, it should be on the PlayerState.  The reason for this is that the Pawn is typically destroyed upon death in multiplayer games, and GAS typically has functionality (be it <a href="#gameplay-attributes">Gameplay Attributes</a>, <a href="#gameplay-tags">Gameplay Tags</a>, or <a href="#gameplay-abilities">Gameplay Abilities</a>) that should persist beyond death.  For non-player AI-driven characters (e.g. AI that are not bots), it is suitable to put the ASC on the Pawn because it needs to replicate data to <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/actor-role-and-remote-role-in-unreal-engine#actorrolestates">Simulated Proxies</a>.</p>
<hr>
<h1 id="Gameplay-Attributes-gameplay-attributes"><a href="#Gameplay-Attributes-gameplay-attributes" class="headerlink" title="Gameplay Attributes gameplay-attributes}"></a>Gameplay Attributes {#gameplay-attributes}</h1><p>Gameplay Attributes (often just referred to as simply <em>Attributes</em>) are essentially <em>float</em> properties that are wrapped in a FGameplayAttributeData instance.  The reason for doing so is to allow for a <em>BaseValue</em> which one can think of as an unaltered intrinsic value of the Actor, and a <em>CurrentValue</em> which one can think of as the value that currently applies, after all of the buffs and debuffs of the Actor are taken into account.  These <em>Attributes</em> must live in an <a href="#attribute-sets">AttributeSet</a>.  There is Editor tooling around the use of <em>Attributes</em> that allow them to be selected and used inside <a href="#gameplay-effects">Gameplay Effects</a> (and others) to ensure buffs and debuffs work correctly.</p>
<p>Attributes are often replicated, thus keeping the client in sync with the server values, but that does not <em>always</em> need to be the case.  For instance, certain <em>meta-Attributes</em> can be used to store temporary data used for calculations, allowing these intermediate results to have full buff&#x2F;debuff aggregation capabilities; these <em>meta-Attributes</em> are not replicated because they are typically reset after a calculation.</p>
<p>Since Gameplay Attributes are easily accessible through native or Blueprint code, it’s tempting to modify them directly.  However, the Gameplay Ability System is designed such that all modifications to the Attributes should be done through <a href="#gameplay-effects">Gameplay Effects</a> to ensure they can be network predicted and rolled-back gracefully.</p>
<p><a href="https://dev.epicgames.com/documentation/unreal-engine/gameplay-attributes-and-attribute-sets-for-the-gameplay-ability-system-in-unreal-engine">Developer Community Gameplay Attribute &amp; AttributeSet Docs</a></p>
<h2 id="AttributeSets-attribute-sets"><a href="#AttributeSets-attribute-sets" class="headerlink" title="AttributeSets attribute-sets}"></a>AttributeSets {#attribute-sets}</h2><p>AttributeSets are simply classes derived from <a href="./Source/GameplayAbilities/Public/AttributeSet.h">UAttributeSet class</a>.  The AttributeSets typically contain multiple Gameplay Attributes that encompass all properties for a specific game feature (such as a jetpack item, but the most commonly cited example is the damage system).  AttributeSets must be added to the <a href="#asc">Ability System Component</a> by the server.  AttributeSets are typically replicated to the client, but not all Attributes are replicated to the client (they are configured on a per-Attribute basis).</p>
<h2 id="Attribute-Modifiers-attribute-modifiers"><a href="#Attribute-Modifiers-attribute-modifiers" class="headerlink" title="Attribute Modifiers attribute-modifiers}"></a>Attribute Modifiers {#attribute-modifiers}</h2><p>Attribute Modifiers are how we buff and debuff Attributes.  These are setup through the <a href="#gameplay-effects">Gameplay Effects’</a> <code>Modifiers</code> property.  Once a modifier is ‘active’, it is stored in the <a href="#asc">Ability System Component</a> and all requests for the value go through a process called <em>aggregation</em>.</p>
<p>The rules for <em>aggregation</em> can be unexpected to a new user.  For instance, if there are multiple values that modify a single attribute, the modifiers are added together before the result is computed.  Let’s take an example of a multiplier of 10% added to damage, and another multiplier of 30% added to damage.  If one were purely looking at the numbers, one could think <code>Damage * 1.1 * 1.3 = 1.43</code> thus damage would be modified by <em>43%</em>.  However, the system takes these modifier operators into account and adds them separately before performing the final multiplier calculation, giving an expected result of <code>10% + 30% = 40%</code>.</p>
<hr>
<h1 id="Gameplay-Abilities-gameplay-abilities"><a href="#Gameplay-Abilities-gameplay-abilities" class="headerlink" title="Gameplay Abilities gameplay-abilities}"></a>Gameplay Abilities {#gameplay-abilities}</h1><p>Gameplay Abilities are derived from the <a href="./Source/GameplayAbilities/Public/GameplayAbility.h">UGameplayAbility class</a>.  They define what an in-game ability does, what (if anything) it costs to use, when or under what conditions it can be used, and so on.  Because Gameplay Abilities are implemented in native or Blueprints, it can do anything a Blueprint graph can do.  Unlike traditional Blueprints, they are capable of existing as instanced objects running asynchronously – so you can run specialized, multi-stage tasks (called <a href="#gameplay-ability-tasks">Gameplay Ability Tasks</a>.  Examples of Gameplay Abilities would be a character dash, or an attack.</p>
<p>Think of a Gameplay Ability as the bundle of functions that correspond to the action you’re performing.  There are complex rules about who can activate them, how they activate, and how they are predicted (locally executed ahead of the server acknowledgement).  You trigger them through the Ability System Component (typically through a TryActivate function).  But they can also be triggered through complex interactions (if desired) such as through Gameplay Events, <a href="#gameplay-tags">Gameplay Tags</a>, <a href="#gameplay-effects">Gameplay Effects</a>, and Input (which the <a href="#asc">ASC</a> handles internally).</p>
<p><a href="https://dev.epicgames.com/documentation/unreal-engine/using-gameplay-abilities-in-unreal-engine">Developer Community Gameplay Abilities docs</a></p>
<h2 id="Gameplay-Ability-Tasks-gameplay-ability-tasks"><a href="#Gameplay-Ability-Tasks-gameplay-ability-tasks" class="headerlink" title="Gameplay Ability Tasks gameplay-ability-tasks}"></a>Gameplay Ability Tasks {#gameplay-ability-tasks}</h2><p>Gameplay Abilities often make use of <a href="https://dev.epicgames.com/documentation/unreal-engine/gameplay-ability-tasks-in-unreal-engine">Gameplay Ability Tasks</a>.  Gameplay Ability Tasks are latent Blueprint nodes that allow your Gameplay Ability to ‘pause’ for the frame while it awaits some event.  They can also perform network functionality which hide complex implementation details from the Blueprint designer.</p>
<h2 id="Gameplay-Ability-Specs"><a href="#Gameplay-Ability-Specs" class="headerlink" title="Gameplay Ability Specs"></a>Gameplay Ability Specs</h2><p>The Gameplay Ability Specs are runtime-defined data which augment and tie together parameters used for the Gameplay Ability.  It serves two purposes:</p>
<ol>
<li>To configure the Gameplay Ability parameters prior to giving&#x2F;granting the ability.  For instance, it defines what ‘Level’ of the ability you are granting.</li>
<li>To store information about the granted Gameplay Ability that is shared between all instances of the Gameplay Ability.</li>
</ol>
<p>A lot of the <a href="#asc">Ability System Component</a>‘s interface deals with Gameplay Ability Specs, or after being granted, typically a Gameplay Ability Spec Handle.  The Handles are a way to succinctly refer to a Gameplay Ability Spec in both native and Blueprint code without worrying about the dangers of holding onto a pointer (and having that pointer be reallocated).  Whenever you want to refer to an already-granted Ability, use an Ability Spec Handle instead.</p>
<p>The corresponding class for <a href="./Source/GameplayAbilities/Public/GameplayAbilitySpec.h">FGameplayAbilitySpec</a> and <a href="./Source/GameplayAbilities/Public/GameplayAbilitySpecHandle.h">FGameplayAbilitySpecHandle</a>.</p>
<h2 id="Gameplay-Ability-Instancing-Policy"><a href="#Gameplay-Ability-Instancing-Policy" class="headerlink" title="Gameplay Ability Instancing Policy"></a>Gameplay Ability Instancing Policy</h2><p>The instancing policy determines when a Gameplay Ability is instanced (the Gameplay Ability object is created) and thus controls the lifetime of the GA.  The safest, and most feature-supported choice is InstancedPerActor.</p>
<h3 id="InstancedPerActor"><a href="#InstancedPerActor" class="headerlink" title="InstancedPerActor"></a>InstancedPerActor</h3><p>When choosing InstancedPerActor, the Gameplay Ability will be instanced when its corresponding Gameplay Ability Spec is first given (granted) to the Actor.  The instance lives until the Gameplay Ability Spec is removed from the Actor.  This lifetime mimics what most users expect:  You are granted an ability and immediately have an instance of it.</p>
<p>The lifetime semantics come with some pitfalls you should be aware of:</p>
<ul>
<li>Since the ability continues to exist after it has ended, none of the variables will be reset for next activation.  Thus it’s the user’s responsibility to reset the variables to the defaults in EndAbility.</li>
<li>Prior to UE5.5, you could receive function calls such as OnGiveAbility&#x2F;OnRemoveAbility on the <em>instance</em> immediately, before the ability had ever been activated.  This isn’t true of the other instancing types, which execute said functions on the CDO.  UE5.5 deprecates such functions in favor of explicit execution on the CDO.</li>
<li>There is a function you may see often called GetPrimaryInstance.  The Primary Instance refers to the InstancedPerActor’s one-and-only instance; it does not apply to other instancing types.</li>
</ul>
<h3 id="InstancedPerExecution"><a href="#InstancedPerExecution" class="headerlink" title="InstancedPerExecution"></a>InstancedPerExecution</h3><p>When choosing InstancedPerExecution, you receive a new instance of the Gameplay Ability for each and every activation.  Some things you should be aware of:</p>
<ul>
<li>The instancing happens on activation (not prior to it).  It is possible to Grant &amp; Revoke an InstancedPerExecution ability without ever instancing it.</li>
<li>Replicated Gameplay Abilities (GA’s which contain RPC’s or Replicated Variables) are relatively expensive, as a new GA must be sent for every activation.</li>
<li>Unlike InstancedPerActor, an individual instance is always active (otherwise it would have not been created).  It is garbage collected immediately upon ending.</li>
</ul>
<h3 id="NonInstanced-Deprecated"><a href="#NonInstanced-Deprecated" class="headerlink" title="NonInstanced (Deprecated)"></a>NonInstanced (Deprecated)</h3><p>Prior to UE5.5, we had functionality for Non-Instanced Gameplay Abilities.  Since these Gameplay Abilities were never instanced, they could not be replicated or even hold state (e.g. contain variables).  All functions were called on the ClassDefaultObject and thus all state had to be held on the Gameplay Ability Spec.  This made them very confusing to use.  The same functionality can be achieved by simply using InstancedPerActor and never revoking it; the cost is just a single allocation (instance) of a UGameplayAbility.</p>
<h2 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h2><p>There is a replication policy variable on the Gameplay Abilities.  The setting controls whether or not you are able to use Remote Procedure Calls (RPC’s) or Replicated Variables (now deprecated, see below).  It does <em>not</em> control if a Gameplay Ability will activate both on Server &amp; Client – that is controlled via the Execution Policy.</p>
<p>Keep in mind that Gameplay Abilities exist only on the locally controlled actors and on the server.  As such, you cannot replicate data meant to be visible on Simulated Proxies using Gameplay Abilities.  You would have to use other mechanisms, such as Attributes for replicated variables, or use RPC’s directly on the Actors.</p>
<h3 id="Replicated-Variables-in-Gameplay-Abilities"><a href="#Replicated-Variables-in-Gameplay-Abilities" class="headerlink" title="Replicated Variables in Gameplay Abilities"></a>Replicated Variables in Gameplay Abilities</h3><p>The usage of replicated variables is deprecated as of UE5.5.  The deprecation warning is controlled by a Console Variable “AbilitySystem.DeprecateReplicatedProperties”, so that users can turn off the warning and continue using the feature until they are ready to fix the issue.</p>
<p>The reasoning is to prevent users from stumbling upon an impossible-to-solve bug regarding replication ordering:</p>
<ul>
<li>Replicated variables are guaranteed to be delivered, but not in any particular order with respect to each other or RPC functions.</li>
<li>Gameplay Ability activation (and most synchronizing functions such as Target Data) rely on RPC’s exchanged between the Client and Server.</li>
<li>Therefore, when executing an RPC (e.g. Gameplay Ability Activation) and performing operations on a replicated variable, you would never be guaranteed to have an up-to-date or stale value.</li>
</ul>
<p>For more information, see the <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/replicated-object-execution-order-in-unreal-engine">EDC article on object replication order</a>.</p>
<p>If you believe you need a replicated variable, the solution is to instead use a Reliable RPC to send that data over.  Using a Reliable RPC will ensure proper ordering with the underlying synchronization mechanisms of GAS.</p>
<h3 id="Remote-Procedure-Calls-in-Gameplay-Abilities"><a href="#Remote-Procedure-Calls-in-Gameplay-Abilities" class="headerlink" title="Remote Procedure Calls in Gameplay Abilities"></a>Remote Procedure Calls in Gameplay Abilities</h3><p>Remote Procedure Calls (RPC’s) are the preferred method of communicating data between the client&#x2F;server.  By making a Reliable RPC, you can ensure proper ordering with the other Gameplay Ability functions that support replication such as Activation.  There is currently no restriction against Unreliable RPC’s, but know that order or delivery is not guaranteed.</p>
<p>Using a Multicast RPC will produce a validation warning (typically visible when compiling the Blueprint).  Since Gameplay Abilities never exist on Simulated Proxies, Multicast RPC’s make little sense in the context of a Gameplay Ability.</p>
<h3 id="RPC-Batching-to-Ensure-Proper-Activation-and-ReplicatedTargetData-Order"><a href="#RPC-Batching-to-Ensure-Proper-Activation-and-ReplicatedTargetData-Order" class="headerlink" title="RPC Batching to Ensure Proper Activation and ReplicatedTargetData Order"></a>RPC Batching to Ensure Proper Activation and ReplicatedTargetData Order</h3><p>There is a trick Epic uses internally to bundle the Gameplay Ability activation and Replicated Target Data.  Normally, if one were to implement a Locally Predicted Gameplay Ability that calls Activate() which in turn sets Replicated Target Data, the two would arrive at the Server in separate RPC’s:</p>
<ol>
<li>ServerTryActivateAbility (which will in turn call Activate)</li>
<li>ServerSetReplicatedTargetData (which will then set the data to the desired value – but Activate has already run!)</li>
</ol>
<p>There is a structure called <a href="./Source/GameplayAbilities/Public/GameplayAbilityTypes.h">FScopedServerAbilityRPCBatcher</a> which is designed to use a single RPC to send both Activation and Target Data.  To use it, do the following:</p>
<ol>
<li>In your <code>UAbilitySystemComponent</code>-derived class, override <code>ShouldDoServerAbilityRPCBatch</code> to return true.</li>
<li>In native code, Create an FScopedServerAbilityRPCBatcher on the stack.</li>
<li>Activate your Ability through your desired function (e.g. TryActivateAbility).</li>
<li>During the initial Activation of your ability, perform any CallServerSetReplicatedTargetData call.</li>
<li>When the destructor of the FScopedServerAbilityRPCBatcher executes (by going out of scope), it will call a batched RPC that contains both the Activation and the ReplicatedTargetData.</li>
</ol>
<p>By using this structure, you will be guaranteed that the Server has the desired RPC data prior to calling the Gameplay Ability’s activation function.</p>
<hr>
<h1 id="Gameplay-Effects-gameplay-effects"><a href="#Gameplay-Effects-gameplay-effects" class="headerlink" title="Gameplay Effects gameplay-effects}"></a>Gameplay Effects {#gameplay-effects}</h1><p>The purpose of Gameplay Effects is to modify an Actor in a predictable (and undoable) way.  Think of the verb Affect when you think of Gameplay Effects.  These are not Visual Effects or Sound Effects (those are called Gameplay Cues).  The Gameplay Effects are <em>applied</em> using <a href="#gameplay-effect-specs">Gameplay Effect Specs</a> through the Ability System Component.</p>
<ul>
<li>Gameplay Effects that have a Duration (non-Instant) will automatically undo any modifications to the Actor upon removal. Instant ones will modify the Attribute’s <em>BaseValue</em>.</li>
<li>These are typically data-only Blueprints, though native implementations are also supported.</li>
<li>They should be static after compile time; there is no way to modify them during runtime (Gameplay Effect Specs are the runtime version).</li>
<li>They are essentially a complex datatable of things that should occur to a Target Actor when ‘applied’.</li>
<li>Composed from these pieces:<ul>
<li>Duration &#x2F; Timing data (such as how long the Effect lasts for, or how it periodically executes).</li>
<li>Rules for Stacking the Gameplay Effects.</li>
<li>Attribute Modifiers (data that controls how a Gameplay Attribute is modified and thus can be undone).</li>
<li>Custom Executions (a user definable function that executes every time a Gameplay Effect is applied).</li>
<li>Gameplay Effect Components (fragments of code &#x2F; behavior to execute when applied).</li>
<li>Rules for applying Gameplay Cues (the VisualFX and AudioFX).</li>
</ul>
</li>
</ul>
<h2 id="Gameplay-Effect-Components-gameplay-effect-components"><a href="#Gameplay-Effect-Components-gameplay-effect-components" class="headerlink" title="Gameplay Effect Components gameplay-effect-components}"></a>Gameplay Effect Components {#gameplay-effect-components}</h2><p>Gameplay Effect Components are introduced in UE5.3 to declutter the Gameplay Effect user interface and allow users of the Engine to provide their own game-specific functionality to Gameplay Effects.  </p>
<p>Read the interface for <a href="./Source/GameplayAbilities/Public/GameplayEffectComponent.h">UGameplayEffectComponent</a></p>
<h2 id="Gameplay-Effect-Specs-gameplay-effect-specs"><a href="#Gameplay-Effect-Specs-gameplay-effect-specs" class="headerlink" title="Gameplay Effect Specs gameplay-effect-specs}"></a>Gameplay Effect Specs {#gameplay-effect-specs}</h2><p>These are the runtime wrapper structs for a Gameplay Effect.  They define the Gameplay Effect, any dynamic parameters (such as SetByCaller data), and the tags as they existed when the Spec was created.  The majority of the runtime API’s use a <em>GameplayEffectSpec</em> rather than a <em>GameplayEffect</em>.</p>
<h2 id="Gameplay-Effect-Executions-gameplay-effect-executions"><a href="#Gameplay-Effect-Executions-gameplay-effect-executions" class="headerlink" title="Gameplay Effect Executions gameplay-effect-executions}"></a>Gameplay Effect Executions {#gameplay-effect-executions}</h2><p>Gameplay Effect Executions are game-specific, user-written functions that are configured to execute when particular Gameplay Effects execute.  They typically read from and write to <a href="#gameplay-attributes">Gameplay Attributes</a>.  These are used when the calculations are much more complex than can be achieved with a simple attribute modifier.  Examples of this would be a damage system (see the <a href="https://dev.epicgames.com/documentation/unreal-engine/lyra-sample-game-in-unreal-engine">Lyra Example</a>).</p>
<hr>
<h1 id="Gameplay-Tags-gameplay-tags"><a href="#Gameplay-Tags-gameplay-tags" class="headerlink" title="Gameplay Tags gameplay-tags}"></a>Gameplay Tags {#gameplay-tags}</h1><p>The Gameplay Ability System uses Gameplay Tags extensively throughout.  See the <a href="https://dev.epicgames.com/documentation/unreal-engine/using-gameplay-tags-in-unreal-engine">official Developer Community documentation</a> for more details.</p>
<hr>
<h1 id="Gameplay-Cues-gameplay-cues"><a href="#Gameplay-Cues-gameplay-cues" class="headerlink" title="Gameplay Cues gameplay-cues}"></a>Gameplay Cues {#gameplay-cues}</h1><p>Gameplay Cues are a system for decoupling visual and audio fx from gameplay code.  On start-up, special Gameplay Cue asset folders are scanned for <a href="./Source/GameplayAbilities/Public/GameplayCueSet.h">Gameplay Cue Sets</a>, and <em>Gameplay Cue Notify</em> classes.</p>
<p>The implementer of a gameplay feature will either call the <a href="#asc">Ability System Component</a>‘s GameplayCue functions, or the <a href="./Source/GameplayAbilities/Public/GameplayCueManager.h">GameplayCueManager</a>‘s Gameplay Cue functions with a specific <a href="#gameplay-tag">Gameplay Tag</a>.  The effects artist will then create a <em>Gameplay Cue Notify</em> that corresponds to that tag.  The Gameplay Cue Manager is responsible for routing that specific tag to the proper <em>Gameplay Cue Notify</em>.</p>
<h2 id="Gameplay-Cue-replication"><a href="#Gameplay-Cue-replication" class="headerlink" title="Gameplay Cue replication"></a>Gameplay Cue replication</h2><p>The details of Gameplay Cue replication are complex and worth noting.  Because these are cosmetic-only, there are unreliable RPC’s that are used to communicate the execution of short-lived “<em>Burst</em>“ cues.  We also use variable replication to synchronize the existance of longer cues (typically referred to as <em>Looping</em> or <em>Actor Notfies</em>).  This two-tiered approach ensures that Gameplay Cues can be dropped as unimportant, but also ensures important cues can be visible to any clients that <em>become relevant</em> according to the network system.</p>
<p>Due to these Gameplay Cues needing to obey network relevancy (i.e. far away players should not replicate their Cues, but newly relevant ones should) and the fact that the PlayerState is <em>always relevant</em>, there is a <em>replication proxy</em> system.  The Player’s Pawn (who has its <a href="#asc">ASC</a> on the PlayerState) should implement the <a href="./Source/GameplayAbilities/Public/AbilitySystemReplicationProxyInterface.h">IAbilitySystemReplicationProxyInterface</a>.  When turning on the ASC’s ReplicationProxyEnabled variable, all unreliable Gameplay Cue RPC’s will go through the proxy interface (the Pawn, which properly represents relevancy).</p>
<p>An advanced form of replication proxies also exists for the property replication so it may follow the same relevancy rules.  See <code>FMinimalGameplayCueReplicationProxy</code> in the <a href="./Source/GameplayAbilities/Public/GameplayCueInterface.h">GameplayCueInterface</a>.</p>
<p>Due to the Burst Cues being replicated by RPC and the Looping Cues being replicated by replicated variables, one can run into an issue where the unreliable burst RPC gets dropped but the looping events (OnBecomeRelevant&#x2F;OnCeaseRelevant) arrive.  Less obvious, the unreliable OnBurst RPC can arrive but the OnBecomeRelevant&#x2F;OnCeaseRelevant can be dropped if the Cue is removed on the server quick enough to result in no state changes for network serialization.</p>
<p>See the section on <a href="#gc-events">Gameplay Cue Events</a> below for guidelines on how to implement your Gameplay Cue while taking into consideration network replication.</p>
<h2 id="Gameplay-Cue-Events-gc-events"><a href="#Gameplay-Cue-Events-gc-events" class="headerlink" title="Gameplay Cue Events gc-events}"></a>Gameplay Cue Events {#gc-events}</h2><p>When implementing a Gameplay Cue Notify Actor, the (legacy) naming of the functions may be confusing.  In UE5.5 the Blueprint (user-facing) names have changed in order to better represent what each function does.  They are laid out below.</p>
<h3 id="OnExecute"><a href="#OnExecute" class="headerlink" title="OnExecute"></a>OnExecute</h3><p>The execute function is the easiest to reason about:  It happens when you <em>Execute</em> a one-shot Gameplay Cue (aka a Static Notify &#x2F; non-Looping Gameplay Cue).  The code path to Execute a Gameplay Cue (for Static Notifies) is different than the code path to Add a Gameplay Cue (for Looping Gameplay Cues aka Actor Notifies).</p>
<p>Due to the code path for execution being different, the caller of the Gameplay Cue must know that the receiver of the Gameplay Cue is a Static Notify in order for this to execute properly.  The call should route through ExecuteGameplayCue see <a href="./Source/GameplayAbilities/Public/GameplayCueFunctionLibrary.h">GameplayCueFunctionLibrary</a>.</p>
<h3 id="OnBurst-native-OnActive"><a href="#OnBurst-native-OnActive" class="headerlink" title="OnBurst (native: OnActive)"></a>OnBurst (native: OnActive)</h3><p>This event executes only once when a <em>Looping Gameplay Cue</em> first fires.  Due to it being delivered by unreliable RPC, it can be dropped silently by a client.  You can use this to implement cosmetic effects that are only relevant if a client witnessed the Gameplay Cue triggering.</p>
<h3 id="OnBecomeRelevant-native-WhileActive"><a href="#OnBecomeRelevant-native-WhileActive" class="headerlink" title="OnBecomeRelevant (native: WhileActive)"></a>OnBecomeRelevant (native: WhileActive)</h3><p>This event executes when the <em>Looping Gameplay Cue</em> first comes into network relevancy (usually when it’s first added).  For instance, PawnA can have a Gameplay Cue activated, PawnB can join the game and still receive PawnA’s OnBecomeRelevant – but not receive OnBurst.</p>
<p>This is important to understand as OnBecomeRelevant and OnCeaseRelevant are both guaranteed to fire on the same Cue, whereas OnBurst is not guaranteed.</p>
<h3 id="OnCeaseRelevant-native-OnRemove"><a href="#OnCeaseRelevant-native-OnRemove" class="headerlink" title="OnCeaseRelevant (native: OnRemove)"></a>OnCeaseRelevant (native: OnRemove)</h3><p>This event executes when the <em>Looping Gameplay Cue</em> gets removed from network relevancy.  Usually that’s when the server executes the removal of the Cue, but could also be when the client loses relevancy (e.g. by distance) of the viewed Cue.</p>
<p>In UE5.5, a warning is introduced if a Gameplay Cue implements OnBurst and OnCeaseRelevant and not OnBecomeRelevant.  The reasoning is that the opposite of OnCeaseRelevant is OnBecomeRelevant, not OnBurst and it’s likely that the old naming scheme (OnActive&#x2F;OnRemove) was a source of confusion.</p>
<hr>
<h1 id="How-Gameplay-Prediction-Works"><a href="#How-Gameplay-Prediction-Works" class="headerlink" title="How Gameplay Prediction Works"></a>How Gameplay Prediction Works</h1><p>There is documentation for how the Gameplay Prediction mechanisms work at the top of <a href="./Source/GameplayAbilities/Public/GameplayPrediction.h">GameplayPrediction.h</a>.</p>
<hr>
<h1 id="Ability-System-Globals"><a href="#Ability-System-Globals" class="headerlink" title="Ability System Globals"></a>Ability System Globals</h1><p>There is a class called <a href="./Source/GameplayAbilities/Public/AbilitySystemGlobals.h">AbilitySystemGlobals</a> which provide project customization points for how to handle specific base Ability System scenarios.  For example, there a functions you can override to implement derived classes of types used throughout the code (such as <code>AllocGameplayEffectContext</code>).</p>
<p>In UE5.5, a lot of these settings have started migrating to the <a href="./Source/GameplayAbilities/Public/GameplayAbilitiesDeveloperSettings.h">GameplayAbilitiesDeveloperSettings</a> (which can be accessed using the Editor and choose the Project Settings menu item).  The rough division of responsibilities:  If it’s a global setting (like a variable) then it should be configurable through Gameplay Abilities Developer Settings; if it’s functionality (such as allocating project-specific classes) it should be in <a href="./Source/GameplayAbilities/Public/AbilitySystemGlobals.h">AbilitySystemGlobals</a>.</p>
<hr>
<h1 id="Debugging-the-Gameplay-Ability-System"><a href="#Debugging-the-Gameplay-Ability-System" class="headerlink" title="Debugging the Gameplay Ability System"></a>Debugging the Gameplay Ability System</h1><h2 id="Legacy-ShowDebug-Functionality"><a href="#Legacy-ShowDebug-Functionality" class="headerlink" title="Legacy ShowDebug Functionality"></a>Legacy ShowDebug Functionality</h2><p>Prior to UE5.4, the way to debug the Gameplay Ability System was to use the “ShowDebug AbilitySystem” command.  Once there, you can cycle through the categories using the command <code>AbilitySystem.Debug.NextCategory</code> or explicitly choose a category using <code>AbilitySystem.Debug.SetCategory</code>.  This system is no longer maintained and may be deprecated in future versions.  You should instead be looking at the <a href="#gameplay-debugger">Gameplay Debugger</a> functionality.</p>
<h2 id="Gameplay-Debugger-gameplay-debugger"><a href="#Gameplay-Debugger-gameplay-debugger" class="headerlink" title="Gameplay Debugger gameplay-debugger}"></a>Gameplay Debugger {#gameplay-debugger}</h2><p>New in UE5.4, there is enhanced Gameplay Debugger functionality for the Gameplay Ability System.  This functionality is preferred over the ShowDebug system and should be your first line of defense in debugging GAS.  To enable it, open the Gameplay Debugger typically by using <code>shift-apostrophe</code> (<code>shift-&#39;</code>) to select the locally controlled player, or simply the <code>apostrophe</code> (<code>&#39;</code>) key to select the Actor that is closest to your reticule.</p>
<p>The debugger will show you the AbilitySystemComponent’s current state as it pertains to Gameplay Tags, Gameplay Abilities, Gameplay Effects, and Gameplay Attributes.  In a networked game, the color coding helps to differentiate between how the server and client view their state.</p>
<h2 id="Console-Commands"><a href="#Console-Commands" class="headerlink" title="Console Commands"></a>Console Commands</h2><p>There are console commands that help both in developing and debugging GAS.  They are a great way to verify that your assumptions are correct about how abilities and effects should be activated, and coupled with the <a href="#gameplay-debugger">Gameplay Debugger</a>, what your state should be once executed.</p>
<p>All Ability System debug commands are prefixed with <code>AbilitySystem</code>.  The functionality we’re reviewing here exists in the <a href="./Source/GameplayAbilities/Private/AbilitySystemCheatManagerExtension.cpp">AbilitySystemCheatManagerExtension</a>.  The source code also serves as an excellent reference  how to properly trigger the Gameplay Abilities and Gameplay Effects in native code (and what the expected results would be, depending on their configurations).</p>
<p>By implementing these in a Cheat Manager Extension, you are able to properly execute them as a local player, or on the server.  Many of the commands allow such a distinction with the <code>-Server</code> argument (read the command documentation or source code for more information).</p>
<p>One of the gotchas when using these commands is that the assets should be loaded prior to their use.  This is easily done in the Editor by simply right-clicking on the assets you want to use and clicking “Load Assets”.</p>
<p><code>AbilitySystem.Ability.Grant &lt;ClassName/AssetName&gt;</code> Grants an Ability to the Player.  Granting only happens on the Authority, so this command will be sent to the Server.<br><code>AbilitySystem.Ability.Activate [-Server] &lt;TagName/ClassName/AssetName&gt;</code> Activate a Gameplay Ability.  Substring name matching works for Activation Tags (on already granted abilities), Asset Paths (on non-granted abilities), or Class Names on both.  Some Abilities can only be activated by the Client or the Server and you can control all of these activation options by specifying or ommitting the <code>-Server</code> argument.<br><code>AbilitySystem.Ability.Cancel [-Server] &lt;PartialName&gt;</code> Cancels (prematurely Ends) a currently executing Gameplay Ability.  Cancelation can be initiated by either the Client or Server.<br><code>AbilitySystem.Ability.ListGranted</code> List the Gameplay Abilities that are granted to the local player.  Since granting is done on the Server but replicated to the Client, these should always be in sync (so no option for -Server).</p>
<p><code>AbilitySystem.Effect.ListActive [-Server]</code> Lists all of the Gameplay Effects currently active on the Player.<br><code>AbilitySystem.Effect.Remove [-Server] &lt;Handle/Name&gt;</code> Remove a Gameplay Effect that is currently active on the Player.<br><code>AbilitySystem.Effect.Apply [-Server] &lt;Class/Assetname&gt; [Level]</code> Apply a Gameplay Effect on the Player.  Substring name matching works for Asset Tags, Asset Paths, or Class Names.  Use -Server to send to the server (default is apply locally).</p>
<p>Gameplay Cues have their own set of debug commands.</p>
<p><code>AbilitySystem.LogGameplayCueActorSpawning</code> Log when we create GameplayCueNotify_Actors.<br><code>AbilitySystem.DisplayGameplayCues</code> Display GameplayCue events in world as text.<br><code>AbilitySystem.GameplayCue.DisplayDuration</code> Configure the amount of time Gameplay Cues are drawn when <code>DisplayGameplayCues</code> is enabled.<br><code>AbilitySystem.DisableGameplayCues</code> Disables all GameplayCue events in the world.<br><code>AbilitySystem.GameplayCue.RunOnDedicatedServer</code> Run gameplay cue events on dedicated server.<br><code>AbilitySystem.GameplayCueActorRecycle</code> Allow recycling of GameplayCue Actors.<br><code>AbilitySystem.GameplayCueActorRecycleDebug</code> Prints logs for GC actor recycling debugging.<br><code>AbilitySystem.GameplayCueCheckForTooManyRPCs</code> Warns if gameplay cues are being throttled by network code.</p>
<h2 id="Visual-Logger"><a href="#Visual-Logger" class="headerlink" title="Visual Logger"></a>Visual Logger</h2><p>New in UE5.4, there has been extra care put into the <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/visual-logger-in-unreal-engine">Visual Logger</a> facilities for the Gameplay Ability System.  The <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/visual-logger-in-unreal-engine">Visual Logger</a> is useful to see the complex interactions of Gameplay Abilities and Gameplay Effects over time.  The Visual Logger always captures the verbose logs and saves a snapshot of the state of the Ability System Component on every frame there is a log entry.</p>
<p>In UE5.4, the <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/visual-logger-in-unreal-engine">Visual Logger</a> now correctly orders the events between clients and servers when using Play In Editor.  This makes the Visual Logger especially useful for debugging how the client and server interact when activating abilities, gameplay effects, and modifying attributes.</p>
]]></content>
      <categories>
        <category>UE Source</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
        <tag>UE Source</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.5-GameplayPrediction</title>
    <url>/2025/03/05/UE55GamplayPrediction/</url>
    <content><![CDATA[<h1 id="SourceCode源码"><a href="#SourceCode源码" class="headerlink" title="SourceCode源码"></a><a href="https://github.com/MikeMing126/UESourceCode/blob/main/UE55_GAS_GameplayPrediction.h">SourceCode源码</a></h1><h1 id="Overview-of-Gameplay-Ability-Prediction"><a href="#Overview-of-Gameplay-Ability-Prediction" class="headerlink" title="Overview of Gameplay Ability Prediction"></a>Overview of Gameplay Ability Prediction</h1><h2 id="High-Level-Goals"><a href="#High-Level-Goals" class="headerlink" title="High Level Goals"></a>High Level Goals</h2><ul>
<li>At the GameplayAbility level (implementing an ability) prediction is transparent. An ability says “Do X-&gt;Y-&gt;Z”, and we will automatically predict the parts of that that we can.</li>
<li>We wish to avoid having logic such as “If Authority: Do X. Else: Do predictive version of X” in the ability itself.</li>
</ul>
<p>At this point, not all cases are solved, but we have a very solid framework for working with client side prediction.</p>
<p>When we say “client side prediction” we really mean client predicting game simulation state. Things can still be ‘completely client side’ without having to work within a prediction system.<br>For example, footsteps are completely client side and never interact with this system. But clients predicting their mana going from 100 to 90 when they cast a spell is ‘client side prediction’.</p>
<h2 id="What-do-we-currently-predict"><a href="#What-do-we-currently-predict" class="headerlink" title="What do we currently predict?"></a>What do we currently predict?</h2><ul>
<li>Initial GameplayAbility activation (and chained activation with caveats)</li>
<li>Triggered Events</li>
<li>GameplayEffect application:<ul>
<li>Attribute modification (EXCEPTIONS: Executions do not currently predict, only attribute modifiers)</li>
<li>GameplayTag modification</li>
</ul>
</li>
<li>Gameplay Cue events (both from within predictive gameplay effect and on their own)</li>
<li>Montages</li>
<li>Movement (built into UE UCharacterMovement)</li>
</ul>
<h2 id="Some-things-we-don’t-predict-most-of-these-we-potentially-could-but-currently-dont"><a href="#Some-things-we-don’t-predict-most-of-these-we-potentially-could-but-currently-dont" class="headerlink" title="Some things we don’t predict (most of these we potentially could, but currently dont):"></a>Some things we don’t predict (most of these we potentially could, but currently dont):</h2><ul>
<li>GameplayEffect removal</li>
<li>GameplayEffect periodic effects (dots ticking)</li>
</ul>
<h2 id="Problems-we-attempt-to-solve"><a href="#Problems-we-attempt-to-solve" class="headerlink" title="Problems we attempt to solve"></a>Problems we attempt to solve</h2><ol>
<li>“Can I do this?” Basic protocol for prediction.</li>
<li>“Undo” How to undo side effects when a prediction fails.</li>
<li>“Redo” How to avoid replaying side effects that we predicted locally but that also get replicated from the server.</li>
<li>“Completeness” How to be sure we &#x2F;really&#x2F; predicted all side effects.</li>
<li>“Dependencies” How to manage dependent prediction and chains of predicted events.</li>
<li>“Override” How to override state predictively that is otherwise replicated&#x2F;owned by the server.</li>
</ol>
<hr>
<h2 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h2><h3 id="​​-PredictionKey-​"><a href="#​​-PredictionKey-​" class="headerlink" title="​​ PredictionKey ​"></a>​<em><strong>​ PredictionKey ​</strong></em></h3><p>A fundamental concept in this system is the <code>FPredictionKey</code>. A prediction key on its own is simply a unique ID that is generated in a central place on the client. The client will send its prediction key to the server,<br>and associate predictive actions and side effects with this key. The server may respond with an accept&#x2F;reject for the prediction key, and will also associate the server-side created side effects with this prediction key.</p>
<p>(IMPORTANT) <code>FPredictionKey</code> always replicates client -&gt; server, but when replicating server -&gt; clients they <em>only</em> replicate to the client that sent the prediction key to the server in the first place.<br>This happens in <code>FPredictionKey::NetSerialize</code>. All other clients will receive an invalid (0) prediction key when a prediction key sent from a client is replicated back down through a replicated property.</p>
<hr>
<h3 id="​​-Ability-Activation-​"><a href="#​​-Ability-Activation-​" class="headerlink" title="​​ Ability Activation ​"></a>​<em><strong>​ Ability Activation ​</strong></em></h3><p>Ability Activation is a first class predictive action – it generates an initial prediction key. Whenever a client predictively activates an ability, it explicitly asks the server and the server explicitly responds. Once an ability has been<br>predictively activated (but the request has not yet been sent), the client has a valid ‘prediction window’ where predictive side effects can happen which are not explicitly ‘asked about’. (E.g., we do not explicitly ask ‘Can I decrement mana, Can I put this ability on cooldown. Those actions are considered logically atomic with activating an ability). You can think of this prediction window as being the initial callstack of <code>ActivateAbility</code>. Once <code>ActivateAbility</code> ends, your<br>prediction window (and therefore your prediction key) is no longer valid. This is important, because many things can invalidate your prediction window such as any timers or latent nodes in your Blueprint; we do not predict over multiple frames.</p>
<p><strong>AbilitySystemComponent</strong>​ provides a set of functions for communicating ability activation between clients and server: <code>TryActivateAbility</code> -&gt; <code>ServerTryActivateAbility</code> -&gt; <code>ClientActivateAbility(Failed/Succeed)</code>.</p>
<ol>
<li>Client calls <code>TryActivateAbility</code> which generates a new <code>FPredictionKey</code> and calls <code>ServerTryActivateAbility</code>.</li>
<li>Client continues (before hearing back from server) and calls <code>ActivateAbility</code> with the generated <code>PredictionKey</code> associated with the Ability’s <code>ActivationInfo</code>.</li>
<li>Any side effects that happen &#x2F;before the call to <code>ActivateAbility</code> finish&#x2F; have the generated <code>FPredictionKey</code> associated with them.</li>
<li>Server decides if the ability really happened in <code>ServerTryActivateAbility</code>, calls <code>ClientActivateAbility(Failed/Succeed)</code> and sets <code>UAbilitySystemComponent::ReplicatedPredictionKey</code> to the generated key that was sent with the request by the client.</li>
<li>If client receives <code>ClientAbilityFailed</code>, it immediately kills the ability and rolls back side effects that were associated with the prediction key.<ul>
<li>‘Rolling back’ logic is registered via <code>FPredictionKeyDelegates</code> and <code>FPredictionKey::NewRejectedDelegate/NewCaughtUpDelegate/NewRejectOrCaughtUpDelegate</code>.</li>
<li><code>ClientAbilityFailed</code> is really the only case where we ‘reject’ prediction keys and thus all of our current predictions rely on if an ability activates or not.</li>
</ul>
</li>
<li>If <code>ServerTryActivateAbility</code> succeeds, client must wait until property replication catches up (the Succeed RPC will be sent immediately, property replication will happen on its own). Once the <code>ReplicatedPredictionKey</code> catches up to the<br>key used previous steps, the client can undo its predictive side effects.<ul>
<li>See <code>FReplicatedPredictionKeyItem::OnRep</code> for the CatchUpTo logic. See <code>UAbilitySystemComponent::ReplicatedPredictionKeyMap</code> for how the keys actually get replicated. See ~&#96;FScopedPredictionWindow&#96; where the server acknowledges keys.</li>
</ul>
</li>
</ol>
<hr>
<h3 id="​​-GameplayEffect-Prediction-​"><a href="#​​-GameplayEffect-Prediction-​" class="headerlink" title="​​ GameplayEffect Prediction ​"></a>​<em><strong>​ GameplayEffect Prediction ​</strong></em></h3><p>GameplayEffects are considered side effects of ability activation and are not separately accepted&#x2F;rejected.</p>
<ol>
<li>GameplayEffects are only applied on clients if there is a valid prediction key. (If no prediction key, it simply skips the application on client).</li>
<li>Attributes, GameplayCues, and GameplayTags are all predicted if the GameplayEffect is predicted.</li>
<li>When the <code>FActiveGameplayEffect</code> is created, it stores the prediction key (<code>FActiveGameplayEffect::PredictionKey</code>)<ul>
<li>Instant effects are explained below in “Attribute Prediction”.</li>
</ul>
</li>
<li>On the server, the same prediction key is also set on the server’s <code>FActiveGameplayEffect</code> that will be replicated down.</li>
<li>As a client, if you get a replicated <code>FActiveGameplayEffect</code> with a valid prediction key on it, you check to see if you have an <code>ActiveGameplayEffect</code> with that same key, if there is match, we do not apply<br>the ‘on applied’ type of logic, e.g., GameplayCues. The solves the “Redo” problem. However we will have 2 of the ‘same’ GameplayEffects in our ActiveGameplayEffects container, temporarily:</li>
<li>At the same time, <code>FReplicatedPredictionKeyItem::OnRep</code> will catch up and the predictive effects will be removed. When they are removed in this case, we again check <code>PredictionKey</code> and decide<br>if we should not do the ‘On Remove’ logic &#x2F; GameplayCue.</li>
</ol>
<p>See <code>FActiveGameplayEffectsContainer::ApplyGameplayEffectSpec</code> where it registers what to do when caught-up (RemoveActiveGameplayEffect_NoReturn).<br>See <code>FActiveGameplayEffect::PostReplicatedAdd</code>, <code>FActiveGameplayEffect::PreReplicatedRemove</code>, and <code>FActiveGameplayCue::PostReplicatedAdd</code> for examples of how <code>FPredictionKey</code> is associated with the GE’s and GC’s.</p>
<hr>
<h3 id="​​-Attribute-Prediction-​"><a href="#​​-Attribute-Prediction-​" class="headerlink" title="​​ Attribute Prediction ​"></a>​<em><strong>​ Attribute Prediction ​</strong></em></h3><p>Since attributes are replicated as standard uproperties, predicting modification to them can be tricky (“Override” problem). Instantaneous modification can be even harder since these are non stateful by nature.<br>(E.g., rolling back an attribute mod is difficult if there is no book keeping past the modification). This makes the “Undo” and “Redo” problem also hard in this case.</p>
<p>The basic plan of attack is to treat attribute prediction as delta prediction rather than absolute value prediction. We do not predict that we have 90 mana, we predict that we have -10 mana from the server value, until<br>the server confirms our prediction key. Basically, treat instant modifications as &#x2F;infinite duration modifications&#x2F; to attributes while they are done predictively. The solves “Undo” and “Redo”.</p>
<p>For the “override” problem, we can handle this in the properties <code>OnRep</code> by treating the replicated (server) value as the ‘base value’ instead of ‘final value’ of the attribute, and to<br>reaggregate our ‘final value’ after a replication happens.</p>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyHealthSet::GetLifetimeReplicatedProps</span><span class="params">(TArray&lt; FLifetimeProperty &gt; &amp; OutLifetimeProps)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">GetLifetimeReplicatedProps</span>(OutLifetimeProps);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UMyHealthSet, Health, COND_None, REPNOTIFY_Always);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Gameplay-Cue-Events"><a href="#Gameplay-Cue-Events" class="headerlink" title="Gameplay Cue Events"></a>Gameplay Cue Events</h1><p>Outside of GameplayEffects which are already explained, Gameplay Cues can be activated on their own. These functions (<code>UAbilitySystemComponent::ExecuteGameplayCue</code> etc) take network role and prediction keys into account.</p>
<p>In <code>UAbilitySystemComponent::ExecuteGameplayCue</code>, if authority then do the multicast event (with replication key). If non authority but w&#x2F; a valid prediction key, predict the GameplayCue.<br>On the receiving end (<code>NetMulticast_InvokeGameplayCueExecuted</code> etc), if there is a replication key, then don’t do the event (assume you predicted it).<br>Remember that <code>FPredictionKeys</code> only replicate to the originating owner. This is an intrinsic property of <code>FReplicationKey</code>.</p>
<hr>
<h1 id="Triggered-Data-Prediction"><a href="#Triggered-Data-Prediction" class="headerlink" title="Triggered Data Prediction"></a>Triggered Data Prediction</h1><p>Triggered Data is currently used to activate abilities. Essentially this all goes through the same code path as ActivateAbility. Rather than the ability being activated from input press, it is activated from<br>another game code driven event. Clients are able to predictively execute these events which predictively activate abilities.</p>
<p>There are some nuances to how, since the server will also run the code that triggers events. The server won’t just wait to hear from the client. The server will keep a list of triggered abilities that have been<br>activated from a predictive ability. When receiving a <code>TryActivate</code> from a triggered ability, the server will look to see if &#x2F;it&#x2F; has already run this ability, and respond with that information.</p>
<p>The issue is we do not properly rollback these operations. There is work left to do on Triggered Events and replication. (explained at the end).</p>
<hr>
<h2 id="Advanced-topic-Dependencies"><a href="#Advanced-topic-Dependencies" class="headerlink" title="Advanced topic! Dependencies"></a>Advanced topic! Dependencies</h2><p>We can have situations such as “Ability X activates and immediately triggers an event which activates Ability Y which triggers another Ability Z”. The dependency chain is X-&gt;Y-&gt;Z.<br>Each of those abilities could be rejected by the server. If Y is rejected, then Z also never happened, but the server does not explicitly decide ‘no Z can’t run’.<br>To handle this, we have a concept of a Base PredictionKey, which is a member of <code>FPredictionKey</code>. When calling <code>TryActivateAbility</code>, we pass in the current PredictionKey (if applicable). That prediction key<br>is used as the base for any new prediction keys generated. We build a chain of keys this way, and can then invalidate Z if Y is rejected.</p>
<p>This is slightly more nuanced though. In the X-&gt;Y-&gt;Z case, the server will only receive the PredictionKey for X before trying to run the chain itself. E.g., it will TryActivate Y and Z with the original prediction key<br>sent to it from the client, whereas the client will generate a new PredictionKey each time it calls <code>TryActivateAbility</code>. The client has to generate a new PredictionKey for each ability activate, since each activate<br>is not logically atomic. Each side effect produced in the chain of events has to have a unique PredictionKey. We cannot have GameplayEffects produced in X have the same PredictionKey produced in Z.</p>
<p>To get around this, The prediction key of X is considered the Base key for Y and Z. The dependency from Y to Z is kept completely client side, which is done in by <code>FPredictionKeyDelegates::AddDependency</code>. We add delegates<br>to reject&#x2F;catchup Z if Y rejected&#x2F;confirmed.</p>
<p>This dependency system allows us to have multiple predictive actions that are not logically atomic within a single prediction window&#x2F;scope.</p>
<p>There is a problem though: because the dependencies are kept client side, the server does not actually know if it had previously rejected a dependent action. You can design around this issue by using activation tags<br>in your gameplay abilities. For instance, when predicting dependents GA_Combo1 -&gt; GA_Combo2, you could make GA_Combo2 only activate if it has a GameplayTag given by GA_Combo1. Thus a rejection of GA_Combo1 would also<br>cause the server to reject the activation of GA_Combo2.</p>
<hr>
<h1 id="Additional-Prediction-Windows-within-an-Ability"><a href="#Additional-Prediction-Windows-within-an-Ability" class="headerlink" title="Additional Prediction Windows (within an Ability)"></a>Additional Prediction Windows (within an Ability)</h1><p>As stated, A prediction key is only usable during a single logical scope. Once <code>ActivateAbility</code> returns, we are essentially done with that key. If the ability is waiting on an external event or timer, it’s possible<br>we will have already received a confirm&#x2F;reject from the server by the time we’re ready to continue execution. Thus any additional side effects produced after the initial activation can no longer be tied to the lifespan of the original key.</p>
<p>This isn’t that bad, except that abilities will sometimes want to react to player input. For example, ‘a hold down and charge’ ability wants to instantly predict some stuff when the button is released. It is possible<br>to create a new prediction window within an ability with <code>FScopedPredictionWindow</code>.</p>
<p><strong>FScopedPredictionWindows</strong>​ provides a way to send the server a new prediction key and have the server pick up and use that key within the same logical scope.</p>
<p><code>UAbilityTask_WaitInputRelease::OnReleaseCallback</code> is a good example. The flow of events is as followed:</p>
<ol>
<li>Client enters <code>UAbilityTask_WaitInputRelease::OnReleaseCallback</code> and starts a new <code>FScopedPredictionWindow</code>. This creates a new prediction key for this scope (<code>FScopedPredictionWindow::ScopedPredictionKey</code>).</li>
<li>Client calls <code>AbilitySystemComponent-&gt;ServerInputRelease</code> which passes <code>ScopedPrediction.ScopedPredictionKey</code> as a parameter.</li>
<li>Server runs <code>ServerInputRelease_Implementation</code> which takes the passed in PredictionKey and sets it as <code>UAbilitySystemComponent::ScopedPredictionKey</code> with an <code>FScopedPredictionWindow</code>.</li>
<li>Server runs <code>UAbilityTask_WaitInputRelease::OnReleaseCallback</code> &#x2F;within the same scope&#x2F;</li>
<li>When the server hits the <code>FScopedPredictionWindow</code> in ::OnReleaseCallback, it gets the prediction key from <code>UAbilitySystemComponent::ScopedPredictionKey</code>. That is now used for all side effects within this logical scope.</li>
<li>Once the server ends this scoped prediction window, the prediction key used is finished and set to <code>ReplicatedPredictionKey</code>.</li>
<li>All side effects created in this scope now share a key between client and server.</li>
</ol>
<p>The key to this working is that ::OnReleaseCallback calls ::ServerInputRelease which calls ::OnReleaseCallback on the server. There is no room for anything else to happen and use the given prediction key.</p>
<p>While there is no “Try&#x2F;Failed&#x2F;Succeed” calls in this example, all side effects are procedurally grouped&#x2F;atomic. This solves the “Undo” and “Redo” problems for any arbitrary function calls that run on the server and client.</p>
<hr>
<h1 id="Unsupported-Issues-Todo"><a href="#Unsupported-Issues-Todo" class="headerlink" title="Unsupported &#x2F; Issues&#x2F; Todo"></a>Unsupported &#x2F; Issues&#x2F; Todo</h1><h3 id="Triggered-events-do-not-explicitly-replicate"><a href="#Triggered-events-do-not-explicitly-replicate" class="headerlink" title="Triggered events do not explicitly replicate"></a>Triggered events do not explicitly replicate</h3><ul>
<li>E.g., if a triggered event only runs on the server, the client will never hear about it. This also prevents us from doing cross player&#x2F;AI etc events. Support<br>for this should eventually be added and it should follow the same pattern that GameplayEffect and GameplayCues follow (predict triggered event with a prediction key, ignore the RPC event if it has a prediction key).</li>
</ul>
<p>Big caveat with this whole system: Rollback of any chained activations (including triggered events) is currently not possible out of the box. The reason for this is because each ServerTryActivateAbility is going to be responded to in order.<br>Let’s chain dependent GA’s as an example: GA_Mispredict -&gt; GA_Predict1. In this example, when GA_Mispredict is activated and predicted locally it will immediately also activate GA_Predict1. The client sends ServerTryActivateAbility for GA_Mispredict,<br>and the server rejects it (sending back a ClientActivateAbilityFailed). As it stands, we don’t have any delegates that reject dependent abilities on the client (and the server isn’t even aware there are dependencies). On the server, it also<br>receives a ServerTryActivateAbility for GA_Predict1. Assuming that succeeds, the Client and Server are now both executing GA_Predict1 even though GA_Mispredict never happened. You can design around this by using the tag system to ensure GA_Mispredict succeeded.</p>
<hr>
<h3 id="Predicting-“Meta”-Attributes-such-as-Damage-Healing-vs-“real”-attributes-such-as-Health"><a href="#Predicting-“Meta”-Attributes-such-as-Damage-Healing-vs-“real”-attributes-such-as-Health" class="headerlink" title="Predicting “Meta” Attributes such as Damage&#x2F;Healing vs “real” attributes such as Health"></a>Predicting “Meta” Attributes such as Damage&#x2F;Healing vs “real” attributes such as Health</h3><p>We are unable to apply meta attributes predictively. Meta attributes only work on instant effects, in the back end of GameplayEffect (Pre&#x2F;Post Modify Attribute on the UAttributeSet). These events are not called when<br>applying duration-based gameplay effects. E.g., a GameplayEffect that modifies damage for 5 seconds doesn’t make sense.</p>
<p>In order to support this, we would probably add some limited support for duration based meta attributes, and move the transform of the instant gameplay effect from the front end (<code>UAbilitySystemComponent::ApplyGameplayEffectSpecToSelf</code>)<br>to the backend (<code>UAttributeSet::PostModifyAttribute</code>).</p>
<hr>
<h3 id="Predicting-ongoing-multiplicative-GameplayEffects"><a href="#Predicting-ongoing-multiplicative-GameplayEffects" class="headerlink" title="Predicting ongoing multiplicative GameplayEffects"></a>Predicting ongoing multiplicative GameplayEffects</h3><p>There are also limitations when predicting % based gameplay effects. Since the server replicates down the ‘final value’ of an attribute, but not the entire aggregator chain of what is modifying it, we may run into cases where<br>the client cannot accurately predict new gameplay effects.</p>
<p>For example:</p>
<ul>
<li>Client has a perm +10% movement speed buff with base movement speed of 500 -&gt; 550 is the final movement speed for this client.</li>
<li>Client has an ability which grants an additional 10% movement speed buff. It is expected to <em>sum</em> the % based multipliers for a final 20% bonus to 500 -&gt; 600 movement speed.</li>
<li>However on the client, we just apply a 10% buff to 550 -&gt; 605.</li>
</ul>
<p>This will need to be fixed by replicating down the aggregator chain for attributes. We already replicate some of this data, but not the full modifier list. We will need to look into supporting this eventually.</p>
<hr>
<h3 id="“Weak-Prediction”"><a href="#“Weak-Prediction”" class="headerlink" title="“Weak Prediction”"></a>“Weak Prediction”</h3><p>We will probably still have cases that do not fit well into this system. Some situations will exist where a prediction key exchange is not feasible. For example, an ability where any one that player collides with&#x2F;touches<br>receives a GameplayEffect that slows them and their material blue. Since we can’t send Server RPCs every time this happens (and the server couldn’t necessarily handle the message at its point in the simulation), there is no<br>way to correlate the gameplay effect side effects between client and server.</p>
<p>One approach here may be to think about a weaker form of prediction. One where there is not a fresh prediction key used and instead the server assumes the client will predict all side effects from an entire ability. This would<br>at least solve the “redo” problem but would not solve the “completeness” problem. If the client side prediction could be made as minimal as possible - for example only predicting an initial particle effect rather than<br>predicting the state and attribute change - then the problems get less severe.</p>
<hr>
<h1 id="FPredictionKey-Implementation-Notes"><a href="#FPredictionKey-Implementation-Notes" class="headerlink" title="FPredictionKey Implementation Notes"></a>FPredictionKey Implementation Notes</h1><p><code>FPredictionKey</code> is a generic way of supporting Clientside Prediction in the GameplayAbility system.<br>A <code>FPredictionKey</code> is essentially an ID for identifying predictive actions and side effects that are<br>done on a client. <code>UAbilitySystemComponent</code> supports synchronization of the prediction key and its side effects<br>between client and server.</p>
<p>Essentially, anything can be associated with a <code>PredictionKey</code>, for example activating an Ability.<br>The client can generate a fresh <code>PredictionKey</code> and sends it to the server in its <code>ServerTryActivateAbility</code> call.<br>The server can confirm or reject this call (<code>ClientActivateAbilitySucceed/Failed</code>).</p>
<p>While the client is predicting its ability, it is creating side effects (GameplayEffects, TriggeredEvents, Animations, etc).<br>As the client predicts these side effects, it associates each one with the prediction key generated at the start of the ability<br>activation.</p>
<p>If the ability activation is rejected, the client can immediately revert these side effects.<br>If the ability activation is accepted, the client must wait until the replicated side effects are sent to the server.<br>(The <code>ClientActivatbleAbilitySucceed</code> RPC will be immediately sent. Property replication may happen a few frames later).<br>Once replication of the server created side effects is finished, the client can undo its locally predictive side effects.</p>
<p>The main things <code>FPredictionKey</code> itself provides are:</p>
<ul>
<li>Unique ID and a system for having dependant chains of <code>Prediction Keys</code> (“Current” and “Base” integers)</li>
<li>A special implementation of <code>::NetSerialize</code> which only serializes the prediction key to the predicting client<ul>
<li>This is important as it allows us to serialize prediction keys in replicated state, knowing that only clients that gave the server the prediction key will actually see them!</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>UE Source</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
        <tag>UE Source</tag>
      </tags>
  </entry>
</search>
