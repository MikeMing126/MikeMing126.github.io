<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo APlayer 音频播放及切换网页时保存音频进度</title>
    <url>/2025/03/08/Hexo/HexoAPlayer/</url>
    <content><![CDATA[<h1 id="音乐播放"><a href="#音乐播放" class="headerlink" title="音乐播放"></a>音乐播放</h1><p>主要用于实现网页在线音乐播放</p>
<h2 id="基于Butterfly主题的音乐播放器"><a href="#基于Butterfly主题的音乐播放器" class="headerlink" title="基于Butterfly主题的音乐播放器"></a>基于Butterfly主题的音乐播放器</h2><p>参考文章 <a href="https://polar-bear.eu.org/2023/07/21/hexo-tag-aplayer-cha-jian/">博客</a></p>
<p>插件：hexo-tag-aplayer</p>
<p>启用MeingJS来使用在线网站歌单。</p>
<h3 id="底部播放器切换网站问题"><a href="#底部播放器切换网站问题" class="headerlink" title="底部播放器切换网站问题"></a>底部播放器切换网站问题</h3><h4 id="基于Hexo-Tag-APlayer的PJAX-兼容："><a href="#基于Hexo-Tag-APlayer的PJAX-兼容：" class="headerlink" title="基于Hexo-Tag-APlayer的PJAX 兼容："></a>基于Hexo-Tag-APlayer的PJAX 兼容：</h4><p>在主题配置文件中设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pjax:</span><br><span class="line">  enable: ture</span><br><span class="line">  exclude:</span><br></pre></td></tr></table></figure>

<p><strong>!!!PJAX问题!!!</strong><br>基于这种配置，虽然网页在切换时，音频播放器的进度不会重置，但是很多网页的动画也因此而丢失了。</p>
<h4 id="不使用PJAX的实现方案"><a href="#不使用PJAX的实现方案" class="headerlink" title="不使用PJAX的实现方案:"></a>不使用PJAX的实现方案:</h4><p>参考文章 <a href="https://zsyyblog.com/90153be9.html">博客</a></p>
<ol>
<li>在博客对应的source文件夹中 创建script文件夹。</li>
<li>编写对应的代码文件，并放于script文件夹中。如APlayerHolder.js</li>
<li>在主题yml配置对应的代码</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  bottom:</span><br><span class="line">    - &lt;script src=&quot;/script/APlayerHolder.js&quot;&gt;&lt;/script&gt; //新增代码使用。</span><br><span class="line">    - &lt;class=&quot;aplayer&quot;&gt; //这里是你的音乐播放器配置，不用改。</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>对应代码文件APlayerHolder.js示例</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">InitAPlayerHolder</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//获取全局对象aplayer。</span></span><br><span class="line">    <span class="comment">//注意判空</span></span><br><span class="line">    <span class="keyword">var</span> ap = <span class="variable language_">window</span>.<span class="property">aplayers</span> &amp;&amp; <span class="variable language_">window</span>.<span class="property">aplayers</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ap == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//等待aplayer对象被创建</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="title class_">InitAPlayerHolder</span>, <span class="number">50</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//#region 状态保存函数</span></span><br><span class="line">    <span class="comment">//原基础上加了个检测暂停免得切换页面后爆零(bushi)（指社死）</span></span><br><span class="line">    ap.<span class="title function_">on</span>(<span class="string">&quot;pause&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;aPlayerMusicPaused&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//ap.lrc.hide()</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//自带播放暂停时显隐歌词，后面那句可以删，上同</span></span><br><span class="line">    ap.<span class="title function_">on</span>(<span class="string">&quot;play&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;aPlayerMusicPaused&quot;</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//ap.lrc.show()</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存音量</span></span><br><span class="line">    ap.<span class="property">audio</span>.<span class="property">onvolumechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;aPlayerMusicVolume&quot;</span>,ap.<span class="property">audio</span>.<span class="property">volume</span>);&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Index/Time/Mode 定时保存</span></span><br><span class="line">    <span class="keyword">var</span> saveTimeInterval = <span class="number">150</span>;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;aPlayerMusicIndex&quot;</span>,ap.<span class="property">list</span>.<span class="property">index</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;aPlayerMusicTime&quot;</span>,ap.<span class="property">audio</span>.<span class="property">currentTime</span>);</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;aPlayerMusicMode&quot;</span>,ap.<span class="property">mode</span>);</span><br><span class="line">    &#125;,saveTimeInterval);</span><br><span class="line">    <span class="comment">//#endregion 状态保存函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//#region 加载保存进度</span></span><br><span class="line">    <span class="comment">//自带播放暂停时显隐歌词，可以删</span></span><br><span class="line">    ap.<span class="property">lrc</span>.<span class="title function_">hide</span>();</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;aplayer-icon-menu&quot;</span>)[<span class="number">0</span>].<span class="title function_">click</span>()</span><br><span class="line">    <span class="comment">//Index</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;aPlayerMusicIndex&quot;</span>)!=<span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        aPlayerMusicIndex = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;aPlayerMusicIndex&quot;</span>);</span><br><span class="line">        ap.<span class="property">list</span>.<span class="title function_">switch</span>(aPlayerMusicIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Time</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;aPlayerMusicTime&quot;</span>) != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">musict</span> = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;aPlayerMusicTime&quot;</span>);</span><br><span class="line">        ap.<span class="title function_">setMode</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;aPlayerMusicMode&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;aPlayerMusicPaused&quot;</span>)==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ap.<span class="title function_">pause</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ap.<span class="title function_">play</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// setTimeout(function()&#123;</span></span><br><span class="line">        <span class="comment">//     ap.seek(window.musict); //seek炸了我很久，最后决定加个延时（本来要用canplay但是莫名鬼畜了）</span></span><br><span class="line">        <span class="comment">// &#125;,500);</span></span><br><span class="line">        <span class="keyword">var</span> g=<span class="literal">true</span>; <span class="comment">//加个变量以防鬼畜但是不知道怎么节流qwq</span></span><br><span class="line">        ap.<span class="title function_">on</span>(<span class="string">&quot;canplay&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(g)&#123;</span><br><span class="line">                ap.<span class="title function_">seek</span>(<span class="variable language_">window</span>.<span class="property">musict</span>);</span><br><span class="line">                g=<span class="literal">false</span>;<span class="comment">//如果不加oncanplay的话会seek失败就这原因炸很久</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;aPlayerMusicPaused&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        ap.<span class="title function_">setMode</span>(<span class="string">&quot;mini&quot;</span>); <span class="comment">//新版添加了保存展开状态功能</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Volume</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;aPlayerMusicVolume&quot;</span>) != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ap.<span class="property">audio</span>.<span class="property">volume</span>=<span class="title class_">Number</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;aPlayerMusicVolume&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//#endregion 加载保存进度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行逻辑</span></span><br><span class="line"><span class="title class_">InitAPlayerHolder</span>();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo开发</title>
    <url>/2025/03/03/Hexo/HexoDev/</url>
    <content><![CDATA[<h1 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h1><h2 id="Hexo开发去除缓存-重新刷新生成"><a href="#Hexo开发去除缓存-重新刷新生成" class="headerlink" title="Hexo开发去除缓存-重新刷新生成"></a>Hexo开发去除缓存-重新刷新生成</h2><h3 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h3><p>在开发一个 Hexo 插件，在开发的过程中，遇到了一些小的问题：插件的代码发生了修改，但运行hexo 的时候却没有实时刷新出来。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在对代码进行分析后发现，hexo 的 tag filter 的结果会缓存在数据库中，由于缓存了，所以我使用的 generator ，所以也会被缓存。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>在预览前，删除 db.json 即可让 hexo 重新开始生成</p>
<h2 id="网页缓存问题"><a href="#网页缓存问题" class="headerlink" title="网页缓存问题"></a>网页缓存问题</h2><p>F12打开开发者工具，网络部分，选择禁用缓存即可。</p>
<h1 id="创建带文件夹的文章用于图片处理"><a href="#创建带文件夹的文章用于图片处理" class="headerlink" title="创建带文件夹的文章用于图片处理"></a>创建带文件夹的文章用于图片处理</h1><p>直接命令行 hexo new newArticleName 就可以创建了</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Theme</title>
    <url>/2025/03/03/Hexo/HexoTheme/</url>
    <content><![CDATA[<h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><h2 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h2><p><a href="https://github.com/MaLuns/hexo-theme-async">GitHub</a>  </p>
<p><a href="https://hexo-theme-async.imalun.com/guide/">Introduction</a>  </p>
<h2 id="Butterfly"><a href="#Butterfly" class="headerlink" title="Butterfly"></a>Butterfly</h2><p><a href="https://butterfly.js.org/">Introduction</a>  </p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>RAGFlow</title>
    <url>/2025/03/14/AI/RAGFlow/</url>
    <content><![CDATA[<h1 id="使用RAGFlow处理大语言模型幻觉问题。"><a href="#使用RAGFlow处理大语言模型幻觉问题。" class="headerlink" title="使用RAGFlow处理大语言模型幻觉问题。"></a>使用RAGFlow处理大语言模型幻觉问题。</h1><p>大语言模型：基于Ollama部署。</p>
<p>重点优势：自动化的RAG工作流。</p>
<h2 id="Ollama模型部署和本地配置。"><a href="#Ollama模型部署和本地配置。" class="headerlink" title="Ollama模型部署和本地配置。"></a>Ollama模型部署和本地配置。</h2><p>略。简单且已完成。可以参考其他教程。</p>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>参考文档<br><a href="https://docs.docker.com/engine/install/">Install Docker Engine</a><br><a href="https://docs.docker.com/desktop/">Docker Desktop</a></p>
<p>注意了，使用不同底层性能是有差异的。可以看下面的介绍。还是用WSL2好点。</p>
<blockquote>
<p>碎碎念: 想要开发和涉及AI部分，还是少不了Linux。而不是在Windows平台去处理对应的逻辑。大部分AI训练的模型都是直接用Linux的,且很多依赖在Windows上都要单独去做处理，找对应的编译文件……<br>坑已踩。不过基于Docker去使用模型和直接在Windwos环境下使用模型又有多少性能损失，是一个值得考虑和研究的问题。</p>
</blockquote>
<h3 id="基于WSL的Docekr安装-Windwos部分"><a href="#基于WSL的Docekr安装-Windwos部分" class="headerlink" title="基于WSL的Docekr安装 - Windwos部分"></a>基于WSL的Docekr安装 - Windwos部分</h3><p>说明见WSL2 backend x86_64</p>
<p>Windows WSL(Windows Subsystem for Linux)<br>Windows文档说明 <a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">URL</a></p>
<p>如果安装较慢 进度为0，可以先执行下面步骤1，重启电脑，执行步骤3，重启电脑。<br><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install-manual#step-1---enable-the-windows-subsystem-for-linux">解决安装问题</a></p>
<p>注意Windows版本需求。<br>安装指令还是非常简单的。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Note：<br>The above command only works if WSL is not installed at all. If you run wsl –install and see the WSL help text, please try running wsl –list –online to see a list of available distros and run wsl –install -d <DistroName> to install a distro. To uninstall WSL, see Uninstall legacy version of WSL or unregister or uninstall a Linux distribution.</p>
</blockquote>
<h3 id="基于WSL的Docekr安装-Docker部分"><a href="#基于WSL的Docekr安装-Docker部分" class="headerlink" title="基于WSL的Docekr安装 - Docker部分"></a>基于WSL的Docekr安装 - Docker部分</h3><p>Docker文档说明 <a href="https://docs.docker.com/desktop/features/wsl/">URL</a><br>安装Docker的博客教程 <a href="https://blog.csdn.net/Natsuago/article/details/145588600">文章</a></p>
<h2 id="RAGFlow"><a href="#RAGFlow" class="headerlink" title="RAGFlow"></a>RAGFlow</h2><p>官方 <a href="https://github.com/infiniflow/ragflow">GitHub</a></p>
<h3 id="GitHub项目运行Docker"><a href="#GitHub项目运行Docker" class="headerlink" title="GitHub项目运行Docker"></a>GitHub项目运行Docker</h3><p>CheckOut下对应的GitSource文件,依据需求,进入Docker文件夹中，设置.env的RAGFLOW_IMAGE。<br>下载有问题的话尝试设置镜像源:<br><a href="https://blog.csdn.net/Lichen0196/article/details/137355517">参考文章</a><br><a href="https://blog.csdn.net/Lyon_Nee/article/details/124169099">Windwos参考文章</a><br><a href="https://blog.csdn.net/qq_62878146/article/details/144191062">镜像问题</a><br>ragFlow部分也要设置镜像：位于.env中：<br>RAGFLOW_IMAGE&#x3D;swr.cn-north-4.myhuaweicloud.com&#x2F;infiniflow&#x2F;ragflow:v0.17.0</p>
<h3 id="配置Ollama"><a href="#配置Ollama" class="headerlink" title="配置Ollama"></a>配置Ollama</h3><p>系统环境变量配置 OLLAMA_ORIGINS 为 *<br>以及OLLAMA_HOST为 0.0.0.0。<br>这里需要注意的一点是，OLLAMA_HOST配置为0.0.0.0 如果是公网IP 有相应风险。<br>如果不使用0.0.0.0 需要另外解决docker访问的问题。可以另寻方案。</p>
<p>CMD 中ip config找到虚拟机对应的地址<br>默认端口号为11434<br>http:&#x2F;&#x2F;虚拟机地址:11434</p>
<h3 id="Embedding模型"><a href="#Embedding模型" class="headerlink" title="Embedding模型:"></a>Embedding模型:</h3><p>.env中有介绍模型的相关内容。v0.17.0非slim版本默认会有zh-cn的embedding模型。但对于英文模型需要额外下载。这部分应该要做额外处理逻辑。<br>目前来看,使用nomic-embed-text-v1.5的可以较好的处理中英文需求。<br>DockerDestop中设置 - 资源 - 网络部分启用主机网络。<br>对应Docker中命令行设置相关镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装huggingface_hub库</span><br><span class="line">pip install -U huggingface_hub</span><br><span class="line"># 设置国内镜像</span><br><span class="line"># 建议将这一行写入 ~/.bashrc。若没有写入，则每次下载时都需要先输入该命令</span><br><span class="line">export HF_ENDPOINT=https://hf-mirror.com  </span><br></pre></td></tr></table></figure>

<h2 id="Docker介绍-DeepSeek生成"><a href="#Docker介绍-DeepSeek生成" class="headerlink" title="Docker介绍[DeepSeek生成]"></a>Docker介绍[DeepSeek生成]</h2><p>Docker 是一个开源的<strong>容器化平台</strong>，用于快速构建、打包、部署和运行应用程序。它通过容器技术将应用及其依赖环境（如代码、库、配置等）打包成一个轻量级、可移植的单元，从而实现<strong>一次构建，随处运行</strong>的目标。<br>以下是 Docker Desktop 在 <strong>Hyper-V 模式</strong> 和 <strong>WSL2 模式</strong> 下的优缺点对比，结合不同场景的实际需求分析：</p>
<h3 id="一、Hyper-V-模式"><a href="#一、Hyper-V-模式" class="headerlink" title="一、Hyper-V 模式"></a><strong>一、Hyper-V 模式</strong></h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h4><ol>
<li><p><strong>高隔离性</strong><br>• 基于完整的虚拟机（如 MobyLinuxVM）运行 Docker，与宿主机完全隔离，适合需要严格环境隔离的场景。<br>• 支持运行不同内核的操作系统（如旧版 Linux 发行版）。</p>
</li>
<li><p><strong>兼容性广</strong><br>• 适用于所有支持 Hyper-V 的 Windows 版本（如 Windows 10 专业版&#x2F;企业版）。</p>
</li>
<li><p><strong>独立资源分配</strong><br>• 可为虚拟机预先分配固定的 CPU 和内存资源，避免资源争用。</p>
</li>
</ol>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ol>
<li><p><strong>性能损失较大</strong><br>• 虚拟化层导致 CPU 和内存性能损失约 15%<del>25%，I&#x2F;O 密集型任务（如编译、文件读写）延迟显著。<br>• 文件系统交互需通过虚拟化层中转，挂载 Windows 目录时 I&#x2F;O 速度下降 30%</del>50%。</p>
</li>
<li><p><strong>资源占用高</strong><br>• 需独立运行完整的 Linux 虚拟机，内存占用较高（默认分配 2GB 以上）。</p>
</li>
<li><p><strong>启动速度慢</strong><br>• 冷启动 Docker 服务需 30 秒至 1 分钟，容器启动时间较长。</p>
</li>
</ol>
<hr>
<h3 id="二、WSL2-模式"><a href="#二、WSL2-模式" class="headerlink" title="二、WSL2 模式"></a><strong>二、WSL2 模式</strong></h3><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a><strong>优点</strong></h4><ol>
<li><p><strong>接近原生性能</strong><br>• 基于轻量级虚拟机运行完整 Linux 内核，CPU 和内存性能损失仅 5%~15%，接近原生 Linux。<br>• 文件系统优化：若将代码存储在 WSL2 的 Linux 分区内，I&#x2F;O 性能与原生 Linux 一致。</p>
</li>
<li><p><strong>动态资源管理</strong><br>• 自动按需分配 CPU 和内存资源，避免资源浪费（如默认动态分配内存）。</p>
</li>
<li><p><strong>开发友好</strong><br>• 支持与 VS Code 无缝集成（通过 Remote-WSL 插件），可直接编辑 Linux 文件。<br>• 支持 GPU 加速（如 CUDA、DirectML），适合机器学习等高性能任务。</p>
</li>
<li><p><strong>快速启动</strong><br>• Docker 服务冷启动时间缩短至 10 秒以内，容器启动仅需 1~2 秒。</p>
</li>
</ol>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a><strong>缺点</strong></h4><ol>
<li><p><strong>兼容性限制</strong><br>• 需 Windows 10 2004 或更高版本，且需启用 WSL2 功能。<br>• 不支持旧版 Linux 内核（依赖 Microsoft 提供的 Linux 内核版本）。</p>
</li>
<li><p><strong>文件系统交互问题</strong><br>• 直接挂载 Windows 目录（如 <code>/mnt/c</code>）时，文件读写性能较低（建议优先使用 WSL2 的 Linux 文件系统）。</p>
</li>
<li><p><strong>资源限制</strong><br>• 默认内存上限为 80% 宿主机内存，需手动调整 <code>.wslconfig</code> 文件以优化配置。</p>
</li>
</ol>
<hr>
<h3 id="三、场景推荐"><a href="#三、场景推荐" class="headerlink" title="三、场景推荐"></a><strong>三、场景推荐</strong></h3><table>
<thead>
<tr>
<th><strong>需求场景</strong></th>
<th><strong>推荐模式</strong></th>
<th><strong>理由</strong></th>
</tr>
</thead>
<tbody><tr>
<td>开发&#x2F;测试环境（高频启停容器）</td>
<td>WSL2</td>
<td>启动快、资源占用低，与 VS Code 集成流畅。</td>
</tr>
<tr>
<td>生产级隔离需求</td>
<td>Hyper-V</td>
<td>提供完整虚拟机隔离，避免宿主机干扰。</td>
</tr>
<tr>
<td>机器学习或 GPU 加速任务</td>
<td>WSL2</td>
<td>支持 GPU 直通和 CUDA 加速，性能接近原生。</td>
</tr>
<tr>
<td>跨平台兼容性测试</td>
<td>Hyper-V</td>
<td>可运行不同内核版本或非 Linux 系统（如 FreeBSD）。</td>
</tr>
<tr>
<td>文件密集型任务（如大数据处理）</td>
<td>WSL2</td>
<td>若数据存储在 Linux 分区内，I&#x2F;O 性能优于 Hyper-V。</td>
</tr>
</tbody></table>
<hr>
<h3 id="四、优化建议"><a href="#四、优化建议" class="headerlink" title="四、优化建议"></a><strong>四、优化建议</strong></h3><ol>
<li><p><strong>WSL2 配置优化</strong><br>• 修改 <code>.wslconfig</code> 文件，增加内存和 CPU 配额（如 <code>memory=8GB</code>）。<br>• 将代码和 Docker 数据卷存储在 WSL2 的 Linux 文件系统内（路径示例：<code>/home/user/project</code>）。</p>
</li>
<li><p><strong>Hyper-V 配置优化</strong><br>• 减少预分配内存（如从 4GB 降至 2GB），避免资源浪费。<br>• 使用 SSD 硬盘以缓解 I&#x2F;O 性能瓶颈。</p>
</li>
</ol>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>• <strong>WSL2 是大多数开发场景的首选</strong>，尤其在性能、资源利用率和开发工具集成方面表现优异。<br>• <strong>Hyper-V 更适合需要严格隔离或运行特殊内核的场景</strong>，但需接受更高的性能损失。<br>• 根据具体需求灵活选择，亦可同时启用两种模式（需切换 Docker Desktop 后端）。</p>
]]></content>
      <categories>
        <category>RAG</category>
      </categories>
      <tags>
        <tag>AI</tag>
        <tag>RAG</tag>
        <tag>RAGFlow</tag>
        <tag>Ollama</tag>
      </tags>
  </entry>
  <entry>
    <title>Git相关内容学习</title>
    <url>/2025/03/06/Other/GitLearning/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Git在版本维护上面还是能发挥很好的作用的。当然也可以考虑用TortoiseSVN。<br>主要目的还是维护好代码吧。这样有什么临时改动想回滚到之前版本也比较好处理。避免某些操作无法撤销而花很多精力去重新编写内容。</p>
<h1 id="基础Git指令"><a href="#基础Git指令" class="headerlink" title="基础Git指令"></a>基础Git指令</h1><p>有需要再补充。</p>
<h1 id="配置GitIgnore相关内容"><a href="#配置GitIgnore相关内容" class="headerlink" title="配置GitIgnore相关内容"></a>配置GitIgnore相关内容</h1><h2 id="基础说明"><a href="#基础说明" class="headerlink" title="基础说明"></a>基础说明</h2><p>在Git中，.gitignore文件用于指定项目中要忽略的文件和目录，这些文件和目录不会被跟踪和提交到远程仓库。编写.gitignore文件时，你可以使用一系列规则来匹配要忽略的文件和目录。</p>
<h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><h3 id="忽略特定文件："><a href="#忽略特定文件：" class="headerlink" title="忽略特定文件："></a>忽略特定文件：</h3><p>  filename.ext</p>
<h3 id="忽略特定目录："><a href="#忽略特定目录：" class="headerlink" title="忽略特定目录："></a>忽略特定目录：</h3><p>  directory&#x2F;</p>
<h3 id="忽略特定扩展名的所有文件："><a href="#忽略特定扩展名的所有文件：" class="headerlink" title="忽略特定扩展名的所有文件："></a>忽略特定扩展名的所有文件：</h3><p>  *.log</p>
<h3 id="忽略特定目录下的所有文件："><a href="#忽略特定目录下的所有文件：" class="headerlink" title="忽略特定目录下的所有文件："></a>忽略特定目录下的所有文件：</h3><p>  directory&#x2F;*</p>
<h3 id="忽略特定目录及其所有子目录："><a href="#忽略特定目录及其所有子目录：" class="headerlink" title="忽略特定目录及其所有子目录："></a>忽略特定目录及其所有子目录：</h3><p>  directory&#x2F;**</p>
<h2 id="高级规则"><a href="#高级规则" class="headerlink" title="高级规则"></a>高级规则</h2><h3 id="忽略特定模式的文件："><a href="#忽略特定模式的文件：" class="headerlink" title="忽略特定模式的文件："></a>忽略特定模式的文件：</h3><p>  file[0-9].txt</p>
<h3 id="忽略特定模式的目录："><a href="#忽略特定模式的目录：" class="headerlink" title="忽略特定模式的目录："></a>忽略特定模式的目录：</h3><p>  dir*&#x2F;subdir&#x2F;</p>
<h3 id="忽略特定目录下的特定文件："><a href="#忽略特定目录下的特定文件：" class="headerlink" title="忽略特定目录下的特定文件："></a>忽略特定目录下的特定文件：</h3><p>  directory&#x2F;filename.ext</p>
<h3 id="忽略特定目录下的所有文件，但不包括子目录："><a href="#忽略特定目录下的所有文件，但不包括子目录：" class="headerlink" title="忽略特定目录下的所有文件，但不包括子目录："></a>忽略特定目录下的所有文件，但不包括子目录：</h3><p>  directory&#x2F;<em>.</em></p>
<h3 id="忽略特定目录下的所有文件，但包括子目录中的某些文件："><a href="#忽略特定目录下的所有文件，但包括子目录中的某些文件：" class="headerlink" title="忽略特定目录下的所有文件，但包括子目录中的某些文件："></a>忽略特定目录下的所有文件，但包括子目录中的某些文件：</h3><p>  directory&#x2F;*<br>  !directory&#x2F;subdir&#x2F;important.file</p>
<h2 id="特殊规则"><a href="#特殊规则" class="headerlink" title="特殊规则"></a>特殊规则</h2><h3 id="忽略隐藏文件"><a href="#忽略隐藏文件" class="headerlink" title="忽略隐藏文件"></a>忽略隐藏文件</h3><p>  以.开头的文件：.*</p>
<h3 id="忽略空目录"><a href="#忽略空目录" class="headerlink" title="忽略空目录"></a>忽略空目录</h3><p>  Git默认不跟踪空目录，但可以通过创建一个空的.gitkeep文件来跟踪：<br>  忽略所有空目录<br>  *&#x2F;<br>  但跟踪特定空目录<br>  !important_dir&#x2F;</p>
<h3 id="全局忽略文件"><a href="#全局忽略文件" class="headerlink" title="全局忽略文件"></a>全局忽略文件</h3><p>  在全局配置中设置，适用于所有项目：<br>  git config –global core.excludesfile ~&#x2F;.gitignore_global</p>
<h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><h3 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h3><p>  Git会按照.gitignore文件中的顺序匹配规则，后面的规则可能会覆盖前面的规则。</p>
<h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>  规则是相对于.gitignore文件所在目录的。</p>
<h3 id="全局忽略文件-1"><a href="#全局忽略文件-1" class="headerlink" title="全局忽略文件"></a>全局忽略文件</h3><p>  如果你有一些文件或目录在所有项目中都需要忽略，可以考虑使用全局忽略文件。</p>
<p>通过合理编写.gitignore文件，可以有效地管理项目中的不必要文件，保持仓库的整洁。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下的Git账号更换</title>
    <url>/2025/03/04/Other/windows-change-git/</url>
    <content><![CDATA[<h3 id="Hexo更换指定Git账号问题"><a href="#Hexo更换指定Git账号问题" class="headerlink" title="Hexo更换指定Git账号问题"></a>Hexo更换指定Git账号问题</h3><ul>
<li><p>Git内设置对应的账号和密码</p>
</li>
<li><p>控制面板 - 用户 - 凭据管理器 - Windows凭据删除对应git的凭据 在使用时重新通过网页处理凭据 </p>
</li>
<li><p>使用新账号登陆即可</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>旋转与四元数</title>
    <url>/2025/05/08/Other/RotationAndQuaternion/</url>
    <content><![CDATA[<h1 id="旋转与四元数"><a href="#旋转与四元数" class="headerlink" title="旋转与四元数"></a>旋转与四元数</h1><h2 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h2><p>三维空间中的向量可以基于一组基向量来进行表示。<br>我们可以基于一组基向量来表示另外一组基向量。<br>由此我们可以进行空间转换。</p>
<img src="/2025/05/08/Other/RotationAndQuaternion/image.png" class="" title="alt text">
<p>换言之 有以下操作：</p>
<img src="/2025/05/08/Other/RotationAndQuaternion/image-1.png" class="" title="alt text">
<p>因此，在计算某个向量(全局)在某个对象局部坐标系下的值，<br>可以用该对象的Transform去计算逆矩阵，再对该向量进行左乘操作，从而得到局部空间向量。</p>
<h2 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h2><h3 id="万向锁问题"><a href="#万向锁问题" class="headerlink" title="万向锁问题"></a>万向锁问题</h3><p>基于欧拉角的旋转存在万向锁问题。<br>比如将Rotation的X设置为90度，此时对Y和Z的操作是相同的。<br>具体的可以网上去看看对应的文章，或者游戏引擎中试试。</p>
<h3 id="四元数乘法"><a href="#四元数乘法" class="headerlink" title="四元数乘法"></a>四元数乘法</h3><p>使用四元数可以避免万向锁的问题。</p>
<p>一些前置的思维：<br>欧拉公式: </p>
<img src="/2025/05/08/Other/RotationAndQuaternion/image-2.png" class="" title="alt text">

<p>对于四元数乘法也是一样的，如果绕某个向量v旋转w，则可以左乘该四元数。</p>
<p>详细了解需要知道四维超球的概念。<br>而在旋转这块，我们只需要单位四维超球即可。</p>
<p>对于四元数p,左乘四元数q (w,v)即qp，其代表着绕v方向，右手法则，旋转一定角度(记为θ)，同时，沿着v方向”旋转”θ。</p>
<p>而对于给定向量v1，旋转θ度，我们可以构建四元数q,使得qw &#x3D; cos(θ&#x2F;2) qV &#x3D; sin(θ&#x2F;2)v1<br>这个时候，对点p，旋转后的 p’ &#x3D; qp(q-1)。</p>
<img src="/2025/05/08/Other/RotationAndQuaternion/image-3.png" class="" title="alt text">]]></content>
      <categories>
        <category>计算机图形学</category>
      </categories>
      <tags>
        <tag>计算机图形学</tag>
        <tag>四元数</tag>
        <tag>Quaternion</tag>
        <tag>旋转</tag>
      </tags>
  </entry>
  <entry>
    <title>UE蓝图笔记</title>
    <url>/2025/04/06/UE/Engine/UEBlueprintNote/</url>
    <content><![CDATA[<h1 id="蓝图断点与流程显示"><a href="#蓝图断点与流程显示" class="headerlink" title="蓝图断点与流程显示"></a>蓝图断点与流程显示</h1><p>断点的话，右键对应的节点添加断点即可。</p>
<p>运行时打开对应的蓝图，并在编辑器中选中对应的对象，可以观看其运行流程。</p>
<img src="/2025/04/06/UE/Engine/UEBlueprintNote/image.png" class="" title="alt text">
]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>Blueprint</tag>
      </tags>
  </entry>
  <entry>
    <title>UE-Module</title>
    <url>/2025/04/13/UE/Engine/UEModule/</url>
    <content><![CDATA[<h1 id="虚幻引擎模块-Module-Doc"><a href="#虚幻引擎模块-Module-Doc" class="headerlink" title="虚幻引擎模块[Module] - Doc"></a>虚幻引擎模块[Module] - Doc</h1><p><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/unreal-engine-modules">官方参考文章地址</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>模块（Modules）是 虚幻引擎（UE）的软件架构的基本构建块。它们在独立的代码单元中封装了具体的编辑器工具、运行时功能、库或其他功能。</p>
<h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><p>使用模块整理项目可带来以下好处：</p>
<ul>
<li><p>模块会强制实施良好的代码分离，可用于封装功能并隐藏代码的内部成分。</p>
</li>
<li><p>模块编译为单独的编译单元。这意味着，只有已更改的模块才需要编译，较大项目的编译时间会显著缩短。</p>
</li>
<li><p>模块在依赖性图表中链接在一起，并且仅允许实际使用的代码包含头文件，以符合Include What You Use (IWYU)标准。这意味着，你的项目中未使用的模块将安全地排除在编译之外。</p>
</li>
<li><p>你可以控制在运行时何时加载和卸载具体的模块。这样一来，可以管理哪些系统可用并激活，从而优化项目的性能。</p>
</li>
<li><p>你可以基于特定条件（例如，项目是为哪个平台编译的），在你的项目中纳入或排除模块。</p>
</li>
</ul>
<p>总结起来，如果你遵守模块的最佳实践，相较于将项目代码全部放在一个模块中而言，你的项目代码会更加井然有序，能更高效地编译，并且可复用程度更高。</p>
<h1 id="模块API"><a href="#模块API" class="headerlink" title="模块API"></a>模块API</h1><p>主要参考以下文章进行总结<br><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/module-api-specifiers-in-unreal-engine">官方文章</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/671652937">知乎文章 - 虚幻引擎类和函数等前的 XXX_API 的作用和原理研究</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/698099444">知乎文章 - UEC++编译链接LinkError问题解决汇总</a></p>
<h2 id="简述和注意点"><a href="#简述和注意点" class="headerlink" title="简述和注意点:"></a>简述和注意点:</h2><h3 id="基础定义"><a href="#基础定义" class="headerlink" title="基础定义"></a>基础定义</h3><p>模块等前定义的 XXX_API 的一个主要作用为为对应的模块等启用 dllexport 等扩展特性语法。（XXX模块对应的模块宏就为XXX_API）</p>
<p>这个表示把整个类全部公开给其它的模组提供调用，如果不加上这个API宏、那也会出现Link Error。因为没暴露地址的模组就算在Build.cs加上了模组名，也依然是无法在C++的编译链接阶段查找地址失败从而导致编译错误。</p>
<p>如果是工具类本身就想整个对外提供调用，那放在class后面加上模组API宏也是没问题。但是对于大部分我们自己写的游戏逻辑，把整个class宏公布出去会导致整个类都被编译器捕获，当该模组被其他模组所引用的时候，这整个类都会被重新编译，导致了编译时间变长。这本质上对运行时间是没影响，但项目大起来，难免会多出很多无谓的编译时间。所以这个时候我们可以考虑不在class后面加上宏API，而仅仅只在想被外部模组调用的类方法加上宏，也是可以实现链接成功。</p>
<h3 id="蓝图调用特殊逻辑"><a href="#蓝图调用特殊逻辑" class="headerlink" title="蓝图调用特殊逻辑"></a>蓝图调用特殊逻辑</h3><p>因为有了宏API的设定，就有了一些只有蓝图可以做，但C++不可以做的事情。比如说原生的UE5插件AnimToTexture，里面的Editor类，就只能够用蓝图调用，而不允许被其它模组的C++调用的。因为这些类并没有对外声明模组API宏，导致了里面的类只能被模组本身访问，但不能被其它C++访问。但由于又声名了BlueprintCallable，所以能被蓝图调用。所以这种情况下，只能说是开发者有意为之的事情。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>这里以GAS相关的逻辑代码作为示例：<br>首先看到有对应API声明的：</p>
<img src="/2025/04/13/UE/Engine/UEModule/image.png" class="" title="alt text">
<img src="/2025/04/13/UE/Engine/UEModule/image2.png" class="" title="alt text">
<p>因此，自定义子类去继承和处理对应的逻辑是没有问题的。<br>但如果要改写部分函数，比如处理GCN_Looping,直接用内部变量编译就会失败。如对下面的Struct进行引用：</p>
<img src="/2025/04/13/UE/Engine/UEModule/image3.png" class="" title="alt text">
<p>该struct属于GAS模块，但是没有声明API，因此自定义类（不属于该模块的），用到时就会报错。</p>
<h2 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a>内部实现</h2><p>如果要深入研究，还是要去看UHT的具体逻辑。</p>
<h3 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3><p>dllexport 、dllimport<br>dllexport 和 dllimport 存储类特性是 C 和 C++ 语言的 Microsoft 专用扩展。 可以使用它们从 DLL 中导出或向其中导入函数、数据和对象。<br>使用 dllexport 意味着定义，而使用 dllimport 则意味着声明。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>dllexport 、dllimport 的作用为，让指定的类、属性或函数对外可见或对当前模块可见，需要与 __declspec 配合使用，皆为 C++ 语法特性。<br>在虚幻引擎中，为了提高代码的可读性、编码方便性以及兼容平台差异性，对其做了进一步封装，即为 DLLEXPORT 和 DLLIMPORT ，之后通过编译系统进一步封装到 XXX_API 等宏中，自动完成。</p>
]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>Module</tag>
      </tags>
  </entry>
  <entry>
    <title>UE Input输入</title>
    <url>/2025/03/15/UE/Engine/UE_Input/</url>
    <content><![CDATA[<p><a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/enhanced-input-in-unreal-engine#%E8%BE%93%E5%85%A5%E4%BF%AE%E9%A5%B0%E5%99%A8">官方文章Doc</a></p>
<h1 id="基础输入-Actor-Input"><a href="#基础输入-Actor-Input" class="headerlink" title="基础输入 [Actor Input]"></a>基础输入 [Actor Input]</h1><p>Acotr Input<br>响应玩家输入</p>
<p>启用ActorInput</p>
<ul>
<li>将PlayerController与对应的Actor绑定在一起 启用输入</li>
<li>配套的禁用输入 Disable Input</li>
</ul>
<p>使用事件来启用&#x2F;禁用输入</p>
<ul>
<li>CollisionComp的Overlap</li>
</ul>
<p>此外 输入是有优先级以及“消耗”这一说法的。 [见Consume Input]</p>
<h1 id="增强输入-Enhanced-Input"><a href="#增强输入-Enhanced-Input" class="headerlink" title="增强输入 [Enhanced Input]"></a>增强输入 [Enhanced Input]</h1><p>键输入的重新映射</p>
<p>概念：</p>
<ul>
<li>输入动作 Input Actions</li>
<li>输入映射上下文 Input Mapping Context</li>
<li>输入修饰器 Input Modifers</li>
<li>输入触发器 Input Tiggers</li>
</ul>
<h2 id="输入动作"><a href="#输入动作" class="headerlink" title="输入动作"></a>输入动作</h2><p>输入动作在概念上相当于 操作（Action） 和 轴（Axis） 映射名称，但它们是数据资产。</p>
<p>每个输入动作应该表示用户可以执行的某件事，例如”蹲伏”或”发射武器”。</p>
<p>你可以在蓝图或C++中添加 输入侦听器（Input Listeners） ，侦听输入动作的状态何时发生变化。</p>
<p>输入动作可以是多种不同的类型，这些类型将确定行为。</p>
<p>可以创建简单的布尔动作或更复杂的3D轴。动作类型将确定值。布尔动作采用简单的布尔值， Axis1D为浮点值， Axis2D为FVector2D， Axis3D 为整个Fvector。</p>
<p>布尔动作用于状态为开或关的输入。这相当于旧版输入系统中的较旧动作映射。<br>对于游戏手柄控制杆值等控制点，你可以使用2D轴动作来保存控制杆位置的X和Y值。<br>你可以使用3D轴保存更复杂的数据，例如运动控制器信息。</p>
<p>示例 IA_Move</p>
<h3 id="触发状态"><a href="#触发状态" class="headerlink" title="触发状态"></a>触发状态</h3><p>触发状态（Trigger State） 表示动作的当前状态。<br>通常，使用”已触发”状态。你可以绑定到C++和蓝图中的特定状态。</p>
<ul>
<li>已触发（Triggered）： 动作已触发。这意味着它完成了所有触发器要求的求值。例如，”按下并松开”触发器会在用户松开按键时发送。</li>
<li>已开始（Started）： 发生了开始触发器求值的某个事件。例如，”双击”触发器的第一次按键将调用一次”已开始”状态。</li>
<li>进行中（Ongoing）： 触发器仍在进行处理。例如，当用户按下按钮时，在达到指定持续时间之前，”按住”动作处于进行中状态。根据触发器，此事件将在收到输入值之后在对动作求值时，每次更新触发一次。</li>
<li>已完成（Completed）： 触发器求值过程已完成。</li>
<li>已取消（Canceled）： 触发已取消。例如，在”按住”动作还没触发之前，用户就松开了按钮。</li>
</ul>
<h3 id="输入侦听器"><a href="#输入侦听器" class="headerlink" title="输入侦听器"></a>输入侦听器</h3><p>如题所述，用于侦听对应的事件。</p>
<h2 id="输入映射上下文"><a href="#输入映射上下文" class="headerlink" title="输入映射上下文"></a>输入映射上下文</h2><p>主要还是起一个Mapping的作用</p>
<p>输入动作的集合，表示玩家可以处于的特定上下文。它们描述了给定输入动作的触发规则。映射上下文可以动态地为每个用户添加、移除或安排优先次序。<br>Input Action 以及 用户出发InputAction的方式。如键、按钮、动作轴等。</p>
<p>键下有对应的Triggers和Modifers。为各个用户输入的输入触发器和输入修饰器列表，可用于确定如何筛选或处理输入的原始值，以及它必须满足哪些限制才能驱动顶层的输入动作。</p>
<p>通过本地玩家的增强输入本地玩家子系统（Enhanced Input Local Player Subsystem）将一个或多个上下文应用到本地玩家，并安排它们的优先次序，避免多个操作由于尝试使用同一输入而发生冲突。</p>
<p>将实际的键与输入动作[InputAction]绑定，并为每个动作指定额外触发器或修饰器。将输入映射上下文添加到增强输入子系统时，你还可以指定其优先级。如果你有多个上下文映射到同一个输入动作，那么在触发输入动作时，将考虑优先级最高的上下文，而忽略其他上下文。</p>
<p>例如，你可以为一个可以游泳、行走、驾驶载具的角色提供多个输入映射上下文。一个用于通用动作（始终可用且始终映射到相同用户输入），其他分别用于各类移动模式。</p>
<p>开发人员随后可以将与载具相关的输入动作放入单独的输入映射上下文中，这些操作将在本地玩家进入载具时添加到玩家，并在退出载具时从本地玩家中移除。[使用多个输入映射上下文]</p>
<p>这样做有助于确保不合适的输入动作无法运行，从而优化并预防漏洞。此外，使用互斥的输入映射上下文还有助于避免输入冲突，因此当某个用户输入被用于不同的输入动作时，该输入绝不会意外触发错误的操作。</p>
<h2 id="输入修饰器"><a href="#输入修饰器" class="headerlink" title="输入修饰器"></a>输入修饰器</h2><p>InputModifiers<br>预处理器。</p>
<p>增强输入插件随附多种输入修饰器，可以执行各种任务，例如更改轴顺序、实现”死区”、将轴输入转换为世界空间。</p>
<p>很适合用于应用灵敏度设置，在多个帧上平滑输入，或基于玩家状态更改输入的行为。</p>
<p>比如可以实现反向操作的效果。<br>详细见Modify Raw函数。</p>
<h3 id="方向输入"><a href="#方向输入" class="headerlink" title="方向输入"></a>方向输入</h3><p>手柄 - 摇杆<br>键盘 - 由一维(键盘WASD输入)转为二维：</p>
<ul>
<li>默认情况下 单键为一维度 可以认为是X轴，值为0或1.0</li>
<li>使用Swizzle Input Axis Values 将其改为Y轴（适用于W与D键）</li>
<li>使用Negate负值来实现反方向</li>
</ul>
<p>不过这里有一点还是值得思考的：键盘单键输入就是0&#x2F;1.0 和摇杆还不太一样。</p>
<p>按鸣潮的做法，键鼠时，用ctrl来控制慢走&#x2F;快走，而摇杆就可以“轻推”。</p>
<h2 id="输入触发器"><a href="#输入触发器" class="headerlink" title="输入触发器"></a>输入触发器</h2><p>用于确定用户输入在经过一系列可选输入修饰器的处理后，是否会激活输入映射上下文中的相应输入动作。</p>
<p>大部分输入触发器都会分析输入本身，检查最小动作值并验证各种模式。</p>
<p>例如短暂点击、长时间按住或典型的”按下”或”释放”事件。</p>
<p>此规则的一个例外是”同时按键”输入触发器，该触发器仅通过另一个输入动作触发。</p>
<p>默认情况下，任意用户输入活动都会在每次更新时触发一次。</p>
<p>输入触发器有三种类型：</p>
<ul>
<li>显式（Explicit） 类型:将使输入在输入触发器成功时成功。</li>
<li>隐式（Implicit） 类型:将使输入仅在输入触发器和所有其他隐式类型输入触发器都成功时成功。</li>
<li>阻碍（Blocker） 类型：将使输入在输入触发器成功时失败。</li>
</ul>
<p>处理用户输入后，输入触发器可能返回以下三种状态之一：</p>
<ul>
<li>无（None） :表明未满足输入触发器的条件，因此输入触发器失败。</li>
<li>持续（Ongoing） :表明部分满足了输入触发器的条件，并且输入触发器正在处理，但尚未成功。</li>
<li>已触发（Triggered） :表明已满足输入触发器的所有条件，因此输入触发器成功。</li>
</ul>
<p>长按示例:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Input Trigger Timed Base 会检查输入是否已被按住一段时间，如是，则接受该输入并返回 持续（Ongoing） 状态。</span></span><br><span class="line"><span class="comment">插件提供的&quot;Input Trigger Timed Base&quot;类永远不会返回 已触发（Triggered） 状态。你要在新建的输入触发器子类中重载该函数，来确定它如何响应用户输入。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">**UInputTriggerHold.h**</span><br><span class="line"></span><br><span class="line"><span class="comment">/** UInputTriggerHold</span></span><br><span class="line"><span class="comment">    触发器会在输入保持激活状态达到HoldTimeThreshold秒之后触发。</span></span><br><span class="line"><span class="comment">    触发器可以选择触发一次或反复触发。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">UCLASS</span>(NotBlueprintable, MinimalAPI, meta = (DisplayName = <span class="string">&quot;Hold&quot;</span>))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UInputTriggerHold</span> <span class="keyword">final</span> : <span class="keyword">public</span> UInputTriggerTimedBase</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> bTriggered = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ETriggerState <span class="title">UpdateState_Implementation</span><span class="params">(<span class="type">const</span> UEnhancedPlayerInput* PlayerInput, FInputActionValue ModifiedValue, <span class="type">float</span> DeltaTime)</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ETriggerEventsSupported <span class="title">GetSupportedTriggerEvents</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> ETriggerEventsSupported::Ongoing; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入要保持多久才能导致触发？</span></span><br><span class="line">    <span class="built_in">UPROPERTY</span>(EditAnywhere, Config, BlueprintReadWrite, Category = <span class="string">&quot;Trigger Settings&quot;</span>, meta = (ClampMin = <span class="string">&quot;0&quot;</span>))</span><br><span class="line">    <span class="type">float</span> HoldTimeThreshold = <span class="number">1.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此触发器应该仅触发一次，还是在满足保持时间阈值之后每帧触发？</span></span><br><span class="line">    <span class="built_in">UPROPERTY</span>(EditAnywhere, Config, BlueprintReadWrite, Category = <span class="string">&quot;Trigger Settings&quot;</span>)</span><br><span class="line">    <span class="type">bool</span> bIsOneShot = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> FString <span class="title">GetDebugState</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> HeldDuration ? FString::<span class="built_in">Printf</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Hold:%.2f/%.2f&quot;</span>), HeldDuration, HoldTimeThreshold) : <span class="built_in">FString</span>(); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> ~~~</span><br><span class="line">**UInputTriggerHold.<span class="function">cpp**</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">ETriggerState <span class="title">UInputTriggerHold::UpdateState_Implementation</span><span class="params">(<span class="type">const</span> UEnhancedPlayerInput* PlayerInput, FInputActionValue ModifiedValue, <span class="type">float</span> DeltaTime)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="comment">// 更新HeldDuration并派生基础状态 </span></span><br><span class="line">    ETriggerState State = Super::<span class="built_in">UpdateState_Implementation</span>(PlayerInput, ModifiedValue, DeltaTime);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在HeldDuration达到阈值时触发 </span></span><br><span class="line">    <span class="type">bool</span> bIsFirstTrigger = !bTriggered; </span><br><span class="line">    bTriggered = HeldDuration &gt;= HoldTimeThreshold; </span><br><span class="line">    <span class="keyword">if</span> (bTriggered) </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">return</span> (bIsFirstTrigger || !bIsOneShot) ? ETriggerState::Triggered : ETriggerState::None; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> State; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="平台设置"><a href="#平台设置" class="headerlink" title="平台设置"></a>平台设置</h2><p>映射上下文重定向（Mapping Context Redirect）。<br>默认情况下，它包含输入映射上下文的映射，允许你将一个上下文重定向到另一个上下文。<br>要应用此重定向，请将其添加到你的 项目设置（Project Settings） &gt; 增强输入（Enhanced Input） &gt; 平台设置（Platform Settings） &gt; 输入数据（Input Data）。</p>
<h2 id="其他课题与思考"><a href="#其他课题与思考" class="headerlink" title="其他课题与思考"></a>其他课题与思考</h2><p>常见的一个游戏功能就是玩家按键自定义。<br>这一块应该通过输入映射上下文就可以实现了。<br>这块再做一个本地保存应该就好。</p>
]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>UE基础功能</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.5-GAS-ReadMe</title>
    <url>/2025/03/04/UE/GAS/UE55GAS/</url>
    <content><![CDATA[<!-- - <meting-js id="13344900252" server="netease" type="playlist" type="playlist" mutex="true" preload="auto" theme="var(--anzhiyu-main)" order="list"></meting-js>   -->

<h3 id="GAS"><a href="#GAS" class="headerlink" title="GAS"></a>GAS</h3><h1 id="Purpose-of-this-Documentation"><a href="#Purpose-of-this-Documentation" class="headerlink" title="Purpose of this Documentation"></a>Purpose of this Documentation</h1><p>This documentation is meant to support and enhance the <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/gameplay-ability-system-for-unreal-engine">official Gameplay Ability System Unreal Developer Community documentation</a>.  In particular, this document lives in the code repository under <a href="./">Gameplay Ability System plug-in folder</a> and thus any user reading this documentation can submit a pull request to clarify functionality, update inaccurate information, or work with the community to flesh out areas that are missing.</p>
<p>It is worth noting there are extensive resources that the wider end-user developer community has written.  One such source of knowledge is the <a href="https://github.com/tranek/GASDocumentation">tranek GAS documentation</a> which is highly detailed and an excellent resource for implementation details, but risks falling out of date with new feature additions or changes.</p>
<h1 id="Overview-of-the-Gameplay-Ability-System"><a href="#Overview-of-the-Gameplay-Ability-System" class="headerlink" title="Overview of the Gameplay Ability System"></a>Overview of the Gameplay Ability System</h1><p>The Gameplay Ability System is a framework for building abilities and interactions that Actors can own and trigger. This system is designed mainly for RPGs, action-adventure games, MOBAs, and other types of games where characters have abilities that need to coordinate mechanics, visual effects, animations, sounds, and data-driven elements, although it can be adapted to a wide variety of projects. The Gameplay Ability System also supports replication for multiplayer games, and can save developers a lot of time scaling up their designs to support multiplayer.</p>
<p>The concepts that the Gameplay Ability System uses are:</p>
<ul>
<li><a href="#gameplay-attributes">Gameplay Attributes</a>:  An enhancement to float properties that allow them to be temporarily modified (buffed) and used in complex calculations such as damage.</li>
<li><a href="#gameplay-tags">Gameplay Tags</a>:  A hierarchical naming system that allows you to specify states of Actors, and properties of Assets.  A powerful query system allows designers to craft logic statements around these.</li>
<li><a href="#gameplay-cues">Gameplay Cues</a>:  A visual and audio effects system based on Gameplay Tags which allow decoupling of the FX and the implementation.</li>
<li><a href="#gameplay-abilities">Gameplay Abilities</a>:  The code that actually triggers when an action is performed.  Typically a Blueprint graph.</li>
<li><a href="#gameplay-effects">Gameplay Effects</a>:  Predefined rulesets about how to apply all of the above.</li>
</ul>
<p>One of the designers’ often mentioned goals of the Gameplay Ability System is to maintain a record of who triggered a complex set of interactions, so that we can keep proper account of which Actor did what.  For instance, if a Player activates a <a href="#gameplay-abilities">Gameplay Ability</a> that spawns a poison cloud (possibly represented with a <a href="#gameplay-cue">Gameplay Cue</a>) that then does damage-over-time using a <a href="#gameplay-effects">Gameplay Effect</a> which eventually reduces an Actor’s Health <a href="#gameplay-attributes">Gameplay Attribute</a> to zero, we should be able to award the kill to the initiating Player.</p>
<p>It is worth mentioning the damage system upfront, as it’s a pervasive example throughout the documentation.  You may be familiar with the <a href="https://www.unrealengine.com/blog/damage-in-ue4">AActor::TakeDamage function</a> which was used for many years.  At Epic, we no longer use that system internally; instead all damage is done through the Gameplay Ability System.  By using the Gameplay Ability System, we allow buffs&#x2F;debuffs and an extensive and ever-changing list of damage types based on Gameplay Tags.  You can look at <a href="https://dev.epicgames.com/documentation/unreal-engine/lyra-sample-game-in-unreal-engine">Lyra</a> as an example that uses the Gameplay Ability System extensively, as well as a rudimentary damage system.</p>
<hr>
<h1 id="Ability-System-Component-asc"><a href="#Ability-System-Component-asc" class="headerlink" title="Ability System Component asc}"></a>Ability System Component {#asc}</h1><p>The Ability System Component (commonly abbreviated ASC) is the top-level ActorComponent that you use to interface with the Gameplay Ability System (commonly abbreviated GAS).  It is a monolithic class that encapsulates almost all of the functionality GAS uses.  By funneling all of the functionality through the ASC, we are able to better encapsulate and enforce the rules about activation, replication, prediction, and side-effects.</p>
<p>While the Ability System Component <em>is</em> an ActorComponent, we typically recommend against putting it on a Player’s Pawn.  Instead, for a Player, it should be on the PlayerState.  The reason for this is that the Pawn is typically destroyed upon death in multiplayer games, and GAS typically has functionality (be it <a href="#gameplay-attributes">Gameplay Attributes</a>, <a href="#gameplay-tags">Gameplay Tags</a>, or <a href="#gameplay-abilities">Gameplay Abilities</a>) that should persist beyond death.  For non-player AI-driven characters (e.g. AI that are not bots), it is suitable to put the ASC on the Pawn because it needs to replicate data to <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/actor-role-and-remote-role-in-unreal-engine#actorrolestates">Simulated Proxies</a>.</p>
<hr>
<h1 id="Gameplay-Attributes-gameplay-attributes"><a href="#Gameplay-Attributes-gameplay-attributes" class="headerlink" title="Gameplay Attributes gameplay-attributes}"></a>Gameplay Attributes {#gameplay-attributes}</h1><p>Gameplay Attributes (often just referred to as simply <em>Attributes</em>) are essentially <em>float</em> properties that are wrapped in a FGameplayAttributeData instance.  The reason for doing so is to allow for a <em>BaseValue</em> which one can think of as an unaltered intrinsic value of the Actor, and a <em>CurrentValue</em> which one can think of as the value that currently applies, after all of the buffs and debuffs of the Actor are taken into account.  These <em>Attributes</em> must live in an <a href="#attribute-sets">AttributeSet</a>.  There is Editor tooling around the use of <em>Attributes</em> that allow them to be selected and used inside <a href="#gameplay-effects">Gameplay Effects</a> (and others) to ensure buffs and debuffs work correctly.</p>
<p>Attributes are often replicated, thus keeping the client in sync with the server values, but that does not <em>always</em> need to be the case.  For instance, certain <em>meta-Attributes</em> can be used to store temporary data used for calculations, allowing these intermediate results to have full buff&#x2F;debuff aggregation capabilities; these <em>meta-Attributes</em> are not replicated because they are typically reset after a calculation.</p>
<p>Since Gameplay Attributes are easily accessible through native or Blueprint code, it’s tempting to modify them directly.  However, the Gameplay Ability System is designed such that all modifications to the Attributes should be done through <a href="#gameplay-effects">Gameplay Effects</a> to ensure they can be network predicted and rolled-back gracefully.</p>
<p><a href="https://dev.epicgames.com/documentation/unreal-engine/gameplay-attributes-and-attribute-sets-for-the-gameplay-ability-system-in-unreal-engine">Developer Community Gameplay Attribute &amp; AttributeSet Docs</a></p>
<h2 id="AttributeSets-attribute-sets"><a href="#AttributeSets-attribute-sets" class="headerlink" title="AttributeSets attribute-sets}"></a>AttributeSets {#attribute-sets}</h2><p>AttributeSets are simply classes derived from <a href="./Source/GameplayAbilities/Public/AttributeSet.h">UAttributeSet class</a>.  The AttributeSets typically contain multiple Gameplay Attributes that encompass all properties for a specific game feature (such as a jetpack item, but the most commonly cited example is the damage system).  AttributeSets must be added to the <a href="#asc">Ability System Component</a> by the server.  AttributeSets are typically replicated to the client, but not all Attributes are replicated to the client (they are configured on a per-Attribute basis).</p>
<h2 id="Attribute-Modifiers-attribute-modifiers"><a href="#Attribute-Modifiers-attribute-modifiers" class="headerlink" title="Attribute Modifiers attribute-modifiers}"></a>Attribute Modifiers {#attribute-modifiers}</h2><p>Attribute Modifiers are how we buff and debuff Attributes.  These are setup through the <a href="#gameplay-effects">Gameplay Effects’</a> <code>Modifiers</code> property.  Once a modifier is ‘active’, it is stored in the <a href="#asc">Ability System Component</a> and all requests for the value go through a process called <em>aggregation</em>.</p>
<p>The rules for <em>aggregation</em> can be unexpected to a new user.  For instance, if there are multiple values that modify a single attribute, the modifiers are added together before the result is computed.  Let’s take an example of a multiplier of 10% added to damage, and another multiplier of 30% added to damage.  If one were purely looking at the numbers, one could think <code>Damage * 1.1 * 1.3 = 1.43</code> thus damage would be modified by <em>43%</em>.  However, the system takes these modifier operators into account and adds them separately before performing the final multiplier calculation, giving an expected result of <code>10% + 30% = 40%</code>.</p>
<hr>
<h1 id="Gameplay-Abilities-gameplay-abilities"><a href="#Gameplay-Abilities-gameplay-abilities" class="headerlink" title="Gameplay Abilities gameplay-abilities}"></a>Gameplay Abilities {#gameplay-abilities}</h1><p>Gameplay Abilities are derived from the <a href="./Source/GameplayAbilities/Public/GameplayAbility.h">UGameplayAbility class</a>.  They define what an in-game ability does, what (if anything) it costs to use, when or under what conditions it can be used, and so on.  Because Gameplay Abilities are implemented in native or Blueprints, it can do anything a Blueprint graph can do.  Unlike traditional Blueprints, they are capable of existing as instanced objects running asynchronously – so you can run specialized, multi-stage tasks (called <a href="#gameplay-ability-tasks">Gameplay Ability Tasks</a>.  Examples of Gameplay Abilities would be a character dash, or an attack.</p>
<p>Think of a Gameplay Ability as the bundle of functions that correspond to the action you’re performing.  There are complex rules about who can activate them, how they activate, and how they are predicted (locally executed ahead of the server acknowledgement).  You trigger them through the Ability System Component (typically through a TryActivate function).  But they can also be triggered through complex interactions (if desired) such as through Gameplay Events, <a href="#gameplay-tags">Gameplay Tags</a>, <a href="#gameplay-effects">Gameplay Effects</a>, and Input (which the <a href="#asc">ASC</a> handles internally).</p>
<p><a href="https://dev.epicgames.com/documentation/unreal-engine/using-gameplay-abilities-in-unreal-engine">Developer Community Gameplay Abilities docs</a></p>
<h2 id="Gameplay-Ability-Tasks-gameplay-ability-tasks"><a href="#Gameplay-Ability-Tasks-gameplay-ability-tasks" class="headerlink" title="Gameplay Ability Tasks gameplay-ability-tasks}"></a>Gameplay Ability Tasks {#gameplay-ability-tasks}</h2><p>Gameplay Abilities often make use of <a href="https://dev.epicgames.com/documentation/unreal-engine/gameplay-ability-tasks-in-unreal-engine">Gameplay Ability Tasks</a>.  Gameplay Ability Tasks are latent Blueprint nodes that allow your Gameplay Ability to ‘pause’ for the frame while it awaits some event.  They can also perform network functionality which hide complex implementation details from the Blueprint designer.</p>
<h2 id="Gameplay-Ability-Specs"><a href="#Gameplay-Ability-Specs" class="headerlink" title="Gameplay Ability Specs"></a>Gameplay Ability Specs</h2><p>The Gameplay Ability Specs are runtime-defined data which augment and tie together parameters used for the Gameplay Ability.  It serves two purposes:</p>
<ol>
<li>To configure the Gameplay Ability parameters prior to giving&#x2F;granting the ability.  For instance, it defines what ‘Level’ of the ability you are granting.</li>
<li>To store information about the granted Gameplay Ability that is shared between all instances of the Gameplay Ability.</li>
</ol>
<p>A lot of the <a href="#asc">Ability System Component</a>‘s interface deals with Gameplay Ability Specs, or after being granted, typically a Gameplay Ability Spec Handle.  The Handles are a way to succinctly refer to a Gameplay Ability Spec in both native and Blueprint code without worrying about the dangers of holding onto a pointer (and having that pointer be reallocated).  Whenever you want to refer to an already-granted Ability, use an Ability Spec Handle instead.</p>
<p>The corresponding class for <a href="./Source/GameplayAbilities/Public/GameplayAbilitySpec.h">FGameplayAbilitySpec</a> and <a href="./Source/GameplayAbilities/Public/GameplayAbilitySpecHandle.h">FGameplayAbilitySpecHandle</a>.</p>
<h2 id="Gameplay-Ability-Instancing-Policy"><a href="#Gameplay-Ability-Instancing-Policy" class="headerlink" title="Gameplay Ability Instancing Policy"></a>Gameplay Ability Instancing Policy</h2><p>The instancing policy determines when a Gameplay Ability is instanced (the Gameplay Ability object is created) and thus controls the lifetime of the GA.  The safest, and most feature-supported choice is InstancedPerActor.</p>
<h3 id="InstancedPerActor"><a href="#InstancedPerActor" class="headerlink" title="InstancedPerActor"></a>InstancedPerActor</h3><p>When choosing InstancedPerActor, the Gameplay Ability will be instanced when its corresponding Gameplay Ability Spec is first given (granted) to the Actor.  The instance lives until the Gameplay Ability Spec is removed from the Actor.  This lifetime mimics what most users expect:  You are granted an ability and immediately have an instance of it.</p>
<p>The lifetime semantics come with some pitfalls you should be aware of:</p>
<ul>
<li>Since the ability continues to exist after it has ended, none of the variables will be reset for next activation.  Thus it’s the user’s responsibility to reset the variables to the defaults in EndAbility.</li>
<li>Prior to UE5.5, you could receive function calls such as OnGiveAbility&#x2F;OnRemoveAbility on the <em>instance</em> immediately, before the ability had ever been activated.  This isn’t true of the other instancing types, which execute said functions on the CDO.  UE5.5 deprecates such functions in favor of explicit execution on the CDO.</li>
<li>There is a function you may see often called GetPrimaryInstance.  The Primary Instance refers to the InstancedPerActor’s one-and-only instance; it does not apply to other instancing types.</li>
</ul>
<h3 id="InstancedPerExecution"><a href="#InstancedPerExecution" class="headerlink" title="InstancedPerExecution"></a>InstancedPerExecution</h3><p>When choosing InstancedPerExecution, you receive a new instance of the Gameplay Ability for each and every activation.  Some things you should be aware of:</p>
<ul>
<li>The instancing happens on activation (not prior to it).  It is possible to Grant &amp; Revoke an InstancedPerExecution ability without ever instancing it.</li>
<li>Replicated Gameplay Abilities (GA’s which contain RPC’s or Replicated Variables) are relatively expensive, as a new GA must be sent for every activation.</li>
<li>Unlike InstancedPerActor, an individual instance is always active (otherwise it would have not been created).  It is garbage collected immediately upon ending.</li>
</ul>
<h3 id="NonInstanced-Deprecated"><a href="#NonInstanced-Deprecated" class="headerlink" title="NonInstanced (Deprecated)"></a>NonInstanced (Deprecated)</h3><p>Prior to UE5.5, we had functionality for Non-Instanced Gameplay Abilities.  Since these Gameplay Abilities were never instanced, they could not be replicated or even hold state (e.g. contain variables).  All functions were called on the ClassDefaultObject and thus all state had to be held on the Gameplay Ability Spec.  This made them very confusing to use.  The same functionality can be achieved by simply using InstancedPerActor and never revoking it; the cost is just a single allocation (instance) of a UGameplayAbility.</p>
<h2 id="Replication"><a href="#Replication" class="headerlink" title="Replication"></a>Replication</h2><p>There is a replication policy variable on the Gameplay Abilities.  The setting controls whether or not you are able to use Remote Procedure Calls (RPC’s) or Replicated Variables (now deprecated, see below).  It does <em>not</em> control if a Gameplay Ability will activate both on Server &amp; Client – that is controlled via the Execution Policy.</p>
<p>Keep in mind that Gameplay Abilities exist only on the locally controlled actors and on the server.  As such, you cannot replicate data meant to be visible on Simulated Proxies using Gameplay Abilities.  You would have to use other mechanisms, such as Attributes for replicated variables, or use RPC’s directly on the Actors.</p>
<h3 id="Replicated-Variables-in-Gameplay-Abilities"><a href="#Replicated-Variables-in-Gameplay-Abilities" class="headerlink" title="Replicated Variables in Gameplay Abilities"></a>Replicated Variables in Gameplay Abilities</h3><p>The usage of replicated variables is deprecated as of UE5.5.  The deprecation warning is controlled by a Console Variable “AbilitySystem.DeprecateReplicatedProperties”, so that users can turn off the warning and continue using the feature until they are ready to fix the issue.</p>
<p>The reasoning is to prevent users from stumbling upon an impossible-to-solve bug regarding replication ordering:</p>
<ul>
<li>Replicated variables are guaranteed to be delivered, but not in any particular order with respect to each other or RPC functions.</li>
<li>Gameplay Ability activation (and most synchronizing functions such as Target Data) rely on RPC’s exchanged between the Client and Server.</li>
<li>Therefore, when executing an RPC (e.g. Gameplay Ability Activation) and performing operations on a replicated variable, you would never be guaranteed to have an up-to-date or stale value.</li>
</ul>
<p>For more information, see the <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/replicated-object-execution-order-in-unreal-engine">EDC article on object replication order</a>.</p>
<p>If you believe you need a replicated variable, the solution is to instead use a Reliable RPC to send that data over.  Using a Reliable RPC will ensure proper ordering with the underlying synchronization mechanisms of GAS.</p>
<h3 id="Remote-Procedure-Calls-in-Gameplay-Abilities"><a href="#Remote-Procedure-Calls-in-Gameplay-Abilities" class="headerlink" title="Remote Procedure Calls in Gameplay Abilities"></a>Remote Procedure Calls in Gameplay Abilities</h3><p>Remote Procedure Calls (RPC’s) are the preferred method of communicating data between the client&#x2F;server.  By making a Reliable RPC, you can ensure proper ordering with the other Gameplay Ability functions that support replication such as Activation.  There is currently no restriction against Unreliable RPC’s, but know that order or delivery is not guaranteed.</p>
<p>Using a Multicast RPC will produce a validation warning (typically visible when compiling the Blueprint).  Since Gameplay Abilities never exist on Simulated Proxies, Multicast RPC’s make little sense in the context of a Gameplay Ability.</p>
<h3 id="RPC-Batching-to-Ensure-Proper-Activation-and-ReplicatedTargetData-Order"><a href="#RPC-Batching-to-Ensure-Proper-Activation-and-ReplicatedTargetData-Order" class="headerlink" title="RPC Batching to Ensure Proper Activation and ReplicatedTargetData Order"></a>RPC Batching to Ensure Proper Activation and ReplicatedTargetData Order</h3><p>There is a trick Epic uses internally to bundle the Gameplay Ability activation and Replicated Target Data.  Normally, if one were to implement a Locally Predicted Gameplay Ability that calls Activate() which in turn sets Replicated Target Data, the two would arrive at the Server in separate RPC’s:</p>
<ol>
<li>ServerTryActivateAbility (which will in turn call Activate)</li>
<li>ServerSetReplicatedTargetData (which will then set the data to the desired value – but Activate has already run!)</li>
</ol>
<p>There is a structure called <a href="./Source/GameplayAbilities/Public/GameplayAbilityTypes.h">FScopedServerAbilityRPCBatcher</a> which is designed to use a single RPC to send both Activation and Target Data.  To use it, do the following:</p>
<ol>
<li>In your <code>UAbilitySystemComponent</code>-derived class, override <code>ShouldDoServerAbilityRPCBatch</code> to return true.</li>
<li>In native code, Create an FScopedServerAbilityRPCBatcher on the stack.</li>
<li>Activate your Ability through your desired function (e.g. TryActivateAbility).</li>
<li>During the initial Activation of your ability, perform any CallServerSetReplicatedTargetData call.</li>
<li>When the destructor of the FScopedServerAbilityRPCBatcher executes (by going out of scope), it will call a batched RPC that contains both the Activation and the ReplicatedTargetData.</li>
</ol>
<p>By using this structure, you will be guaranteed that the Server has the desired RPC data prior to calling the Gameplay Ability’s activation function.</p>
<hr>
<h1 id="Gameplay-Effects-gameplay-effects"><a href="#Gameplay-Effects-gameplay-effects" class="headerlink" title="Gameplay Effects gameplay-effects}"></a>Gameplay Effects {#gameplay-effects}</h1><p>The purpose of Gameplay Effects is to modify an Actor in a predictable (and undoable) way.  Think of the verb Affect when you think of Gameplay Effects.  These are not Visual Effects or Sound Effects (those are called Gameplay Cues).  The Gameplay Effects are <em>applied</em> using <a href="#gameplay-effect-specs">Gameplay Effect Specs</a> through the Ability System Component.</p>
<ul>
<li>Gameplay Effects that have a Duration (non-Instant) will automatically undo any modifications to the Actor upon removal. Instant ones will modify the Attribute’s <em>BaseValue</em>.</li>
<li>These are typically data-only Blueprints, though native implementations are also supported.</li>
<li>They should be static after compile time; there is no way to modify them during runtime (Gameplay Effect Specs are the runtime version).</li>
<li>They are essentially a complex datatable of things that should occur to a Target Actor when ‘applied’.</li>
<li>Composed from these pieces:<ul>
<li>Duration &#x2F; Timing data (such as how long the Effect lasts for, or how it periodically executes).</li>
<li>Rules for Stacking the Gameplay Effects.</li>
<li>Attribute Modifiers (data that controls how a Gameplay Attribute is modified and thus can be undone).</li>
<li>Custom Executions (a user definable function that executes every time a Gameplay Effect is applied).</li>
<li>Gameplay Effect Components (fragments of code &#x2F; behavior to execute when applied).</li>
<li>Rules for applying Gameplay Cues (the VisualFX and AudioFX).</li>
</ul>
</li>
</ul>
<h2 id="Gameplay-Effect-Components-gameplay-effect-components"><a href="#Gameplay-Effect-Components-gameplay-effect-components" class="headerlink" title="Gameplay Effect Components gameplay-effect-components}"></a>Gameplay Effect Components {#gameplay-effect-components}</h2><p>Gameplay Effect Components are introduced in UE5.3 to declutter the Gameplay Effect user interface and allow users of the Engine to provide their own game-specific functionality to Gameplay Effects.  </p>
<p>Read the interface for <a href="./Source/GameplayAbilities/Public/GameplayEffectComponent.h">UGameplayEffectComponent</a></p>
<h2 id="Gameplay-Effect-Specs-gameplay-effect-specs"><a href="#Gameplay-Effect-Specs-gameplay-effect-specs" class="headerlink" title="Gameplay Effect Specs gameplay-effect-specs}"></a>Gameplay Effect Specs {#gameplay-effect-specs}</h2><p>These are the runtime wrapper structs for a Gameplay Effect.  They define the Gameplay Effect, any dynamic parameters (such as SetByCaller data), and the tags as they existed when the Spec was created.  The majority of the runtime API’s use a <em>GameplayEffectSpec</em> rather than a <em>GameplayEffect</em>.</p>
<h2 id="Gameplay-Effect-Executions-gameplay-effect-executions"><a href="#Gameplay-Effect-Executions-gameplay-effect-executions" class="headerlink" title="Gameplay Effect Executions gameplay-effect-executions}"></a>Gameplay Effect Executions {#gameplay-effect-executions}</h2><p>Gameplay Effect Executions are game-specific, user-written functions that are configured to execute when particular Gameplay Effects execute.  They typically read from and write to <a href="#gameplay-attributes">Gameplay Attributes</a>.  These are used when the calculations are much more complex than can be achieved with a simple attribute modifier.  Examples of this would be a damage system (see the <a href="https://dev.epicgames.com/documentation/unreal-engine/lyra-sample-game-in-unreal-engine">Lyra Example</a>).</p>
<hr>
<h1 id="Gameplay-Tags-gameplay-tags"><a href="#Gameplay-Tags-gameplay-tags" class="headerlink" title="Gameplay Tags gameplay-tags}"></a>Gameplay Tags {#gameplay-tags}</h1><p>The Gameplay Ability System uses Gameplay Tags extensively throughout.  See the <a href="https://dev.epicgames.com/documentation/unreal-engine/using-gameplay-tags-in-unreal-engine">official Developer Community documentation</a> for more details.</p>
<hr>
<h1 id="Gameplay-Cues-gameplay-cues"><a href="#Gameplay-Cues-gameplay-cues" class="headerlink" title="Gameplay Cues gameplay-cues}"></a>Gameplay Cues {#gameplay-cues}</h1><p>Gameplay Cues are a system for decoupling visual and audio fx from gameplay code.  On start-up, special Gameplay Cue asset folders are scanned for <a href="./Source/GameplayAbilities/Public/GameplayCueSet.h">Gameplay Cue Sets</a>, and <em>Gameplay Cue Notify</em> classes.</p>
<p>The implementer of a gameplay feature will either call the <a href="#asc">Ability System Component</a>‘s GameplayCue functions, or the <a href="./Source/GameplayAbilities/Public/GameplayCueManager.h">GameplayCueManager</a>‘s Gameplay Cue functions with a specific <a href="#gameplay-tag">Gameplay Tag</a>.  The effects artist will then create a <em>Gameplay Cue Notify</em> that corresponds to that tag.  The Gameplay Cue Manager is responsible for routing that specific tag to the proper <em>Gameplay Cue Notify</em>.</p>
<h2 id="Gameplay-Cue-replication"><a href="#Gameplay-Cue-replication" class="headerlink" title="Gameplay Cue replication"></a>Gameplay Cue replication</h2><p>The details of Gameplay Cue replication are complex and worth noting.  Because these are cosmetic-only, there are unreliable RPC’s that are used to communicate the execution of short-lived “<em>Burst</em>“ cues.  We also use variable replication to synchronize the existance of longer cues (typically referred to as <em>Looping</em> or <em>Actor Notfies</em>).  This two-tiered approach ensures that Gameplay Cues can be dropped as unimportant, but also ensures important cues can be visible to any clients that <em>become relevant</em> according to the network system.</p>
<p>Due to these Gameplay Cues needing to obey network relevancy (i.e. far away players should not replicate their Cues, but newly relevant ones should) and the fact that the PlayerState is <em>always relevant</em>, there is a <em>replication proxy</em> system.  The Player’s Pawn (who has its <a href="#asc">ASC</a> on the PlayerState) should implement the <a href="./Source/GameplayAbilities/Public/AbilitySystemReplicationProxyInterface.h">IAbilitySystemReplicationProxyInterface</a>.  When turning on the ASC’s ReplicationProxyEnabled variable, all unreliable Gameplay Cue RPC’s will go through the proxy interface (the Pawn, which properly represents relevancy).</p>
<p>An advanced form of replication proxies also exists for the property replication so it may follow the same relevancy rules.  See <code>FMinimalGameplayCueReplicationProxy</code> in the <a href="./Source/GameplayAbilities/Public/GameplayCueInterface.h">GameplayCueInterface</a>.</p>
<p>Due to the Burst Cues being replicated by RPC and the Looping Cues being replicated by replicated variables, one can run into an issue where the unreliable burst RPC gets dropped but the looping events (OnBecomeRelevant&#x2F;OnCeaseRelevant) arrive.  Less obvious, the unreliable OnBurst RPC can arrive but the OnBecomeRelevant&#x2F;OnCeaseRelevant can be dropped if the Cue is removed on the server quick enough to result in no state changes for network serialization.</p>
<p>See the section on <a href="#gc-events">Gameplay Cue Events</a> below for guidelines on how to implement your Gameplay Cue while taking into consideration network replication.</p>
<h2 id="Gameplay-Cue-Events-gc-events"><a href="#Gameplay-Cue-Events-gc-events" class="headerlink" title="Gameplay Cue Events gc-events}"></a>Gameplay Cue Events {#gc-events}</h2><p>When implementing a Gameplay Cue Notify Actor, the (legacy) naming of the functions may be confusing.  In UE5.5 the Blueprint (user-facing) names have changed in order to better represent what each function does.  They are laid out below.</p>
<h3 id="OnExecute"><a href="#OnExecute" class="headerlink" title="OnExecute"></a>OnExecute</h3><p>The execute function is the easiest to reason about:  It happens when you <em>Execute</em> a one-shot Gameplay Cue (aka a Static Notify &#x2F; non-Looping Gameplay Cue).  The code path to Execute a Gameplay Cue (for Static Notifies) is different than the code path to Add a Gameplay Cue (for Looping Gameplay Cues aka Actor Notifies).</p>
<p>Due to the code path for execution being different, the caller of the Gameplay Cue must know that the receiver of the Gameplay Cue is a Static Notify in order for this to execute properly.  The call should route through ExecuteGameplayCue see <a href="./Source/GameplayAbilities/Public/GameplayCueFunctionLibrary.h">GameplayCueFunctionLibrary</a>.</p>
<h3 id="OnBurst-native-OnActive"><a href="#OnBurst-native-OnActive" class="headerlink" title="OnBurst (native: OnActive)"></a>OnBurst (native: OnActive)</h3><p>This event executes only once when a <em>Looping Gameplay Cue</em> first fires.  Due to it being delivered by unreliable RPC, it can be dropped silently by a client.  You can use this to implement cosmetic effects that are only relevant if a client witnessed the Gameplay Cue triggering.</p>
<h3 id="OnBecomeRelevant-native-WhileActive"><a href="#OnBecomeRelevant-native-WhileActive" class="headerlink" title="OnBecomeRelevant (native: WhileActive)"></a>OnBecomeRelevant (native: WhileActive)</h3><p>This event executes when the <em>Looping Gameplay Cue</em> first comes into network relevancy (usually when it’s first added).  For instance, PawnA can have a Gameplay Cue activated, PawnB can join the game and still receive PawnA’s OnBecomeRelevant – but not receive OnBurst.</p>
<p>This is important to understand as OnBecomeRelevant and OnCeaseRelevant are both guaranteed to fire on the same Cue, whereas OnBurst is not guaranteed.</p>
<h3 id="OnCeaseRelevant-native-OnRemove"><a href="#OnCeaseRelevant-native-OnRemove" class="headerlink" title="OnCeaseRelevant (native: OnRemove)"></a>OnCeaseRelevant (native: OnRemove)</h3><p>This event executes when the <em>Looping Gameplay Cue</em> gets removed from network relevancy.  Usually that’s when the server executes the removal of the Cue, but could also be when the client loses relevancy (e.g. by distance) of the viewed Cue.</p>
<p>In UE5.5, a warning is introduced if a Gameplay Cue implements OnBurst and OnCeaseRelevant and not OnBecomeRelevant.  The reasoning is that the opposite of OnCeaseRelevant is OnBecomeRelevant, not OnBurst and it’s likely that the old naming scheme (OnActive&#x2F;OnRemove) was a source of confusion.</p>
<hr>
<h1 id="How-Gameplay-Prediction-Works"><a href="#How-Gameplay-Prediction-Works" class="headerlink" title="How Gameplay Prediction Works"></a>How Gameplay Prediction Works</h1><p>There is documentation for how the Gameplay Prediction mechanisms work at the top of <a href="./Source/GameplayAbilities/Public/GameplayPrediction.h">GameplayPrediction.h</a>.</p>
<hr>
<h1 id="Ability-System-Globals"><a href="#Ability-System-Globals" class="headerlink" title="Ability System Globals"></a>Ability System Globals</h1><p>There is a class called <a href="./Source/GameplayAbilities/Public/AbilitySystemGlobals.h">AbilitySystemGlobals</a> which provide project customization points for how to handle specific base Ability System scenarios.  For example, there a functions you can override to implement derived classes of types used throughout the code (such as <code>AllocGameplayEffectContext</code>).</p>
<p>In UE5.5, a lot of these settings have started migrating to the <a href="./Source/GameplayAbilities/Public/GameplayAbilitiesDeveloperSettings.h">GameplayAbilitiesDeveloperSettings</a> (which can be accessed using the Editor and choose the Project Settings menu item).  The rough division of responsibilities:  If it’s a global setting (like a variable) then it should be configurable through Gameplay Abilities Developer Settings; if it’s functionality (such as allocating project-specific classes) it should be in <a href="./Source/GameplayAbilities/Public/AbilitySystemGlobals.h">AbilitySystemGlobals</a>.</p>
<hr>
<h1 id="Debugging-the-Gameplay-Ability-System"><a href="#Debugging-the-Gameplay-Ability-System" class="headerlink" title="Debugging the Gameplay Ability System"></a>Debugging the Gameplay Ability System</h1><h2 id="Legacy-ShowDebug-Functionality"><a href="#Legacy-ShowDebug-Functionality" class="headerlink" title="Legacy ShowDebug Functionality"></a>Legacy ShowDebug Functionality</h2><p>Prior to UE5.4, the way to debug the Gameplay Ability System was to use the “ShowDebug AbilitySystem” command.  Once there, you can cycle through the categories using the command <code>AbilitySystem.Debug.NextCategory</code> or explicitly choose a category using <code>AbilitySystem.Debug.SetCategory</code>.  This system is no longer maintained and may be deprecated in future versions.  You should instead be looking at the <a href="#gameplay-debugger">Gameplay Debugger</a> functionality.</p>
<h2 id="Gameplay-Debugger-gameplay-debugger"><a href="#Gameplay-Debugger-gameplay-debugger" class="headerlink" title="Gameplay Debugger gameplay-debugger}"></a>Gameplay Debugger {#gameplay-debugger}</h2><p>New in UE5.4, there is enhanced Gameplay Debugger functionality for the Gameplay Ability System.  This functionality is preferred over the ShowDebug system and should be your first line of defense in debugging GAS.  To enable it, open the Gameplay Debugger typically by using <code>shift-apostrophe</code> (<code>shift-&#39;</code>) to select the locally controlled player, or simply the <code>apostrophe</code> (<code>&#39;</code>) key to select the Actor that is closest to your reticule.</p>
<p>The debugger will show you the AbilitySystemComponent’s current state as it pertains to Gameplay Tags, Gameplay Abilities, Gameplay Effects, and Gameplay Attributes.  In a networked game, the color coding helps to differentiate between how the server and client view their state.</p>
<h2 id="Console-Commands"><a href="#Console-Commands" class="headerlink" title="Console Commands"></a>Console Commands</h2><p>There are console commands that help both in developing and debugging GAS.  They are a great way to verify that your assumptions are correct about how abilities and effects should be activated, and coupled with the <a href="#gameplay-debugger">Gameplay Debugger</a>, what your state should be once executed.</p>
<p>All Ability System debug commands are prefixed with <code>AbilitySystem</code>.  The functionality we’re reviewing here exists in the <a href="./Source/GameplayAbilities/Private/AbilitySystemCheatManagerExtension.cpp">AbilitySystemCheatManagerExtension</a>.  The source code also serves as an excellent reference  how to properly trigger the Gameplay Abilities and Gameplay Effects in native code (and what the expected results would be, depending on their configurations).</p>
<p>By implementing these in a Cheat Manager Extension, you are able to properly execute them as a local player, or on the server.  Many of the commands allow such a distinction with the <code>-Server</code> argument (read the command documentation or source code for more information).</p>
<p>One of the gotchas when using these commands is that the assets should be loaded prior to their use.  This is easily done in the Editor by simply right-clicking on the assets you want to use and clicking “Load Assets”.</p>
<p><code>AbilitySystem.Ability.Grant &lt;ClassName/AssetName&gt;</code> Grants an Ability to the Player.  Granting only happens on the Authority, so this command will be sent to the Server.<br><code>AbilitySystem.Ability.Activate [-Server] &lt;TagName/ClassName/AssetName&gt;</code> Activate a Gameplay Ability.  Substring name matching works for Activation Tags (on already granted abilities), Asset Paths (on non-granted abilities), or Class Names on both.  Some Abilities can only be activated by the Client or the Server and you can control all of these activation options by specifying or ommitting the <code>-Server</code> argument.<br><code>AbilitySystem.Ability.Cancel [-Server] &lt;PartialName&gt;</code> Cancels (prematurely Ends) a currently executing Gameplay Ability.  Cancelation can be initiated by either the Client or Server.<br><code>AbilitySystem.Ability.ListGranted</code> List the Gameplay Abilities that are granted to the local player.  Since granting is done on the Server but replicated to the Client, these should always be in sync (so no option for -Server).</p>
<p><code>AbilitySystem.Effect.ListActive [-Server]</code> Lists all of the Gameplay Effects currently active on the Player.<br><code>AbilitySystem.Effect.Remove [-Server] &lt;Handle/Name&gt;</code> Remove a Gameplay Effect that is currently active on the Player.<br><code>AbilitySystem.Effect.Apply [-Server] &lt;Class/Assetname&gt; [Level]</code> Apply a Gameplay Effect on the Player.  Substring name matching works for Asset Tags, Asset Paths, or Class Names.  Use -Server to send to the server (default is apply locally).</p>
<p>Gameplay Cues have their own set of debug commands.</p>
<p><code>AbilitySystem.LogGameplayCueActorSpawning</code> Log when we create GameplayCueNotify_Actors.<br><code>AbilitySystem.DisplayGameplayCues</code> Display GameplayCue events in world as text.<br><code>AbilitySystem.GameplayCue.DisplayDuration</code> Configure the amount of time Gameplay Cues are drawn when <code>DisplayGameplayCues</code> is enabled.<br><code>AbilitySystem.DisableGameplayCues</code> Disables all GameplayCue events in the world.<br><code>AbilitySystem.GameplayCue.RunOnDedicatedServer</code> Run gameplay cue events on dedicated server.<br><code>AbilitySystem.GameplayCueActorRecycle</code> Allow recycling of GameplayCue Actors.<br><code>AbilitySystem.GameplayCueActorRecycleDebug</code> Prints logs for GC actor recycling debugging.<br><code>AbilitySystem.GameplayCueCheckForTooManyRPCs</code> Warns if gameplay cues are being throttled by network code.</p>
<h2 id="Visual-Logger"><a href="#Visual-Logger" class="headerlink" title="Visual Logger"></a>Visual Logger</h2><p>New in UE5.4, there has been extra care put into the <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/visual-logger-in-unreal-engine">Visual Logger</a> facilities for the Gameplay Ability System.  The <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/visual-logger-in-unreal-engine">Visual Logger</a> is useful to see the complex interactions of Gameplay Abilities and Gameplay Effects over time.  The Visual Logger always captures the verbose logs and saves a snapshot of the state of the Ability System Component on every frame there is a log entry.</p>
<p>In UE5.4, the <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/visual-logger-in-unreal-engine">Visual Logger</a> now correctly orders the events between clients and servers when using Play In Editor.  This makes the Visual Logger especially useful for debugging how the client and server interact when activating abilities, gameplay effects, and modifying attributes.</p>
]]></content>
      <categories>
        <category>UE Source</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
        <tag>UE Source</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.5-GameplayCue</title>
    <url>/2025/04/08/UE/GAS/UE55GASGC/</url>
    <content><![CDATA[<h1 id="GameplayCue"><a href="#GameplayCue" class="headerlink" title="GameplayCue"></a>GameplayCue</h1><p>重要的类：<br>GameplayCueSet</p>
<p>但是游戏中的资源加载并不是这样进行的。</p>
<p>映射关系： Tag -&gt; GC</p>
<p>GC的收集过程：<br>将GameplayCue资产放在指定的目录下。<br>具体的可以在.ini里面配置。<br>以Lyra为例子</p>
<img src="/2025/04/08/UE/GAS/UE55GASGC/image.png" class="" title="alt text">

<p>资源的加载：<br>关键类为UAbilitySystemGlobals与UGameplayCueManager。<br>可以看到GameplayCueManager里。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//UAbilitySystemGlobals部分</span><br><span class="line">//GameplayAbilitiesDeveloperSettings.h</span><br><span class="line">//注意宏里面Config的关键字</span><br><span class="line">/** Look in these paths for GameplayCueNotifies. These are your &quot;always loaded&quot; set. */</span><br><span class="line">UPROPERTY(Config, EditDefaultsOnly, Category=GameplayCue, meta = (ConfigRestartRequired=true))</span><br><span class="line">TArray&lt;FString&gt;	GameplayCueNotifyPaths;</span><br><span class="line">TArray&lt;FString&gt; UAbilitySystemGlobals::GetGameplayCueNotifyPaths()</span><br><span class="line">&#123;</span><br><span class="line">PRAGMA_DISABLE_DEPRECATION_WARNINGS</span><br><span class="line">    //Use set so we can append just unique paths</span><br><span class="line">    TSet&lt;FString&gt; ReturnPaths = TSet(GameplayCueNotifyPaths);</span><br><span class="line">PRAGMA_ENABLE_DEPRECATION_WARNINGS</span><br><span class="line"></span><br><span class="line">    ReturnPaths.Append(GetDefault&lt;UGameplayAbilitiesDeveloperSettings&gt;()-&gt;GameplayCueNotifyPaths);</span><br><span class="line">    return ReturnPaths.Array();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//CueManager部分</span><br><span class="line">TArray&lt;FString&gt; UGameplayCueManager::GetAlwaysLoadedGameplayCuePaths()</span><br><span class="line">&#123;</span><br><span class="line">    return UAbilitySystemGlobals::Get().GetGameplayCueNotifyPaths();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UGameplayCueManager::InitializeRuntimeObjectLibrary()</span><br><span class="line">&#123;</span><br><span class="line">    UE_SCOPED_ENGINE_ACTIVITY(TEXT(&quot;Initializing GameplayCueManager Runtime Object Library&quot;));</span><br><span class="line"></span><br><span class="line">    RuntimeGameplayCueObjectLibrary.Paths = GetAlwaysLoadedGameplayCuePaths();</span><br><span class="line">    if (RuntimeGameplayCueObjectLibrary.CueSet == nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        RuntimeGameplayCueObjectLibrary.CueSet = NewObject&lt;UGameplayCueSet&gt;(this, TEXT(&quot;GlobalGameplayCueSet&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RuntimeGameplayCueObjectLibrary.CueSet-&gt;Empty();</span><br><span class="line">    RuntimeGameplayCueObjectLibrary.bHasBeenInitialized = true;</span><br><span class="line"></span><br><span class="line">    RuntimeGameplayCueObjectLibrary.bShouldSyncScan = ShouldSyncScanRuntimeObjectLibraries();</span><br><span class="line">    RuntimeGameplayCueObjectLibrary.bShouldSyncLoad = ShouldSyncLoadRuntimeObjectLibraries();</span><br><span class="line">    RuntimeGameplayCueObjectLibrary.bShouldAsyncLoad = ShouldAsyncLoadRuntimeObjectLibraries();</span><br><span class="line"></span><br><span class="line">    InitObjectLibrary(RuntimeGameplayCueObjectLibrary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lyra项目示例"><a href="#Lyra项目示例" class="headerlink" title="Lyra项目示例"></a>Lyra项目示例</h2><p>还是看到Lyra项目<br>对应的三个例子分别为<br>GE:<br>GE_GameplayCueTest_Burst<br>GE_GameplayCueTest_BurstLatent<br>GE_GameplayCueTest_Looping</p>
<p>GC:<br>GCN_Test_Burst<br>GCN_Test_BurstLatent<br>GCNL_Test_Looping</p>
<p>GE的Burst与BurstLatent都是Instant类型。<br>但对应的GC不同，一个派生自GCN_Burst（即Static）,一个派生自GCN_BurstLatent(即Actor)。<br>两者都只需要在OnBurst处理自定义逻辑即可。<br>而后者由于有存在Actor，可以在逻辑中使用延迟等操作。</p>
<p>&#x2F;&#x2F;关于Actor存在数目可以再关注一下bAllowMultipleWhileActiveEvents与bAllowMultipleWhileActiveEvents</p>
<p>而Looping，在GE处就要处理Looping逻辑。见Period。<br>GC则会有OnLoopingStart、OnRecurring、OnRemoval对应的逻辑事件处理。</p>
<h3 id="调用链条"><a href="#调用链条" class="headerlink" title="调用链条"></a>调用链条</h3><p>最上层的调用：<br>UAbilitySystemGlobals::Get().GetGameplayCueManager()-&gt;InvokeGameplayCueExecuted_FromSpec(Owner, SpecToUse, PredictionKey);<br>↓<br>GameplayCueManager的AddPendingCueExecuteInternal<br>↓<br>GameplayCueManager的FlushPendingCues<br>↓<br>取到ASC的GetReplicationInterface函数作为RepInterface，调用ASC的Call_InvokeGameplayCueExecuted_FromSpec<br>↓<br>ASC的NetMulticast_InvokeGameplayCueExecuted_Implementation<br>↓<br>ASC的InvokeGameplayCueEvent[这里指定了事件类型为Executed]</p>
<h2 id="总结和部分问题"><a href="#总结和部分问题" class="headerlink" title="总结和部分问题"></a>总结和部分问题</h2><p>因为GC实际上是由GameplayTag去触发的，但是在编辑器中不是很直观。可以考虑做一个工具来直观的展示对应的Tag和GC的对应关系。</p>
<h2 id="持续Buff的GCN"><a href="#持续Buff的GCN" class="headerlink" title="持续Buff的GCN"></a>持续Buff的GCN</h2><h3 id="问题描述和思考流程"><a href="#问题描述和思考流程" class="headerlink" title="问题描述和思考流程"></a>问题描述和思考流程</h3><p>如果应用多个GE的时候，GC表现不太对。<br>实际上，如果是单个的Buff，是要用到GE的Stacking功能来做。<br>【比如身上有中毒buff】</p>
<p>但是有一个问题。GCN是依赖于Tag与Event来处理的。<br>如果想要做一个中毒的表现，而多个buff可能会加上不同时间&#x2F;伤害等信息的中毒。<br>-&gt; GCN应该是用同一个Tag。但是需要所有buff都结束，才移除GCN。<br>换句话说 应该是Removed要判定？<br>对于中毒这个特效，应该只需要创建一个GCN就可以了。但是，removed必须要判定为所有的毒类型Buff都移除了才能执行。</p>
<p>这里需要关注<br>Cue的添加与WhileActive事件<br>ASC的AddGameplayCue_Internal<br>-&gt; wasInList</p>
<p>Cue的移除<br>ASC的RemoveGameplayCue_Internal函数。</p>
<p>这里如果移除的时候判定Tag可能会好一点。<br>可以自己重写试试。</p>
<p>获取到对应的ASC 并判断其Cue数量。<br>这里还存在虚幻引擎的模组API宏问题。（对于GCN_Looping这部分）禁止了接口暴露。</p>
<p>但实际上移除的时候是移除所有Tag的…</p>
<img src="/2025/04/08/UE/GAS/UE55GASGC/image2.png" class="" title="alt text">

<img src="/2025/04/08/UE/GAS/UE55GASGC/image3.png" class="" title="alt text">

<img src="/2025/04/08/UE/GAS/UE55GASGC/image4.png" class="" title="alt text">

<img src="/2025/04/08/UE/GAS/UE55GASGC/image5.png" class="" title="alt text">

<p>目前已经基于该思路验证并实现了这种持续GCN的效果。<br>算是一种实现方案。</p>
<p>不过，基于此，还需要考虑AOI以及ASC转移时的相关问题。</p>
]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
        <tag>Lyra</tag>
      </tags>
  </entry>
  <entry>
    <title>UE GAS Modifier相关信息</title>
    <url>/2025/03/23/UE/GAS/UE55GASModifierInfos/</url>
    <content><![CDATA[<h1 id="总"><a href="#总" class="headerlink" title="总"></a>总</h1><p>列举各个Modifier相关的信息</p>
<h2 id="FGameplayModifierInfo"><a href="#FGameplayModifierInfo" class="headerlink" title="FGameplayModifierInfo"></a>FGameplayModifierInfo</h2><p>用于定义修改器的规则<br>关键数据 </p>
<ul>
<li>目标属性</li>
<li>修改方式</li>
<li>修改值</li>
<li>生效条件(Tags)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * FGameplayModifierInfo</span><br><span class="line"> *	Tells us &quot;Who/What we&quot; modify</span><br><span class="line"> *	Does not tell us how exactly</span><br><span class="line"> */</span><br><span class="line">USTRUCT(BlueprintType)</span><br><span class="line">struct GAMEPLAYABILITIES_API FGameplayModifierInfo</span><br><span class="line">&#123;</span><br><span class="line">	GENERATED_USTRUCT_BODY()</span><br><span class="line">	</span><br><span class="line">	/** The Attribute we modify or the GE we modify modifies. */</span><br><span class="line">	UPROPERTY(EditDefaultsOnly, Category=GameplayModifier, meta=(FilterMetaTag=&quot;HideFromModifiers&quot;))</span><br><span class="line">	FGameplayAttribute Attribute;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	 * The numeric operation of this modifier: Override, Add, Multiply, etc</span><br><span class="line">	 * When multiple modifiers aggregate together, the equation is:</span><br><span class="line">	 * ((BaseValue + AddBase) * MultiplyAdditive / DivideAdditive * MultiplyCompound) + AddFinal</span><br><span class="line">	 */</span><br><span class="line">	UPROPERTY(EditDefaultsOnly, Category=GameplayModifier)</span><br><span class="line">	TEnumAsByte&lt;EGameplayModOp::Type&gt; ModifierOp = EGameplayModOp::Additive;</span><br><span class="line"></span><br><span class="line">	/** Magnitude of the modifier */</span><br><span class="line">	UPROPERTY(EditDefaultsOnly, Category=GameplayModifier)</span><br><span class="line">	FGameplayEffectModifierMagnitude ModifierMagnitude;</span><br><span class="line"></span><br><span class="line">	/** Evaluation channel settings of the modifier */</span><br><span class="line">	UPROPERTY(EditDefaultsOnly, Category=GameplayModifier)</span><br><span class="line">	FGameplayModEvaluationChannelSettings EvaluationChannelSettings;</span><br><span class="line"></span><br><span class="line">	UPROPERTY(EditDefaultsOnly, Category=GameplayModifier)</span><br><span class="line">	FGameplayTagRequirements	SourceTags;</span><br><span class="line"></span><br><span class="line">	UPROPERTY(EditDefaultsOnly, Category=GameplayModifier)</span><br><span class="line">	FGameplayTagRequirements	TargetTags;</span><br><span class="line"></span><br><span class="line">	/** Equality/Inequality operators */</span><br><span class="line">	bool operator==(const FGameplayModifierInfo&amp; Other) const;</span><br><span class="line">	bool operator!=(const FGameplayModifierInfo&amp; Other) const;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="FModifierSpec"><a href="#FModifierSpec" class="headerlink" title="FModifierSpec"></a>FModifierSpec</h2><p>存储GEModifier的最终计算值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** Holds evaluated magnitude from a GameplayEffect modifier */</span><br><span class="line">USTRUCT()</span><br><span class="line">struct FModifierSpec</span><br><span class="line">&#123;</span><br><span class="line">	GENERATED_USTRUCT_BODY()</span><br><span class="line"></span><br><span class="line">	FModifierSpec() : EvaluatedMagnitude(0.f) &#123; &#125;</span><br><span class="line"></span><br><span class="line">	float GetEvaluatedMagnitude() const &#123; return EvaluatedMagnitude; &#125;</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line"></span><br><span class="line">	/** In the event that the modifier spec requires custom magnitude calculations, this is the authoritative, last evaluated value of the magnitude */</span><br><span class="line">	UPROPERTY()</span><br><span class="line">	float EvaluatedMagnitude;</span><br><span class="line"></span><br><span class="line">	/** These structures are the only ones that should internally be able to update the EvaluatedMagnitude. Any gamecode that gets its hands on FModifierSpec should never be setting EvaluatedMagnitude manually */</span><br><span class="line">	friend struct FGameplayEffectSpec;</span><br><span class="line">	friend struct FActiveGameplayEffectsContainer;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="FGameplayModifierEvaluatedData"><a href="#FGameplayModifierEvaluatedData" class="headerlink" title="FGameplayModifierEvaluatedData"></a>FGameplayModifierEvaluatedData</h2><p>修改器具体结果数据<br>关键数据 </p>
<ul>
<li>目标属性</li>
<li>修改方式</li>
<li>修改值</li>
<li>FActiveGEHandle</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** Data that describes what happened in an attribute modification. This is passed to ability set callbacks */</span><br><span class="line">USTRUCT(BlueprintType)</span><br><span class="line">struct FGameplayModifierEvaluatedData</span><br><span class="line">&#123;</span><br><span class="line">	GENERATED_USTRUCT_BODY()</span><br><span class="line"></span><br><span class="line">	FGameplayModifierEvaluatedData()</span><br><span class="line">		: Attribute()</span><br><span class="line">		, ModifierOp(EGameplayModOp::Additive)</span><br><span class="line">		, Magnitude(0.f)</span><br><span class="line">		, IsValid(false)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	FGameplayModifierEvaluatedData(const FGameplayAttribute&amp; InAttribute, TEnumAsByte&lt;EGameplayModOp::Type&gt; InModOp, float InMagnitude, FActiveGameplayEffectHandle InHandle = FActiveGameplayEffectHandle())</span><br><span class="line">		: Attribute(InAttribute)</span><br><span class="line">		, ModifierOp(InModOp)</span><br><span class="line">		, Magnitude(InMagnitude)</span><br><span class="line">		, Handle(InHandle)</span><br><span class="line">		, IsValid(true)</span><br><span class="line">	&#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/** What attribute was modified */</span><br><span class="line">	UPROPERTY()</span><br><span class="line">	FGameplayAttribute Attribute;</span><br><span class="line"></span><br><span class="line">	/** The numeric operation of this modifier: Override, Add, Multiply, etc  */</span><br><span class="line">	UPROPERTY()</span><br><span class="line">	TEnumAsByte&lt;EGameplayModOp::Type&gt; ModifierOp;</span><br><span class="line"></span><br><span class="line">	/** The raw magnitude of the applied attribute, this is generally before being clamped */</span><br><span class="line">	UPROPERTY()</span><br><span class="line">	float Magnitude;</span><br><span class="line"></span><br><span class="line">	/** Handle of the active gameplay effect that originated us. Will be invalid in many cases */</span><br><span class="line">	UPROPERTY()</span><br><span class="line">	FActiveGameplayEffectHandle	Handle;</span><br><span class="line"></span><br><span class="line">	/** True if something was evaluated */</span><br><span class="line">	UPROPERTY()</span><br><span class="line">	bool IsValid;</span><br><span class="line"></span><br><span class="line">	FString ToSimpleString() const</span><br><span class="line">	&#123;</span><br><span class="line">		return FString::Printf(TEXT(&quot;%s %s EvalMag: %f&quot;), *Attribute.GetName(), *EGameplayModOpToString(ModifierOp), Magnitude);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>UEGAS</tag>
        <tag>GAS Modifier</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.5-GameplayPrediction</title>
    <url>/2025/03/05/UE/GAS/UE55GamplayPrediction/</url>
    <content><![CDATA[<h1 id="SourceCode源码"><a href="#SourceCode源码" class="headerlink" title="SourceCode源码"></a><a href="https://github.com/MikeMing126/UESourceCode/blob/main/UE55_GAS_GameplayPrediction.h">SourceCode源码</a></h1><h1 id="Overview-of-Gameplay-Ability-Prediction"><a href="#Overview-of-Gameplay-Ability-Prediction" class="headerlink" title="Overview of Gameplay Ability Prediction"></a>Overview of Gameplay Ability Prediction</h1><h2 id="High-Level-Goals"><a href="#High-Level-Goals" class="headerlink" title="High Level Goals"></a>High Level Goals</h2><ul>
<li>At the GameplayAbility level (implementing an ability) prediction is transparent. An ability says “Do X-&gt;Y-&gt;Z”, and we will automatically predict the parts of that that we can.</li>
<li>We wish to avoid having logic such as “If Authority: Do X. Else: Do predictive version of X” in the ability itself.</li>
</ul>
<p>At this point, not all cases are solved, but we have a very solid framework for working with client side prediction.</p>
<p>When we say “client side prediction” we really mean client predicting game simulation state. Things can still be ‘completely client side’ without having to work within a prediction system.<br>For example, footsteps are completely client side and never interact with this system. But clients predicting their mana going from 100 to 90 when they cast a spell is ‘client side prediction’.</p>
<h2 id="What-do-we-currently-predict"><a href="#What-do-we-currently-predict" class="headerlink" title="What do we currently predict?"></a>What do we currently predict?</h2><ul>
<li>Initial GameplayAbility activation (and chained activation with caveats)</li>
<li>Triggered Events</li>
<li>GameplayEffect application:<ul>
<li>Attribute modification (EXCEPTIONS: Executions do not currently predict, only attribute modifiers)</li>
<li>GameplayTag modification</li>
</ul>
</li>
<li>Gameplay Cue events (both from within predictive gameplay effect and on their own)</li>
<li>Montages</li>
<li>Movement (built into UE UCharacterMovement)</li>
</ul>
<h2 id="Some-things-we-don’t-predict-most-of-these-we-potentially-could-but-currently-dont"><a href="#Some-things-we-don’t-predict-most-of-these-we-potentially-could-but-currently-dont" class="headerlink" title="Some things we don’t predict (most of these we potentially could, but currently dont):"></a>Some things we don’t predict (most of these we potentially could, but currently dont):</h2><ul>
<li>GameplayEffect removal</li>
<li>GameplayEffect periodic effects (dots ticking)</li>
</ul>
<h2 id="Problems-we-attempt-to-solve"><a href="#Problems-we-attempt-to-solve" class="headerlink" title="Problems we attempt to solve"></a>Problems we attempt to solve</h2><ol>
<li>“Can I do this?” Basic protocol for prediction.</li>
<li>“Undo” How to undo side effects when a prediction fails.</li>
<li>“Redo” How to avoid replaying side effects that we predicted locally but that also get replicated from the server.</li>
<li>“Completeness” How to be sure we &#x2F;really&#x2F; predicted all side effects.</li>
<li>“Dependencies” How to manage dependent prediction and chains of predicted events.</li>
<li>“Override” How to override state predictively that is otherwise replicated&#x2F;owned by the server.</li>
</ol>
<hr>
<h2 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h2><h3 id="​​-PredictionKey-​"><a href="#​​-PredictionKey-​" class="headerlink" title="​​ PredictionKey ​"></a>​<em><strong>​ PredictionKey ​</strong></em></h3><p>A fundamental concept in this system is the <code>FPredictionKey</code>. A prediction key on its own is simply a unique ID that is generated in a central place on the client. The client will send its prediction key to the server,<br>and associate predictive actions and side effects with this key. The server may respond with an accept&#x2F;reject for the prediction key, and will also associate the server-side created side effects with this prediction key.</p>
<p>(IMPORTANT) <code>FPredictionKey</code> always replicates client -&gt; server, but when replicating server -&gt; clients they <em>only</em> replicate to the client that sent the prediction key to the server in the first place.<br>This happens in <code>FPredictionKey::NetSerialize</code>. All other clients will receive an invalid (0) prediction key when a prediction key sent from a client is replicated back down through a replicated property.</p>
<hr>
<h3 id="​​-Ability-Activation-​"><a href="#​​-Ability-Activation-​" class="headerlink" title="​​ Ability Activation ​"></a>​<em><strong>​ Ability Activation ​</strong></em></h3><p>Ability Activation is a first class predictive action – it generates an initial prediction key. Whenever a client predictively activates an ability, it explicitly asks the server and the server explicitly responds. Once an ability has been<br>predictively activated (but the request has not yet been sent), the client has a valid ‘prediction window’ where predictive side effects can happen which are not explicitly ‘asked about’. (E.g., we do not explicitly ask ‘Can I decrement mana, Can I put this ability on cooldown. Those actions are considered logically atomic with activating an ability). You can think of this prediction window as being the initial callstack of <code>ActivateAbility</code>. Once <code>ActivateAbility</code> ends, your<br>prediction window (and therefore your prediction key) is no longer valid. This is important, because many things can invalidate your prediction window such as any timers or latent nodes in your Blueprint; we do not predict over multiple frames.</p>
<p><strong>AbilitySystemComponent</strong>​ provides a set of functions for communicating ability activation between clients and server: <code>TryActivateAbility</code> -&gt; <code>ServerTryActivateAbility</code> -&gt; <code>ClientActivateAbility(Failed/Succeed)</code>.</p>
<ol>
<li>Client calls <code>TryActivateAbility</code> which generates a new <code>FPredictionKey</code> and calls <code>ServerTryActivateAbility</code>.</li>
<li>Client continues (before hearing back from server) and calls <code>ActivateAbility</code> with the generated <code>PredictionKey</code> associated with the Ability’s <code>ActivationInfo</code>.</li>
<li>Any side effects that happen &#x2F;before the call to <code>ActivateAbility</code> finish&#x2F; have the generated <code>FPredictionKey</code> associated with them.</li>
<li>Server decides if the ability really happened in <code>ServerTryActivateAbility</code>, calls <code>ClientActivateAbility(Failed/Succeed)</code> and sets <code>UAbilitySystemComponent::ReplicatedPredictionKey</code> to the generated key that was sent with the request by the client.</li>
<li>If client receives <code>ClientAbilityFailed</code>, it immediately kills the ability and rolls back side effects that were associated with the prediction key.<ul>
<li>‘Rolling back’ logic is registered via <code>FPredictionKeyDelegates</code> and <code>FPredictionKey::NewRejectedDelegate/NewCaughtUpDelegate/NewRejectOrCaughtUpDelegate</code>.</li>
<li><code>ClientAbilityFailed</code> is really the only case where we ‘reject’ prediction keys and thus all of our current predictions rely on if an ability activates or not.</li>
</ul>
</li>
<li>If <code>ServerTryActivateAbility</code> succeeds, client must wait until property replication catches up (the Succeed RPC will be sent immediately, property replication will happen on its own). Once the <code>ReplicatedPredictionKey</code> catches up to the<br>key used previous steps, the client can undo its predictive side effects.<ul>
<li>See <code>FReplicatedPredictionKeyItem::OnRep</code> for the CatchUpTo logic. See <code>UAbilitySystemComponent::ReplicatedPredictionKeyMap</code> for how the keys actually get replicated. See ~&#96;FScopedPredictionWindow&#96; where the server acknowledges keys.</li>
</ul>
</li>
</ol>
<hr>
<h3 id="​​-GameplayEffect-Prediction-​"><a href="#​​-GameplayEffect-Prediction-​" class="headerlink" title="​​ GameplayEffect Prediction ​"></a>​<em><strong>​ GameplayEffect Prediction ​</strong></em></h3><p>GameplayEffects are considered side effects of ability activation and are not separately accepted&#x2F;rejected.</p>
<ol>
<li>GameplayEffects are only applied on clients if there is a valid prediction key. (If no prediction key, it simply skips the application on client).</li>
<li>Attributes, GameplayCues, and GameplayTags are all predicted if the GameplayEffect is predicted.</li>
<li>When the <code>FActiveGameplayEffect</code> is created, it stores the prediction key (<code>FActiveGameplayEffect::PredictionKey</code>)<ul>
<li>Instant effects are explained below in “Attribute Prediction”.</li>
</ul>
</li>
<li>On the server, the same prediction key is also set on the server’s <code>FActiveGameplayEffect</code> that will be replicated down.</li>
<li>As a client, if you get a replicated <code>FActiveGameplayEffect</code> with a valid prediction key on it, you check to see if you have an <code>ActiveGameplayEffect</code> with that same key, if there is match, we do not apply<br>the ‘on applied’ type of logic, e.g., GameplayCues. The solves the “Redo” problem. However we will have 2 of the ‘same’ GameplayEffects in our ActiveGameplayEffects container, temporarily:</li>
<li>At the same time, <code>FReplicatedPredictionKeyItem::OnRep</code> will catch up and the predictive effects will be removed. When they are removed in this case, we again check <code>PredictionKey</code> and decide<br>if we should not do the ‘On Remove’ logic &#x2F; GameplayCue.</li>
</ol>
<p>See <code>FActiveGameplayEffectsContainer::ApplyGameplayEffectSpec</code> where it registers what to do when caught-up (RemoveActiveGameplayEffect_NoReturn).<br>See <code>FActiveGameplayEffect::PostReplicatedAdd</code>, <code>FActiveGameplayEffect::PreReplicatedRemove</code>, and <code>FActiveGameplayCue::PostReplicatedAdd</code> for examples of how <code>FPredictionKey</code> is associated with the GE’s and GC’s.</p>
<hr>
<h3 id="​​-Attribute-Prediction-​"><a href="#​​-Attribute-Prediction-​" class="headerlink" title="​​ Attribute Prediction ​"></a>​<em><strong>​ Attribute Prediction ​</strong></em></h3><p>Since attributes are replicated as standard uproperties, predicting modification to them can be tricky (“Override” problem). Instantaneous modification can be even harder since these are non stateful by nature.<br>(E.g., rolling back an attribute mod is difficult if there is no book keeping past the modification). This makes the “Undo” and “Redo” problem also hard in this case.</p>
<p>The basic plan of attack is to treat attribute prediction as delta prediction rather than absolute value prediction. We do not predict that we have 90 mana, we predict that we have -10 mana from the server value, until<br>the server confirms our prediction key. Basically, treat instant modifications as &#x2F;infinite duration modifications&#x2F; to attributes while they are done predictively. The solves “Undo” and “Redo”.</p>
<p>For the “override” problem, we can handle this in the properties <code>OnRep</code> by treating the replicated (server) value as the ‘base value’ instead of ‘final value’ of the attribute, and to<br>reaggregate our ‘final value’ after a replication happens.</p>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example:"></a>Example:</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UMyHealthSet::GetLifetimeReplicatedProps</span><span class="params">(TArray&lt; FLifetimeProperty &gt; &amp; OutLifetimeProps)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Super::<span class="built_in">GetLifetimeReplicatedProps</span>(OutLifetimeProps);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">DOREPLIFETIME_CONDITION_NOTIFY</span>(UMyHealthSet, Health, COND_None, REPNOTIFY_Always);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Gameplay-Cue-Events"><a href="#Gameplay-Cue-Events" class="headerlink" title="Gameplay Cue Events"></a>Gameplay Cue Events</h1><p>Outside of GameplayEffects which are already explained, Gameplay Cues can be activated on their own. These functions (<code>UAbilitySystemComponent::ExecuteGameplayCue</code> etc) take network role and prediction keys into account.</p>
<p>In <code>UAbilitySystemComponent::ExecuteGameplayCue</code>, if authority then do the multicast event (with replication key). If non authority but w&#x2F; a valid prediction key, predict the GameplayCue.<br>On the receiving end (<code>NetMulticast_InvokeGameplayCueExecuted</code> etc), if there is a replication key, then don’t do the event (assume you predicted it).<br>Remember that <code>FPredictionKeys</code> only replicate to the originating owner. This is an intrinsic property of <code>FReplicationKey</code>.</p>
<hr>
<h1 id="Triggered-Data-Prediction"><a href="#Triggered-Data-Prediction" class="headerlink" title="Triggered Data Prediction"></a>Triggered Data Prediction</h1><p>Triggered Data is currently used to activate abilities. Essentially this all goes through the same code path as ActivateAbility. Rather than the ability being activated from input press, it is activated from<br>another game code driven event. Clients are able to predictively execute these events which predictively activate abilities.</p>
<p>There are some nuances to how, since the server will also run the code that triggers events. The server won’t just wait to hear from the client. The server will keep a list of triggered abilities that have been<br>activated from a predictive ability. When receiving a <code>TryActivate</code> from a triggered ability, the server will look to see if &#x2F;it&#x2F; has already run this ability, and respond with that information.</p>
<p>The issue is we do not properly rollback these operations. There is work left to do on Triggered Events and replication. (explained at the end).</p>
<hr>
<h2 id="Advanced-topic-Dependencies"><a href="#Advanced-topic-Dependencies" class="headerlink" title="Advanced topic! Dependencies"></a>Advanced topic! Dependencies</h2><p>We can have situations such as “Ability X activates and immediately triggers an event which activates Ability Y which triggers another Ability Z”. The dependency chain is X-&gt;Y-&gt;Z.<br>Each of those abilities could be rejected by the server. If Y is rejected, then Z also never happened, but the server does not explicitly decide ‘no Z can’t run’.<br>To handle this, we have a concept of a Base PredictionKey, which is a member of <code>FPredictionKey</code>. When calling <code>TryActivateAbility</code>, we pass in the current PredictionKey (if applicable). That prediction key<br>is used as the base for any new prediction keys generated. We build a chain of keys this way, and can then invalidate Z if Y is rejected.</p>
<p>This is slightly more nuanced though. In the X-&gt;Y-&gt;Z case, the server will only receive the PredictionKey for X before trying to run the chain itself. E.g., it will TryActivate Y and Z with the original prediction key<br>sent to it from the client, whereas the client will generate a new PredictionKey each time it calls <code>TryActivateAbility</code>. The client has to generate a new PredictionKey for each ability activate, since each activate<br>is not logically atomic. Each side effect produced in the chain of events has to have a unique PredictionKey. We cannot have GameplayEffects produced in X have the same PredictionKey produced in Z.</p>
<p>To get around this, The prediction key of X is considered the Base key for Y and Z. The dependency from Y to Z is kept completely client side, which is done in by <code>FPredictionKeyDelegates::AddDependency</code>. We add delegates<br>to reject&#x2F;catchup Z if Y rejected&#x2F;confirmed.</p>
<p>This dependency system allows us to have multiple predictive actions that are not logically atomic within a single prediction window&#x2F;scope.</p>
<p>There is a problem though: because the dependencies are kept client side, the server does not actually know if it had previously rejected a dependent action. You can design around this issue by using activation tags<br>in your gameplay abilities. For instance, when predicting dependents GA_Combo1 -&gt; GA_Combo2, you could make GA_Combo2 only activate if it has a GameplayTag given by GA_Combo1. Thus a rejection of GA_Combo1 would also<br>cause the server to reject the activation of GA_Combo2.</p>
<hr>
<h1 id="Additional-Prediction-Windows-within-an-Ability"><a href="#Additional-Prediction-Windows-within-an-Ability" class="headerlink" title="Additional Prediction Windows (within an Ability)"></a>Additional Prediction Windows (within an Ability)</h1><p>As stated, A prediction key is only usable during a single logical scope. Once <code>ActivateAbility</code> returns, we are essentially done with that key. If the ability is waiting on an external event or timer, it’s possible<br>we will have already received a confirm&#x2F;reject from the server by the time we’re ready to continue execution. Thus any additional side effects produced after the initial activation can no longer be tied to the lifespan of the original key.</p>
<p>This isn’t that bad, except that abilities will sometimes want to react to player input. For example, ‘a hold down and charge’ ability wants to instantly predict some stuff when the button is released. It is possible<br>to create a new prediction window within an ability with <code>FScopedPredictionWindow</code>.</p>
<p><strong>FScopedPredictionWindows</strong>​ provides a way to send the server a new prediction key and have the server pick up and use that key within the same logical scope.</p>
<p><code>UAbilityTask_WaitInputRelease::OnReleaseCallback</code> is a good example. The flow of events is as followed:</p>
<ol>
<li>Client enters <code>UAbilityTask_WaitInputRelease::OnReleaseCallback</code> and starts a new <code>FScopedPredictionWindow</code>. This creates a new prediction key for this scope (<code>FScopedPredictionWindow::ScopedPredictionKey</code>).</li>
<li>Client calls <code>AbilitySystemComponent-&gt;ServerInputRelease</code> which passes <code>ScopedPrediction.ScopedPredictionKey</code> as a parameter.</li>
<li>Server runs <code>ServerInputRelease_Implementation</code> which takes the passed in PredictionKey and sets it as <code>UAbilitySystemComponent::ScopedPredictionKey</code> with an <code>FScopedPredictionWindow</code>.</li>
<li>Server runs <code>UAbilityTask_WaitInputRelease::OnReleaseCallback</code> &#x2F;within the same scope&#x2F;</li>
<li>When the server hits the <code>FScopedPredictionWindow</code> in ::OnReleaseCallback, it gets the prediction key from <code>UAbilitySystemComponent::ScopedPredictionKey</code>. That is now used for all side effects within this logical scope.</li>
<li>Once the server ends this scoped prediction window, the prediction key used is finished and set to <code>ReplicatedPredictionKey</code>.</li>
<li>All side effects created in this scope now share a key between client and server.</li>
</ol>
<p>The key to this working is that ::OnReleaseCallback calls ::ServerInputRelease which calls ::OnReleaseCallback on the server. There is no room for anything else to happen and use the given prediction key.</p>
<p>While there is no “Try&#x2F;Failed&#x2F;Succeed” calls in this example, all side effects are procedurally grouped&#x2F;atomic. This solves the “Undo” and “Redo” problems for any arbitrary function calls that run on the server and client.</p>
<hr>
<h1 id="Unsupported-Issues-Todo"><a href="#Unsupported-Issues-Todo" class="headerlink" title="Unsupported &#x2F; Issues&#x2F; Todo"></a>Unsupported &#x2F; Issues&#x2F; Todo</h1><h3 id="Triggered-events-do-not-explicitly-replicate"><a href="#Triggered-events-do-not-explicitly-replicate" class="headerlink" title="Triggered events do not explicitly replicate"></a>Triggered events do not explicitly replicate</h3><ul>
<li>E.g., if a triggered event only runs on the server, the client will never hear about it. This also prevents us from doing cross player&#x2F;AI etc events. Support<br>for this should eventually be added and it should follow the same pattern that GameplayEffect and GameplayCues follow (predict triggered event with a prediction key, ignore the RPC event if it has a prediction key).</li>
</ul>
<p>Big caveat with this whole system: Rollback of any chained activations (including triggered events) is currently not possible out of the box. The reason for this is because each ServerTryActivateAbility is going to be responded to in order.<br>Let’s chain dependent GA’s as an example: GA_Mispredict -&gt; GA_Predict1. In this example, when GA_Mispredict is activated and predicted locally it will immediately also activate GA_Predict1. The client sends ServerTryActivateAbility for GA_Mispredict,<br>and the server rejects it (sending back a ClientActivateAbilityFailed). As it stands, we don’t have any delegates that reject dependent abilities on the client (and the server isn’t even aware there are dependencies). On the server, it also<br>receives a ServerTryActivateAbility for GA_Predict1. Assuming that succeeds, the Client and Server are now both executing GA_Predict1 even though GA_Mispredict never happened. You can design around this by using the tag system to ensure GA_Mispredict succeeded.</p>
<hr>
<h3 id="Predicting-“Meta”-Attributes-such-as-Damage-Healing-vs-“real”-attributes-such-as-Health"><a href="#Predicting-“Meta”-Attributes-such-as-Damage-Healing-vs-“real”-attributes-such-as-Health" class="headerlink" title="Predicting “Meta” Attributes such as Damage&#x2F;Healing vs “real” attributes such as Health"></a>Predicting “Meta” Attributes such as Damage&#x2F;Healing vs “real” attributes such as Health</h3><p>We are unable to apply meta attributes predictively. Meta attributes only work on instant effects, in the back end of GameplayEffect (Pre&#x2F;Post Modify Attribute on the UAttributeSet). These events are not called when<br>applying duration-based gameplay effects. E.g., a GameplayEffect that modifies damage for 5 seconds doesn’t make sense.</p>
<p>In order to support this, we would probably add some limited support for duration based meta attributes, and move the transform of the instant gameplay effect from the front end (<code>UAbilitySystemComponent::ApplyGameplayEffectSpecToSelf</code>)<br>to the backend (<code>UAttributeSet::PostModifyAttribute</code>).</p>
<hr>
<h3 id="Predicting-ongoing-multiplicative-GameplayEffects"><a href="#Predicting-ongoing-multiplicative-GameplayEffects" class="headerlink" title="Predicting ongoing multiplicative GameplayEffects"></a>Predicting ongoing multiplicative GameplayEffects</h3><p>There are also limitations when predicting % based gameplay effects. Since the server replicates down the ‘final value’ of an attribute, but not the entire aggregator chain of what is modifying it, we may run into cases where<br>the client cannot accurately predict new gameplay effects.</p>
<p>For example:</p>
<ul>
<li>Client has a perm +10% movement speed buff with base movement speed of 500 -&gt; 550 is the final movement speed for this client.</li>
<li>Client has an ability which grants an additional 10% movement speed buff. It is expected to <em>sum</em> the % based multipliers for a final 20% bonus to 500 -&gt; 600 movement speed.</li>
<li>However on the client, we just apply a 10% buff to 550 -&gt; 605.</li>
</ul>
<p>This will need to be fixed by replicating down the aggregator chain for attributes. We already replicate some of this data, but not the full modifier list. We will need to look into supporting this eventually.</p>
<hr>
<h3 id="“Weak-Prediction”"><a href="#“Weak-Prediction”" class="headerlink" title="“Weak Prediction”"></a>“Weak Prediction”</h3><p>We will probably still have cases that do not fit well into this system. Some situations will exist where a prediction key exchange is not feasible. For example, an ability where any one that player collides with&#x2F;touches<br>receives a GameplayEffect that slows them and their material blue. Since we can’t send Server RPCs every time this happens (and the server couldn’t necessarily handle the message at its point in the simulation), there is no<br>way to correlate the gameplay effect side effects between client and server.</p>
<p>One approach here may be to think about a weaker form of prediction. One where there is not a fresh prediction key used and instead the server assumes the client will predict all side effects from an entire ability. This would<br>at least solve the “redo” problem but would not solve the “completeness” problem. If the client side prediction could be made as minimal as possible - for example only predicting an initial particle effect rather than<br>predicting the state and attribute change - then the problems get less severe.</p>
<hr>
<h1 id="FPredictionKey-Implementation-Notes"><a href="#FPredictionKey-Implementation-Notes" class="headerlink" title="FPredictionKey Implementation Notes"></a>FPredictionKey Implementation Notes</h1><p><code>FPredictionKey</code> is a generic way of supporting Clientside Prediction in the GameplayAbility system.<br>A <code>FPredictionKey</code> is essentially an ID for identifying predictive actions and side effects that are<br>done on a client. <code>UAbilitySystemComponent</code> supports synchronization of the prediction key and its side effects<br>between client and server.</p>
<p>Essentially, anything can be associated with a <code>PredictionKey</code>, for example activating an Ability.<br>The client can generate a fresh <code>PredictionKey</code> and sends it to the server in its <code>ServerTryActivateAbility</code> call.<br>The server can confirm or reject this call (<code>ClientActivateAbilitySucceed/Failed</code>).</p>
<p>While the client is predicting its ability, it is creating side effects (GameplayEffects, TriggeredEvents, Animations, etc).<br>As the client predicts these side effects, it associates each one with the prediction key generated at the start of the ability<br>activation.</p>
<p>If the ability activation is rejected, the client can immediately revert these side effects.<br>If the ability activation is accepted, the client must wait until the replicated side effects are sent to the server.<br>(The <code>ClientActivatbleAbilitySucceed</code> RPC will be immediately sent. Property replication may happen a few frames later).<br>Once replication of the server created side effects is finished, the client can undo its locally predictive side effects.</p>
<p>The main things <code>FPredictionKey</code> itself provides are:</p>
<ul>
<li>Unique ID and a system for having dependant chains of <code>Prediction Keys</code> (“Current” and “Base” integers)</li>
<li>A special implementation of <code>::NetSerialize</code> which only serializes the prediction key to the predicting client<ul>
<li>This is important as it allows us to serialize prediction keys in replicated state, knowing that only clients that gave the server the prediction key will actually see them!</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>UE Source</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
        <tag>UE Source</tag>
      </tags>
  </entry>
  <entry>
    <title>GASPredictionKey自学简记</title>
    <url>/2025/03/06/UE/GAS/UEGamplayPrediction%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="关键点：PredictionKey"><a href="#关键点：PredictionKey" class="headerlink" title="关键点：PredictionKey"></a>关键点：PredictionKey</h1><p>由GA激活生成的PKey，并由此去影响GAS系统中的各个其他部分。</p>
<p>客户端预测先行，在收到服务器校验结果后，执行对应的回滚操作。</p>
<h2 id="概念：预测窗口-Prediction-Window"><a href="#概念：预测窗口-Prediction-Window" class="headerlink" title="概念：预测窗口 Prediction Window"></a>概念：预测窗口 Prediction Window</h2><blockquote>
<p>“We do not predict over multiple frames”</p>
</blockquote>
<p>在多个行为激活形成链条时，每个行为有自己的PKey，但又和之前的PKey相关联。<br>服务端并不确定Reject某个PKey对应的行为，是否会导致后续的行为也被拒绝。这里在实现的时候可能需要额外注意下。</p>
<h2 id="关于预测窗口"><a href="#关于预测窗口" class="headerlink" title="关于预测窗口"></a>关于预测窗口</h2><p>GA如果依赖于外部事件，或者定时器，在异步等待过程中，可能会收到服务器的confirm&#x2F;reject回调。而PKey在ActivateAbility返回时就结束了。因此后面激活的内容是无法绑定到这个PKey上的。</p>
<p>【这里可以验证一下 PKey在下发回客户端执行的事情（比如说广播），如果是广播形式，那么确实后面的内容就有问题了。】</p>
<p>预测窗口和预测键不会跨帧。但是预测本身是可以支持跨帧的。这里主要处理的是异步的GATask等逻辑。为了实现跨多帧的预测逻辑，就需要多个预测窗口。每个帧内的操作都是独立的预测窗口，每个异步操作需要自己的同步执行块。</p>
<p>这里异步操作对应的预测窗口创建：<br>• Ability中去创建新的PredictionWindow - 见<code>FScopedPredictionWindow</code></p>
<h2 id="学习方案和计划"><a href="#学习方案和计划" class="headerlink" title="学习方案和计划"></a>学习方案和计划</h2><p>虽然目前国内有着许多AI工具，但是在专业领域里面，AI工具的幻觉还是比较严重的。此外，虚幻引擎的GAS系统也在不断更新和迭代。虚幻4的GAS和虚幻5的GAS在很多接口上面和设计逻辑上面都有着许多的不同。</p>
<p>在学习时，一方面是要注重设计的理念和思想，一方面是基于目前应用的版本。或者是使用最新版本的引擎和插件来学习。</p>
<p>在学习和了解时，要基于项目源码。以及一些参考的项目示例。<br>比较好的是虚幻的ActionRPG项目和Lyra项目。不过ActionRPG项目的代码和实现逻辑在研究过后发现是比较旧的，网上的UE5版本的也是基于UE4版本的来改动的。此外，ActionRPG还是本地单机项目，在网络预测上面的逻辑还是比较少，可以说仅参考部分逻辑吧。</p>
<p>要保持思考，特别是针对目前网络同步的部分，很多实现比较简单，在真实项目应用时，需要多考虑一些。UE一些实现方案对于一些游戏项目也存在问题，要做对应的适配处理。</p>
]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.5-Lyra-1-Attribute</title>
    <url>/2025/03/16/UE/Project/Lyra/UE55Lyra1/</url>
    <content><![CDATA[<p>基于官方Lyra的GAS学习。</p>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>首先就是ASC的位置。<br>Lyra项目将ASC放置于了LyraPlayerState中。<br>将ASC与PlayerState绑定。</p>
<p>此外 可以看到LyraCharacter。其也有获取ASC的接口。</p>
<p>从LyraCharacter获取ASC组件，依赖于其PawnExtComponent。<br>这里可以看到ULyraPawnExtensionComponent这个类。<br>该类会存放一个ASC指针。在函数InitializeAbilitySystem中进行设置。</p>
<p>LyraHeroComponent是唯一调用该方法的组件。<br>见ULyraHeroComponent::HandleChangeInitState。<br>这里的逻辑也是从PlayerState中拿到ASC，然后赋值给PawnExtComponent。</p>
<p>总而言之，该项目的ASC位于PlayerState。<br>整体的链条大概如下：<br>PlayerState -&gt; LyraHeroComp -&gt; PawnExtComponent -&gt; LyraCharacter。</p>
<p>再整理一下：</p>
<p>LyraCharacter - 包含PawnExtComp<br> ↓ 子类<br>Character_Default<br> ↓ 子类<br>B_Hero_Default - 新增组件 LyraHeroComp</p>
<p>因此 只需要在子类去调用InitializeAbilitySystem来设置PawnExtComp中的ASC指针即可。</p>
<p>实际上，Pawn本身就有GetPlayerState的方法。<br>LyraHeroComp只是调用该方法（转为Lyra的PlayerState）并由LyraPlayerState获取ASC而已。</p>
<p>这部分的一些设置可以看到B_LyraGameMode。</p>
<h1 id="LyraPlayerState"><a href="#LyraPlayerState" class="headerlink" title="LyraPlayerState"></a>LyraPlayerState</h1><p>先看到 PlayerState部分<br>LyraPlayerState - 继承自AModularPlayerState IAbilitySystemInterface ILyraTeamAgentInterface</p>
<h1 id="关于ASC的初始化"><a href="#关于ASC的初始化" class="headerlink" title="关于ASC的初始化"></a>关于ASC的初始化</h1><p>LyraPlayerState，后续简称为 LPS<br>LPS继承自PlayerState，继承自AInfo。构造函数有:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AInfo(const FObjectInitializer&amp; ObjectInitializer = FObjectInitializer::Get());</span><br></pre></td></tr></table></figure>
<p>在LPS中，使用ObjectInitializer来创建ASC:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AbilitySystemComponent = ObjectInitializer.CreateDefaultSubobject&lt;ULyraAbilitySystemComponent&gt;(this, TEXT(&quot;AbilitySystemComponent&quot;));</span><br><span class="line"></span><br><span class="line">//另外一种创建ASC</span><br><span class="line">//直接调用[感兴趣也可以看看底层实现。其实还是拿了FObjectInitializer]</span><br><span class="line">AbilitySystemComponent = CreateDefaultSubobject&lt;ULyraAbilitySystemComponent&gt;(TEXT(&quot;AbilitySystemComponent2&quot;));</span><br></pre></td></tr></table></figure>
<p>之后 设置ASC的复制模式,并创建所需要的AttributeSet</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AbilitySystemComponent-&gt;SetIsReplicated(true);</span><br><span class="line">AbilitySystemComponent-&gt;SetReplicationMode(EGameplayEffectReplicationMode::Mixed);</span><br><span class="line"></span><br><span class="line">// These attribute sets will be detected by AbilitySystemComponent::InitializeComponent. Keeping a reference so that the sets don&#x27;t get garbage collected before that.</span><br><span class="line">HealthSet = CreateDefaultSubobject&lt;ULyraHealthSet&gt;(TEXT(&quot;HealthSet&quot;));</span><br><span class="line">CombatSet = CreateDefaultSubobject&lt;ULyraCombatSet&gt;(TEXT(&quot;CombatSet&quot;));</span><br></pre></td></tr></table></figure>

<h1 id="AttributeSet"><a href="#AttributeSet" class="headerlink" title="AttributeSet"></a>AttributeSet</h1><p>首先 从AttributeSet和ASC都位于LPS上可以看到设计的一致性。<br>接下来看看属性集的设计：</p>
<h2 id="ULyraHealthSet"><a href="#ULyraHealthSet" class="headerlink" title="ULyraHealthSet"></a>ULyraHealthSet</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private:</span><br><span class="line"></span><br><span class="line">	// The current health attribute.  The health will be capped by the max health attribute.  Health is hidden from modifiers so only executions can modify it.</span><br><span class="line">	UPROPERTY(BlueprintReadOnly, ReplicatedUsing = OnRep_Health, Category = &quot;Lyra|Health&quot;, Meta = (HideFromModifiers, AllowPrivateAccess = true))</span><br><span class="line">	FGameplayAttributeData Health;</span><br><span class="line"></span><br><span class="line">	// The current max health attribute.  Max health is an attribute since gameplay effects can modify it.</span><br><span class="line">	UPROPERTY(BlueprintReadOnly, ReplicatedUsing = OnRep_MaxHealth, Category = &quot;Lyra|Health&quot;, Meta = (AllowPrivateAccess = true))</span><br><span class="line">	FGameplayAttributeData MaxHealth;</span><br><span class="line"></span><br><span class="line">	// Used to track when the health reaches 0.</span><br><span class="line">	bool bOutOfHealth;</span><br><span class="line"></span><br><span class="line">	// Store the health before any changes </span><br><span class="line">	float MaxHealthBeforeAttributeChange;</span><br><span class="line">	float HealthBeforeAttributeChange;</span><br><span class="line"></span><br><span class="line">	// -------------------------------------------------------------------</span><br><span class="line">	//	Meta Attribute (please keep attributes that aren&#x27;t &#x27;stateful&#x27; below </span><br><span class="line">	// -------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">	// Incoming healing. This is mapped directly to +Health</span><br><span class="line">	UPROPERTY(BlueprintReadOnly, Category=&quot;Lyra|Health&quot;, Meta=(AllowPrivateAccess=true))</span><br><span class="line">	FGameplayAttributeData Healing;</span><br><span class="line"></span><br><span class="line">	// Incoming damage. This is mapped directly to -Health</span><br><span class="line">	UPROPERTY(BlueprintReadOnly, Category=&quot;Lyra|Health&quot;, Meta=(HideFromModifiers, AllowPrivateAccess=true))</span><br><span class="line">	FGameplayAttributeData Damage;</span><br></pre></td></tr></table></figure>

<p>可以看到简简单单的一个生命属性集 不但有普通的最大生命值，当前生命值，还有两个额外的数值。Healing与Damage。</p>
<p>在基类LyraAttributeSet中 定义了对应的属性宏用于获取&#x2F;设置属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * This macro defines a set of helper functions for accessing and initializing attributes.</span><br><span class="line"> *</span><br><span class="line"> * The following example of the macro:</span><br><span class="line"> *		ATTRIBUTE_ACCESSORS(ULyraHealthSet, Health)</span><br><span class="line"> * will create the following functions:</span><br><span class="line"> *		static FGameplayAttribute GetHealthAttribute();</span><br><span class="line"> *		float GetHealth() const;</span><br><span class="line"> *		void SetHealth(float NewVal);</span><br><span class="line"> *		void InitHealth(float NewVal);</span><br><span class="line"> */</span><br><span class="line">#define ATTRIBUTE_ACCESSORS(ClassName, PropertyName) \</span><br><span class="line">	GAMEPLAYATTRIBUTE_PROPERTY_GETTER(ClassName, PropertyName) \</span><br><span class="line">	GAMEPLAYATTRIBUTE_VALUE_GETTER(PropertyName) \</span><br><span class="line">	GAMEPLAYATTRIBUTE_VALUE_SETTER(PropertyName) \</span><br><span class="line">	GAMEPLAYATTRIBUTE_VALUE_INITTER(PropertyName)</span><br></pre></td></tr></table></figure>
<p>Healing与Damage只是中间处理，并不参与复制。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void ULyraHealthSet::GetLifetimeReplicatedProps(TArray&lt;FLifetimeProperty&gt;&amp; OutLifetimeProps) const</span><br><span class="line">&#123;</span><br><span class="line">	Super::GetLifetimeReplicatedProps(OutLifetimeProps);</span><br><span class="line"></span><br><span class="line">	DOREPLIFETIME_CONDITION_NOTIFY(ULyraHealthSet, Health, COND_None, REPNOTIFY_Always);</span><br><span class="line">	DOREPLIFETIME_CONDITION_NOTIFY(ULyraHealthSet, MaxHealth, COND_None, REPNOTIFY_Always);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后看到三个属性关键函数：</p>
<ul>
<li>PreAttributeBaseChange &#x2F;&#x2F;before any modification happens to an attribute’s base value</li>
<li>PreAttributeChange &#x2F;&#x2F;before any modification happens to an attribute</li>
<li>PostAttributeChange &#x2F;&#x2F;just after any modification happens to an attribute</li>
</ul>
<p>这三个函数：</p>
<ul>
<li>可以做值的范围限制（Clamp），如限制当前生命值大于0，小于最大生命值。最大生命值最小为1。</li>
<li>可以做值修正。比如最大生命值改变后，限制当前生命值为最大生命值。这里的修正要注意写法。用ApplyModToAttribute。&#x2F;&#x2F;Not invoke Pre&#x2F;PostGameplayEffectExecute calls on the attribute set</li>
</ul>
<p>然后是两个重要的GE函数：</p>
<ul>
<li>PreGameplayEffectExecute &#x2F;&#x2F;just before modifying the value of an attribute</li>
<li>PostGameplayEffectExecute &#x2F;&#x2F;just after a GameplayEffect is executed to modify the base value of an attribute</li>
</ul>
<p>PreGameplayEffectExecute</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bool ULyraHealthSet::PreGameplayEffectExecute(FGameplayEffectModCallbackData &amp;Data)</span><br><span class="line">&#123;</span><br><span class="line">	if (!Super::PreGameplayEffectExecute(Data))</span><br><span class="line">	&#123;</span><br><span class="line">		return false;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	//可以看到这里的是用“伤害”属性来做伤害的</span><br><span class="line">	// Handle modifying incoming normal damage</span><br><span class="line">	if (Data.EvaluatedData.Attribute == GetDamageAttribute())</span><br><span class="line">	&#123;</span><br><span class="line">		if (Data.EvaluatedData.Magnitude &gt; 0.0f)</span><br><span class="line">		&#123;</span><br><span class="line">			//自毁伤害</span><br><span class="line">			const bool bIsDamageFromSelfDestruct = Data.EffectSpec.GetDynamicAssetTags().HasTagExact(TAG_Gameplay_DamageSelfDestruct);</span><br><span class="line"></span><br><span class="line">			//免疫伤害的能力</span><br><span class="line">			if (Data.Target.HasMatchingGameplayTag(TAG_Gameplay_DamageImmunity) &amp;&amp; !bIsDamageFromSelfDestruct)</span><br><span class="line">			&#123;</span><br><span class="line">				// Do not take away any health.</span><br><span class="line">				Data.EvaluatedData.Magnitude = 0.0f;</span><br><span class="line">				return false;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">#if !UE_BUILD_SHIPPING</span><br><span class="line">			//GM模式 - 不扣血</span><br><span class="line">			// Check GodMode cheat, unlimited health is checked below</span><br><span class="line">			if (Data.Target.HasMatchingGameplayTag(LyraGameplayTags::Cheat_GodMode) &amp;&amp; !bIsDamageFromSelfDestruct)</span><br><span class="line">			&#123;</span><br><span class="line">				// Do not take away any health.</span><br><span class="line">				Data.EvaluatedData.Magnitude = 0.0f;</span><br><span class="line">				return false;</span><br><span class="line">			&#125;</span><br><span class="line">#endif // #if !UE_BUILD_SHIPPING</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	//改变前记录目前的属性</span><br><span class="line">	// Save the current health</span><br><span class="line">	HealthBeforeAttributeChange = GetHealth();</span><br><span class="line">	MaxHealthBeforeAttributeChange = GetMaxHealth();</span><br><span class="line"></span><br><span class="line">	return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PostGameplayEffectExecute</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void ULyraHealthSet::PostGameplayEffectExecute(const FGameplayEffectModCallbackData&amp; Data)</span><br><span class="line">&#123;</span><br><span class="line">	Super::PostGameplayEffectExecute(Data);</span><br><span class="line"></span><br><span class="line">	const bool bIsDamageFromSelfDestruct = Data.EffectSpec.GetDynamicAssetTags().HasTagExact(TAG_Gameplay_DamageSelfDestruct);</span><br><span class="line">	float MinimumHealth = 0.0f;</span><br><span class="line"></span><br><span class="line">#if !UE_BUILD_SHIPPING</span><br><span class="line">	// GM模式下不死</span><br><span class="line">	// Godmode and unlimited health stop death unless it&#x27;s a self destruct</span><br><span class="line">	if (!bIsDamageFromSelfDestruct &amp;&amp;</span><br><span class="line">		(Data.Target.HasMatchingGameplayTag(LyraGameplayTags::Cheat_GodMode) || Data.Target.HasMatchingGameplayTag(LyraGameplayTags::Cheat_UnlimitedHealth) ))</span><br><span class="line">	&#123;</span><br><span class="line">		MinimumHealth = 1.0f;</span><br><span class="line">	&#125;</span><br><span class="line">#endif // #if !UE_BUILD_SHIPPING</span><br><span class="line"></span><br><span class="line">	const FGameplayEffectContextHandle&amp; EffectContext = Data.EffectSpec.GetEffectContext();</span><br><span class="line"></span><br><span class="line">	// “发起人” 链条源 - &quot;return the original instigator that started the whole chain&quot;</span><br><span class="line">	AActor* Instigator = EffectContext.GetOriginalInstigator();</span><br><span class="line"></span><br><span class="line">	// “引起者” - &quot;the physical actor tied to the application of this effect&quot;</span><br><span class="line">	AActor* Causer = EffectContext.GetEffectCauser();</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">	*  玩家[Instigator]→技能→子弹[Causer]→敌人伤害</span><br><span class="line">	*/</span><br><span class="line"></span><br><span class="line">	if (Data.EvaluatedData.Attribute == GetDamageAttribute())</span><br><span class="line">	&#123;</span><br><span class="line">		// Send a standardized verb message that other systems can observe</span><br><span class="line">		if (Data.EvaluatedData.Magnitude &gt; 0.0f)</span><br><span class="line">		&#123;</span><br><span class="line">			//伤害事件 </span><br><span class="line">			FLyraVerbMessage Message;</span><br><span class="line">			Message.Verb = TAG_Lyra_Damage_Message;</span><br><span class="line">			Message.Instigator = Data.EffectSpec.GetEffectContext().GetEffectCauser();</span><br><span class="line">			Message.InstigatorTags = *Data.EffectSpec.CapturedSourceTags.GetAggregatedTags();</span><br><span class="line">			Message.Target = GetOwningActor();</span><br><span class="line">			Message.TargetTags = *Data.EffectSpec.CapturedTargetTags.GetAggregatedTags();</span><br><span class="line">			//@TODO: Fill out context tags, and any non-ability-system source/instigator tags</span><br><span class="line">			//@TODO: Determine if it&#x27;s an opposing team kill, self-own, team kill, etc...</span><br><span class="line">			Message.Magnitude = Data.EvaluatedData.Magnitude;</span><br><span class="line"></span><br><span class="line">			UGameplayMessageSubsystem&amp; MessageSystem = UGameplayMessageSubsystem::Get(GetWorld());</span><br><span class="line">			MessageSystem.BroadcastMessage(Message.Verb, Message);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		//通过元属性Damage 来造成生命值的减少。</span><br><span class="line"></span><br><span class="line">		// Convert into -Health and then clamp</span><br><span class="line">		SetHealth(FMath::Clamp(GetHealth() - GetDamage(), MinimumHealth, GetMaxHealth()));</span><br><span class="line">		SetDamage(0.0f);</span><br><span class="line">	&#125;</span><br><span class="line">	else if (Data.EvaluatedData.Attribute == GetHealingAttribute())</span><br><span class="line">	&#123;</span><br><span class="line">		//治疗</span><br><span class="line">		// Convert into +Health and then clamp</span><br><span class="line">		SetHealth(FMath::Clamp(GetHealth() + GetHealing(), MinimumHealth, GetMaxHealth()));</span><br><span class="line">		SetHealing(0.0f);</span><br><span class="line">	&#125;</span><br><span class="line">	else if (Data.EvaluatedData.Attribute == GetHealthAttribute())</span><br><span class="line">	&#123;</span><br><span class="line">		// Clamp and fall into out of health handling below</span><br><span class="line">		SetHealth(FMath::Clamp(GetHealth(), MinimumHealth, GetMaxHealth()));</span><br><span class="line">	&#125;</span><br><span class="line">	else if (Data.EvaluatedData.Attribute == GetMaxHealthAttribute())</span><br><span class="line">	&#123;</span><br><span class="line">		// TODO clamp current health?</span><br><span class="line"></span><br><span class="line">		//这里HealthSet里面新增的广播</span><br><span class="line">		// Notify on any requested max health changes</span><br><span class="line">		OnMaxHealthChanged.Broadcast(Instigator, Causer, &amp;Data.EffectSpec, Data.EvaluatedData.Magnitude, MaxHealthBeforeAttributeChange, GetMaxHealth());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// If health has actually changed activate callbacks</span><br><span class="line">	if (GetHealth() != HealthBeforeAttributeChange)</span><br><span class="line">	&#123;</span><br><span class="line">		//这里HealthSet里面新增的广播</span><br><span class="line">		OnHealthChanged.Broadcast(Instigator, Causer, &amp;Data.EffectSpec, Data.EvaluatedData.Magnitude, HealthBeforeAttributeChange, GetHealth());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if ((GetHealth() &lt;= 0.0f) &amp;&amp; !bOutOfHealth)</span><br><span class="line">	&#123;</span><br><span class="line">		//这里HealthSet里面新增的广播</span><br><span class="line">		OnOutOfHealth.Broadcast(Instigator, Causer, &amp;Data.EffectSpec, Data.EvaluatedData.Magnitude, HealthBeforeAttributeChange, GetHealth());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// Check health again in case an event above changed it.</span><br><span class="line">	bOutOfHealth = (GetHealth() &lt;= 0.0f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但实际的应用，应该还是要追溯到GE。<br>这部分放到后续来看。</p>
]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
        <tag>Lyra</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.5-Lyra-2-GE</title>
    <url>/2025/03/23/UE/Project/Lyra/UE55Lyra2/</url>
    <content><![CDATA[<h1 id="GE"><a href="#GE" class="headerlink" title="GE"></a>GE</h1><p>蓝图创建的GE。<br>基于 GameplayEffectParent_Damage_Basic 来看<br>GE:</p>
<ul>
<li>Gameplay效果<ul>
<li>组件 GEComponents<ul>
<li>包含很多个效果 可以在编辑器中细看</li>
</ul>
</li>
<li>修饰符 Modifiers</li>
<li>执行 Executions</li>
</ul>
</li>
<li>Gameplay Cue</li>
</ul>
<h2 id="GE的执行流程"><a href="#GE的执行流程" class="headerlink" title="GE的执行流程"></a>GE的执行流程</h2><p>以GA的ApplyCost为例子：</p>
<p>GA:ApplyGameplayEffectToOwner<br>↓<br>GA:ApplyGameplayEffectSpecToOwner<br>↓<br>ASC:ApplyGameplayEffectSpecToSelf</p>
<p>到这里可以分为两条路线了，一条是即刻执行的GE，Instant类型。第二种是有持续时间的GE（包括永久）。对于后者，会生成FActiveGameplayEffect。</p>
<p>在ASC:ApplyGameplayEffectSpecToSelf中就有两个关键函数了：</p>
<ul>
<li>持续类型的 由ASC的FActiveGameplayEffectContainer调用ApplyGameplayEffectSpec处理</li>
<li>Intant类型 ASC:ExecuteGameplayEffect</li>
</ul>
<p>ASC:ExecuteGameplayEffect<br>↓<br>由ASC的FActiveGameplayEffectContainer调用ExecuteActiveEffectsFrom。</p>
<p>虽然Instant类型，并不会生成FActiveGameplayEffect，可以认为是不会暴露给外部的，但执行接口可以一致。</p>
<p>ActiveGEContainer:ExecuteActiveEffectsFrom<br>↓<br>[一些关键函数]<br>GESpec:CalculateModifierMagnitudes</p>
<p>执行GE的Modifiers</p>
<ul>
<li>InternalExecuteMod</li>
</ul>
<p>执行各个Executions</p>
<ul>
<li>Execution:Execute(子类还是Execute_Implementation)</li>
<li>执行Execute内部生成的Modifiers<ul>
<li>InternalExecuteMod</li>
</ul>
</li>
</ul>
<p>↓<br>ActiveGEContainer:InternalExecuteMod<br>↓<br>ActiveGEContainer:ApplyModToAttribute<br>↓<br>ActiveGEContainer:SetAttributeBaseValue [更新BaseValue与CurrentValue]</p>
<h2 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h2><h3 id="Execution-LyraDamageExecution"><a href="#Execution-LyraDamageExecution" class="headerlink" title="Execution - LyraDamageExecution"></a>Execution - LyraDamageExecution</h3><p>继承链条：<br>UGameplayEffectCalculation<br>↓<br>UGameplayEffectExecutionCalculation<br>↓<br>ULyraDamageExecution</p>
<h4 id="GameplayEffectExecutionCalculation"><a href="#GameplayEffectExecutionCalculation" class="headerlink" title="GameplayEffectExecutionCalculation"></a>GameplayEffectExecutionCalculation</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//关键函数</span><br><span class="line">/**</span><br><span class="line">    * Called whenever the owning gameplay effect is executed. Allowed to do essentially whatever is desired, including generating new</span><br><span class="line">    * modifiers to instantly execute as well.</span><br><span class="line">    * </span><br><span class="line">    * @note: Native subclasses should override the auto-generated Execute_Implementation function and NOT this one.</span><br><span class="line">    * </span><br><span class="line">    * @param ExecutionParams		Parameters for the custom execution calculation</span><br><span class="line">    * @param OutExecutionOutput	[OUT] Output data populated by the execution detailing further behavior or results of the execution</span><br><span class="line">    */</span><br><span class="line">UFUNCTION(BlueprintNativeEvent, Category=&quot;Calculation&quot;)</span><br><span class="line">void Execute(const FGameplayEffectCustomExecutionParameters&amp; ExecutionParams, FGameplayEffectCustomExecutionOutput&amp; OutExecutionOutput) const;</span><br></pre></td></tr></table></figure>
<p>然后看到Lyra派生的伤害Execution:</p>
<h4 id="LyraDamageExecution"><a href="#LyraDamageExecution" class="headerlink" title="LyraDamageExecution"></a>LyraDamageExecution</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//定义Capture相关内容</span><br><span class="line"></span><br><span class="line">struct FDamageStatics</span><br><span class="line">&#123;</span><br><span class="line">    FGameplayEffectAttributeCaptureDefinition BaseDamageDef;</span><br><span class="line"></span><br><span class="line">    FDamageStatics()</span><br><span class="line">    &#123;</span><br><span class="line">        //CaptureSource有两种： Source 与 Target</span><br><span class="line">        //对应GE的Caster与Recipient</span><br><span class="line"></span><br><span class="line">        //指定捕获属性集的Damage</span><br><span class="line">        BaseDamageDef = FGameplayEffectAttributeCaptureDefinition(ULyraCombatSet::GetBaseDamageAttribute(), EGameplayEffectAttributeCaptureSource::Source, true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//提供单例模式访问</span><br><span class="line">static FDamageStatics&amp; DamageStatics()</span><br><span class="line">&#123;</span><br><span class="line">    static FDamageStatics Statics;</span><br><span class="line">    return Statics;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//属性Capture - &quot;Attributes to capture that are relevant to the calculation&quot;</span><br><span class="line">//这里的Capture定义了Execution的Modifier支持数据有哪些。算比较重要的一点。</span><br><span class="line">//如果没有添加对应的捕获属性，在编辑器视图看不到Execution的Modifiers。</span><br><span class="line">ULyraDamageExecution::ULyraDamageExecution()</span><br><span class="line">&#123;</span><br><span class="line">    RelevantAttributesToCapture.Add(DamageStatics().BaseDamageDef);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ULyraDamageExecution::Execute_Implementation(const FGameplayEffectCustomExecutionParameters&amp; ExecutionParams, FGameplayEffectCustomExecutionOutput&amp; OutExecutionOutput) const</span><br><span class="line">&#123;</span><br><span class="line">#if WITH_SERVER_CODE</span><br><span class="line">    const FGameplayEffectSpec&amp; Spec = ExecutionParams.GetOwningSpec();</span><br><span class="line">    FLyraGameplayEffectContext* TypedContext = FLyraGameplayEffectContext::ExtractEffectContext(Spec.GetContext());</span><br><span class="line">    check(TypedContext);</span><br><span class="line"></span><br><span class="line">    const FGameplayTagContainer* SourceTags = Spec.CapturedSourceTags.GetAggregatedTags();</span><br><span class="line">    const FGameplayTagContainer* TargetTags = Spec.CapturedTargetTags.GetAggregatedTags();</span><br><span class="line"></span><br><span class="line">    FAggregatorEvaluateParameters EvaluateParameters;</span><br><span class="line">    EvaluateParameters.SourceTags = SourceTags;</span><br><span class="line">    EvaluateParameters.TargetTags = TargetTags;</span><br><span class="line"></span><br><span class="line">    float BaseDamage = 0.0f;</span><br><span class="line">    //这里获取Execution定义的Modifier计算后的目标属性值</span><br><span class="line">    ExecutionParams.AttemptCalculateCapturedAttributeMagnitude(DamageStatics().BaseDamageDef, EvaluateParameters, BaseDamage);</span><br><span class="line"></span><br><span class="line">    //下面主要处理伤害的额外计算</span><br><span class="line">    //如距离 队伍 判定等</span><br><span class="line"></span><br><span class="line">    const AActor* EffectCauser = TypedContext-&gt;GetEffectCauser();</span><br><span class="line">    const FHitResult* HitActorResult = TypedContext-&gt;GetHitResult();</span><br><span class="line"></span><br><span class="line">    AActor* HitActor = nullptr;</span><br><span class="line">    FVector ImpactLocation = FVector::ZeroVector;</span><br><span class="line">    FVector ImpactNormal = FVector::ZeroVector;</span><br><span class="line">    FVector StartTrace = FVector::ZeroVector;</span><br><span class="line">    FVector EndTrace = FVector::ZeroVector;</span><br><span class="line"></span><br><span class="line">    // Calculation of hit actor, surface, zone, and distance all rely on whether the calculation has a hit result or not.</span><br><span class="line">    // Effects just being added directly w/o having been targeted will always come in without a hit result, which must default</span><br><span class="line">    // to some fallback information.</span><br><span class="line">    if (HitActorResult)</span><br><span class="line">    &#123;</span><br><span class="line">        const FHitResult&amp; CurHitResult = *HitActorResult;</span><br><span class="line">        HitActor = CurHitResult.HitObjectHandle.FetchActor();</span><br><span class="line">        if (HitActor)</span><br><span class="line">        &#123;</span><br><span class="line">            ImpactLocation = CurHitResult.ImpactPoint;</span><br><span class="line">            ImpactNormal = CurHitResult.ImpactNormal;</span><br><span class="line">            StartTrace = CurHitResult.TraceStart;</span><br><span class="line">            EndTrace = CurHitResult.TraceEnd;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Handle case of no hit result or hit result not actually returning an actor</span><br><span class="line">    UAbilitySystemComponent* TargetAbilitySystemComponent = ExecutionParams.GetTargetAbilitySystemComponent();</span><br><span class="line">    if (!HitActor)</span><br><span class="line">    &#123;</span><br><span class="line">        HitActor = TargetAbilitySystemComponent ? TargetAbilitySystemComponent-&gt;GetAvatarActor_Direct() : nullptr;</span><br><span class="line">        if (HitActor)</span><br><span class="line">        &#123;</span><br><span class="line">            ImpactLocation = HitActor-&gt;GetActorLocation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Apply rules for team damage/self damage/etc...</span><br><span class="line">    float DamageInteractionAllowedMultiplier = 0.0f;</span><br><span class="line">    if (HitActor)</span><br><span class="line">    &#123;</span><br><span class="line">        ULyraTeamSubsystem* TeamSubsystem = HitActor-&gt;GetWorld()-&gt;GetSubsystem&lt;ULyraTeamSubsystem&gt;();</span><br><span class="line">        if (ensure(TeamSubsystem))</span><br><span class="line">        &#123;</span><br><span class="line">            DamageInteractionAllowedMultiplier = TeamSubsystem-&gt;CanCauseDamage(EffectCauser, HitActor) ? 1.0 : 0.0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Determine distance</span><br><span class="line">    double Distance = WORLD_MAX;</span><br><span class="line"></span><br><span class="line">    if (TypedContext-&gt;HasOrigin())</span><br><span class="line">    &#123;</span><br><span class="line">        Distance = FVector::Dist(TypedContext-&gt;GetOrigin(), ImpactLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    else if (EffectCauser)</span><br><span class="line">    &#123;</span><br><span class="line">        Distance = FVector::Dist(EffectCauser-&gt;GetActorLocation(), ImpactLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        UE_LOG(LogLyraAbilitySystem, Error, TEXT(&quot;Damage Calculation cannot deduce a source location for damage coming from %s; Falling back to WORLD_MAX dist!&quot;), *GetPathNameSafe(Spec.Def));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Apply ability source modifiers</span><br><span class="line">    float PhysicalMaterialAttenuation = 1.0f;</span><br><span class="line">    float DistanceAttenuation = 1.0f;</span><br><span class="line">    if (const ILyraAbilitySourceInterface* AbilitySource = TypedContext-&gt;GetAbilitySource())</span><br><span class="line">    &#123;</span><br><span class="line">        if (const UPhysicalMaterial* PhysMat = TypedContext-&gt;GetPhysicalMaterial())</span><br><span class="line">        &#123;</span><br><span class="line">            PhysicalMaterialAttenuation = AbilitySource-&gt;GetPhysicalMaterialAttenuation(PhysMat, SourceTags, TargetTags);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DistanceAttenuation = AbilitySource-&gt;GetDistanceAttenuation(Distance, SourceTags, TargetTags);</span><br><span class="line">    &#125;</span><br><span class="line">    DistanceAttenuation = FMath::Max(DistanceAttenuation, 0.0f);</span><br><span class="line"></span><br><span class="line">    // Clamping is done when damage is converted to -health</span><br><span class="line">    const float DamageDone = FMath::Max(BaseDamage * DistanceAttenuation * PhysicalMaterialAttenuation * DamageInteractionAllowedMultiplier, 0.0f);</span><br><span class="line"></span><br><span class="line">    //[关键逻辑]处理实际的伤害值 - 通过添加Modifier的方式实现伤害计算</span><br><span class="line">    if (DamageDone &gt; 0.0f)</span><br><span class="line">    &#123;</span><br><span class="line">        // Apply a damage modifier, this gets turned into - health on the target</span><br><span class="line">        OutExecutionOutput.AddOutputModifier(FGameplayModifierEvaluatedData(ULyraHealthSet::GetDamageAttribute(), EGameplayModOp::Additive, DamageDone));</span><br><span class="line">    &#125;</span><br><span class="line">#endif // #if WITH_SERVER_CODE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>实际上，伤害也可以直接通过GE的Modifiers来直接处理。<br>Execution提供了自定义的伤害计算方式，基于捕获的属性来计算伤害，以及自定义需求。如Lyra中的距离计算、爆头等等。<br>Lyra中的伤害： ULyraHealthSet - Damage,使用了宏来禁止直接在GE中使用Modifier修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Incoming damage. This is mapped directly to -Health</span><br><span class="line">UPROPERTY(BlueprintReadOnly, Category=&quot;Lyra|Health&quot;, Meta=(HideFromModifiers, AllowPrivateAccess=true))</span><br><span class="line">FGameplayAttributeData Damage;</span><br></pre></td></tr></table></figure>
<p>并自定义了伤害计算函数ULyraDamageExecution，捕获[Source]玩家的基础伤害值来做。</p>
<p>考虑到如果不需要做额外值处理，应该是可以直接从ASC拿属性去处理的。这里自己编写了不使用Capture方式来处理属性的计算：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//前面代码略</span><br><span class="line"></span><br><span class="line">float BaseDamage = 0.0f;</span><br><span class="line">//ExecutionParams.AttemptCalculateCapturedAttributeMagnitude(DamageStatics().BaseDamageDef, EvaluateParameters, BaseDamage);</span><br><span class="line">ULyraAbilitySystemComponent*sourceASC = Cast&lt;ULyraAbilitySystemComponent&gt;(Spec.GetEffectContext().GetOriginalInstigatorAbilitySystemComponent());</span><br><span class="line">if (sourceASC)</span><br><span class="line">&#123;</span><br><span class="line">    bool found = false;</span><br><span class="line">    BaseDamage = sourceASC-&gt;GetGameplayAttributeValue(ULyraCombatSet::GetBaseDamageAttribute(),found);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//后面代码略</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
        <tag>Lyra</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.5-Lyra-3-GATask</title>
    <url>/2025/03/27/UE/Project/Lyra/UE55Lyra3/</url>
    <content><![CDATA[<h1 id="GamplayAbilityTask"><a href="#GamplayAbilityTask" class="headerlink" title="GamplayAbilityTask"></a>GamplayAbilityTask</h1><h2 id="基础AbilityTask"><a href="#基础AbilityTask" class="headerlink" title="基础AbilityTask"></a>基础AbilityTask</h2><ul>
<li>异步任务</li>
<li>开始并等待结束&#x2F;打断</li>
<li>部分实现需要关注[K2Node_LatentAbilityCall]</li>
</ul>
<h3 id="基础逻辑"><a href="#基础逻辑" class="headerlink" title="基础逻辑"></a>基础逻辑</h3><ul>
<li>定义动态多播委托，并声明为BlueprintAssignable</li>
<li>声明静态工厂函数用于创建AbilityTask。由该函数定义输入参数。但是这个不意味着任务开始，不在其中调用广播</li>
<li>实现Activate函数。该函数代表着任务的激活</li>
</ul>
<p>  其他<br>    - OnDestroy记得取消事件的侦听和注册，并调用父类的OnDestroy。</p>
<p>  静态工厂函数的meta声明了meta &#x3D; (xxx前面忽略, BlueprintInternalUseOnly &#x3D; “TRUE”)<br>  实际蓝图的调用走过UK2Node_LatentGameplayTaskCall的ExpandNode.</p>
<h3 id="WaitOverlap"><a href="#WaitOverlap" class="headerlink" title="WaitOverlap"></a>WaitOverlap</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//定义委托</span><br><span class="line">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FWaitOverlapDelegate, const FGameplayAbilityTargetDataHandle&amp;, TargetData);</span><br><span class="line"></span><br><span class="line">class AActor;</span><br><span class="line">class UPrimitiveComponent;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *	Fixme: this is still incomplete and probablyh not what most games want for melee systems.</span><br><span class="line"> *		-Only actually activates on Blocking hits</span><br><span class="line"> *		-Uses first PrimitiveComponent instead of being able to specify arbitrary component.</span><br><span class="line"> */</span><br><span class="line">UCLASS()</span><br><span class="line">class GAMEPLAYABILITIES_API UAbilityTask_WaitOverlap : public UAbilityTask</span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_UCLASS_BODY()</span><br><span class="line"></span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FWaitOverlapDelegate	OnOverlap;</span><br><span class="line"></span><br><span class="line">    UFUNCTION()</span><br><span class="line">    void OnHitCallback(UPrimitiveComponent* HitComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult&amp; Hit);</span><br><span class="line"></span><br><span class="line">    //重写Activate</span><br><span class="line">    virtual void Activate() override;</span><br><span class="line"></span><br><span class="line">    //定义静态工厂函数</span><br><span class="line">    /** Wait until an overlap occurs. This will need to be better fleshed out so we can specify game specific collision requirements */</span><br><span class="line">    UFUNCTION(BlueprintCallable, Category=&quot;Ability|Tasks&quot;, meta = (HidePin = &quot;OwningAbility&quot;, DefaultToSelf = &quot;OwningAbility&quot;, BlueprintInternalUseOnly = &quot;TRUE&quot;))</span><br><span class="line">    static UAbilityTask_WaitOverlap* WaitForOverlap(UGameplayAbility* OwningAbility);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    //重写OnDestory</span><br><span class="line">    virtual void OnDestroy(bool AbilityEnded) override;</span><br><span class="line"></span><br><span class="line">    UPrimitiveComponent* GetComponent();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>看到实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line">* 将生成的文件(xxx.Generated.cpp)内联到模块CPP文件中，这样能减少需要解析的头文件数量，从而缩短编译时间。</span><br><span class="line">* #include UE_INLINE_GENERATED_CPP_BY_NAME(CPP纯文件名无后缀)</span><br><span class="line">* 在CPP中使用，一般添加在#include最后部分</span><br><span class="line">*/</span><br><span class="line">//特殊include</span><br><span class="line">#include UE_INLINE_GENERATED_CPP_BY_NAME(AbilityTask_WaitOverlap)</span><br><span class="line"></span><br><span class="line">UAbilityTask_WaitOverlap::UAbilityTask_WaitOverlap(const FObjectInitializer&amp; ObjectInitializer): Super(ObjectInitializer)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//主要的逻辑函数 - 异步逻辑</span><br><span class="line">void UAbilityTask_WaitOverlap::OnHitCallback(UPrimitiveComponent* HitComp, AActor* OtherActor, UPrimitiveComponent* OtherComp, FVector NormalImpulse, const FHitResult&amp; Hit)</span><br><span class="line">&#123;</span><br><span class="line">    if(OtherActor)</span><br><span class="line">    &#123;</span><br><span class="line">        // Construct TargetData</span><br><span class="line">        FGameplayAbilityTargetData_SingleTargetHit * TargetData = new FGameplayAbilityTargetData_SingleTargetHit(Hit);</span><br><span class="line"></span><br><span class="line">        // Give it a handle and return</span><br><span class="line">        FGameplayAbilityTargetDataHandle	Handle;</span><br><span class="line">        Handle.Data.Add(TSharedPtr&lt;FGameplayAbilityTargetData&gt;(TargetData));</span><br><span class="line"></span><br><span class="line">        //广播之前需要进行一下有效性检测</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            OnOverlap.Broadcast(Handle);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // We are done. Kill us so we don&#x27;t keep getting broadcast messages</span><br><span class="line">        EndTask();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*	Need:</span><br><span class="line">*	-Easy way to specify which primitive components should be used for this overlap test</span><br><span class="line">*	-Easy way to specify which types of actors/collision overlaps that we care about/want to block on</span><br><span class="line">*/</span><br><span class="line">//静态工厂函数</span><br><span class="line">UAbilityTask_WaitOverlap* UAbilityTask_WaitOverlap::WaitForOverlap(UGameplayAbility* OwningAbility)</span><br><span class="line">&#123;</span><br><span class="line">    //这里需要注意调用方法为NewAbilityTask</span><br><span class="line">    UAbilityTask_WaitOverlap* MyObj = NewAbilityTask&lt;UAbilityTask_WaitOverlap&gt;(OwningAbility);</span><br><span class="line">    return MyObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_WaitOverlap::Activate()</span><br><span class="line">&#123;</span><br><span class="line">    //这里会做有效性检测</span><br><span class="line">    SetWaitingOnAvatar();</span><br><span class="line"></span><br><span class="line">    UPrimitiveComponent* PrimComponent = GetComponent();</span><br><span class="line">    if (PrimComponent)</span><br><span class="line">    &#123;</span><br><span class="line">        //对动态多播委托添加侦听</span><br><span class="line">        PrimComponent-&gt;OnComponentHit.AddDynamic(this, &amp;UAbilityTask_WaitOverlap::OnHitCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_WaitOverlap::OnDestroy(bool AbilityEnded)</span><br><span class="line">&#123;</span><br><span class="line">    UPrimitiveComponent* PrimComponent = GetComponent();</span><br><span class="line">    if (PrimComponent)</span><br><span class="line">    &#123;</span><br><span class="line">        //移除侦听</span><br><span class="line">        PrimComponent-&gt;OnComponentHit.RemoveDynamic(this, &amp;UAbilityTask_WaitOverlap::OnHitCallback);</span><br><span class="line">    &#125;</span><br><span class="line">    //父类OnDestroy</span><br><span class="line">    Super::OnDestroy(AbilityEnded);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UPrimitiveComponent* UAbilityTask_WaitOverlap::GetComponent()</span><br><span class="line">&#123;</span><br><span class="line">    // TEMP - we are just using root component&#x27;s collision. A real system will need more data to specify which component to use</span><br><span class="line">    UPrimitiveComponent * PrimComponent = nullptr;</span><br><span class="line">    AActor* ActorOwner = GetAvatarActor();</span><br><span class="line">    if (ActorOwner)</span><br><span class="line">    &#123;</span><br><span class="line">        PrimComponent = Cast&lt;UPrimitiveComponent&gt;(ActorOwner-&gt;GetRootComponent());</span><br><span class="line">        if (!PrimComponent)</span><br><span class="line">        &#123;</span><br><span class="line">            PrimComponent = ActorOwner-&gt;FindComponentByClass&lt;UPrimitiveComponent&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return PrimComponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SpawnActor类型的AbilityTask"><a href="#SpawnActor类型的AbilityTask" class="headerlink" title="SpawnActor类型的AbilityTask"></a>SpawnActor类型的AbilityTask</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">*	--------------------------------------</span><br><span class="line">*	</span><br><span class="line">*	We have additional support for AbilityTasks that want to spawn actors. Though this could be accomplished in an Activate() function, it would not be</span><br><span class="line">*	possible to pass in dynamic &quot;ExposeOnSpawn&quot; actor properties. This is a powerful feature of blueprints, in order to support this, you need to implement </span><br><span class="line">*	a different step 3:</span><br><span class="line">*	</span><br><span class="line">*	Instead of an Activate() function, you should implement a BeginSpawningActor() and FinishSpawningActor() function.</span><br><span class="line">*	</span><br><span class="line">*	BeginSpawningActor() must take in a TSubclassOf&lt;YourActorClassToSpawn&gt; parameters named &#x27;Class&#x27;. It must also have a out reference parameters of type </span><br><span class="line">*	YourActorClassToSpawn*&amp; named SpawnedActor. This function is allowed to decide whether it wants to spawn the actor or not (useful if wishing to</span><br><span class="line">*	predicate actor spawning on network authority).</span><br><span class="line">*	</span><br><span class="line">*	BeginSpawningActor() can instantiate an actor with SpawnActorDeferred. This is important, otherwise the UCS will run before spawn parameters are set.</span><br><span class="line">*	BeginSpawningActor() should also set the SpawnedActor parameter to the actor it spawned.</span><br><span class="line">*	</span><br><span class="line">*	[Next, the generated byte code will set the expose on spawn parameters to whatever the user has set]</span><br><span class="line">*	</span><br><span class="line">*	If you spawned something, FinishSpawningActor() will be called and pass in the same actor that was just spawned. You MUST call ExecuteConstruction + PostActorConstruction</span><br><span class="line">*	on this actor!</span><br><span class="line">*	</span><br><span class="line">*	This is a lot of steps but in general, AbilityTask_SpawnActor() gives a clear, minimal example.</span><br><span class="line">*	</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p>相较于Activate,需要实现BeginSpawningActor与FinishSpawningActor两个函数。<br>具体的逻辑要往上追溯UK2Node_LatentGameplayTaskCall与UK2Node_LatentAbilityCall。</p>
<h3 id="SpawnActor"><a href="#SpawnActor" class="headerlink" title="SpawnActor"></a>SpawnActor</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//动态多播委托</span><br><span class="line">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FGameplayTaskSpawnActorDelegate, AActor*, SpawnedActor);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *	Convenience task for spawning actors (optionally limiting the spawning to the network authority). If not the net authority, we will not spawn </span><br><span class="line"> *	and Success will not be called. The nice thing this adds is the ability to modify expose on spawn properties while also implicitly checking </span><br><span class="line"> *	network role before spawning.</span><br><span class="line"> *</span><br><span class="line"> *	Though this task doesn&#x27;t do much - games can implement similar tasks that carry out game specific rules. For example a &#x27;SpawnProjectile&#x27;</span><br><span class="line"> *	task that limits the available classes to the games projectile class, and that does game specific stuff on spawn (for example, determining</span><br><span class="line"> *	firing position from a weapon attachment).</span><br><span class="line"> *	</span><br><span class="line"> *	Long term we can also use this task as a sync point. If the executing client could wait execution until the server creates and replicates the </span><br><span class="line"> *	actor down to it. We could potentially also use this to do predictive actor spawning / reconciliation.</span><br><span class="line"> --“作为网络同步锚点，等待服务器生成并复制Actor到客户端后才继续执行。未来还可以用于预测性Actor生成与协调”</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">UCLASS(MinimalAPI)</span><br><span class="line">class UGameplayTask_SpawnActor : public UGameplayTask</span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_BODY()</span><br><span class="line">public:</span><br><span class="line">    //声明委托</span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FGameplayTaskSpawnActorDelegate	Success;</span><br><span class="line"></span><br><span class="line">    /** Called when we can&#x27;t spawn: on clients or potentially on server if they fail to spawn (rare) */</span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FGameplayTaskSpawnActorDelegate	DidNotSpawn;</span><br><span class="line"></span><br><span class="line">    //静态工厂函数</span><br><span class="line">    /** Spawn new Actor on the network authority (server) */</span><br><span class="line">    UFUNCTION(BlueprintCallable, Category = &quot;GameplayTasks&quot;, meta = (DisplayName=&quot;Spawn Actor for Gameplay Task&quot;, AdvancedDisplay = &quot;TaskOwner, bSpawnOnlyOnAuthority&quot;, DefaultToSelf = &quot;TaskOwner&quot;, BlueprintInternalUseOnly = &quot;TRUE&quot;))</span><br><span class="line">    static UGameplayTask_SpawnActor* SpawnActor(TScriptInterface&lt;IGameplayTaskOwnerInterface&gt; TaskOwner, FVector SpawnLocation, FRotator SpawnRotation, TSubclassOf&lt;AActor&gt; Class, bool bSpawnOnlyOnAuthority = false);</span><br><span class="line"></span><br><span class="line">    //重要函数1</span><br><span class="line">    UFUNCTION(BlueprintCallable, meta = (WorldContext=&quot;WorldContextObject&quot;, BlueprintInternalUseOnly = &quot;true&quot;), Category = &quot;GameplayTasks&quot;)</span><br><span class="line">    virtual bool BeginSpawningActor(UObject* WorldContextObject, AActor*&amp; SpawnedActor);</span><br><span class="line"></span><br><span class="line">    //重要函数2</span><br><span class="line">    UFUNCTION(BlueprintCallable, meta = (WorldContext=&quot;WorldContextObject&quot;, BlueprintInternalUseOnly = &quot;true&quot;), Category = &quot;GameplayTasks&quot;)</span><br><span class="line">    virtual void FinishSpawningActor(UObject* WorldContextObject, AActor* SpawnedActor);</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line">    FVector CachedSpawnLocation;</span><br><span class="line">    FRotator CachedSpawnRotation;</span><br><span class="line">    UPROPERTY()</span><br><span class="line">    TSubclassOf&lt;AActor&gt; ClassToSpawn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>来看到实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include UE_INLINE_GENERATED_CPP_BY_NAME(AbilityTask_SpawnActor)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">UAbilityTask_SpawnActor::UAbilityTask_SpawnActor(const FObjectInitializer&amp; ObjectInitializer)</span><br><span class="line">	: Super(ObjectInitializer)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//静态工厂函数</span><br><span class="line">UAbilityTask_SpawnActor* UAbilityTask_SpawnActor::SpawnActor(UGameplayAbility* OwningAbility, FGameplayAbilityTargetDataHandle TargetData, TSubclassOf&lt;AActor&gt; InClass)</span><br><span class="line">&#123;</span><br><span class="line">    //定义了目标类 - InClass</span><br><span class="line">    //定义了目标参数 - TargetData</span><br><span class="line"></span><br><span class="line">    //使用NewAbilityTask创建对象</span><br><span class="line">    UAbilityTask_SpawnActor* MyObj = NewAbilityTask&lt;UAbilityTask_SpawnActor&gt;(OwningAbility);</span><br><span class="line">    //变量赋值 - 使用MoveTemp的方式</span><br><span class="line">    MyObj-&gt;CachedTargetDataHandle = MoveTemp(TargetData);</span><br><span class="line">    return MyObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ---------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">bool UAbilityTask_SpawnActor::BeginSpawningActor(UGameplayAbility* OwningAbility, FGameplayAbilityTargetDataHandle TargetData, TSubclassOf&lt;AActor&gt; InClass, AActor*&amp; SpawnedActor)</span><br><span class="line">&#123;</span><br><span class="line">    //ShouldBroadcastAbilityTaskDelegates 有效性检测</span><br><span class="line">    if (Ability &amp;&amp; Ability-&gt;GetCurrentActorInfo()-&gt;IsNetAuthority() &amp;&amp; ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">    &#123;</span><br><span class="line">        UWorld* const World = GEngine-&gt;GetWorldFromContextObject(OwningAbility, EGetWorldErrorMode::LogAndReturnNull);</span><br><span class="line">        if (World)</span><br><span class="line">        &#123;</span><br><span class="line">            //生成对象</span><br><span class="line">            //这里SpawnActorDeferred内部调用UWorld::SpawnActor</span><br><span class="line">            SpawnedActor = World-&gt;SpawnActorDeferred&lt;AActor&gt;(InClass, FTransform::Identity, NULL, NULL, ESpawnActorCollisionHandlingMethod::AlwaysSpawn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (SpawnedActor == nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        //有效性检测</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            DidNotSpawn.Broadcast(nullptr);</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_SpawnActor::FinishSpawningActor(UGameplayAbility* OwningAbility, FGameplayAbilityTargetDataHandle TargetData, AActor* SpawnedActor)</span><br><span class="line">&#123;</span><br><span class="line">    if (SpawnedActor)</span><br><span class="line">    &#123;</span><br><span class="line">        //设置参数</span><br><span class="line">        bool bTransformSet = false;</span><br><span class="line">        FTransform SpawnTransform;</span><br><span class="line">        if (FGameplayAbilityTargetData* LocationData = CachedTargetDataHandle.Get(0))		//Hardcode to use data 0. It&#x27;s OK if data isn&#x27;t useful/valid.</span><br><span class="line">        &#123;</span><br><span class="line">            //Set location. Rotation is unaffected.</span><br><span class="line">            if (LocationData-&gt;HasHitResult())</span><br><span class="line">            &#123;</span><br><span class="line">                SpawnTransform.SetLocation(LocationData-&gt;GetHitResult()-&gt;Location);</span><br><span class="line">                bTransformSet = true;</span><br><span class="line">            &#125;</span><br><span class="line">            else if (LocationData-&gt;HasEndPoint())</span><br><span class="line">            &#123;</span><br><span class="line">                SpawnTransform = LocationData-&gt;GetEndPointTransform();</span><br><span class="line">                bTransformSet = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!bTransformSet)</span><br><span class="line">        &#123;</span><br><span class="line">            if (UAbilitySystemComponent* ASC = AbilitySystemComponent.Get())</span><br><span class="line">            &#123;</span><br><span class="line">                SpawnTransform = ASC-&gt;GetOwner()-&gt;GetTransform();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //注意调用FinishSpawning！</span><br><span class="line">        //AActor::FinishSpawning内部处理ExecuteConstruction 与 PostActorConstruction</span><br><span class="line">        /** Called to finish the spawning process, generally in the case of deferred spawning */</span><br><span class="line">        SpawnedActor-&gt;FinishSpawning(SpawnTransform);</span><br><span class="line"></span><br><span class="line">        //有效性检测</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            Success.Broadcast(SpawnedActor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EndTask();</span><br><span class="line">&#125;</span><br><span class="line">// ---------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">//没有对委托做单独注册，也不需要重写OnDestroy了</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="WaitTargetData"><a href="#WaitTargetData" class="headerlink" title="WaitTargetData"></a>WaitTargetData</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//声明动态多播委托</span><br><span class="line">DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FWaitTargetDataDelegate, const FGameplayAbilityTargetDataHandle&amp;, Data);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Wait for targeting actor (spawned from parameter) to provide data. Can be set not to end upon outputting data. Can be ended by task name.</span><br><span class="line"> *</span><br><span class="line"> * WARNING: These actors are spawned once per ability activation and in their default form are not very efficient</span><br><span class="line"> * For most games you will need to subclass and heavily modify this actor, or you will want to implement similar functions in a game-specific actor or blueprint to avoid actor spawn costs</span><br><span class="line"> * This task is not well tested by internal games, but it is a useful class to look at to learn how target replication occurs</span><br><span class="line"> */</span><br><span class="line">UCLASS()</span><br><span class="line">class GAMEPLAYABILITIES_API UAbilityTask_WaitTargetData: public UAbilityTask</span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_UCLASS_BODY()</span><br><span class="line"></span><br><span class="line">    //声明委托变量</span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FWaitTargetDataDelegate	ValidData;</span><br><span class="line"></span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FWaitTargetDataDelegate	Cancelled;</span><br><span class="line"></span><br><span class="line">    //复制回调</span><br><span class="line">    UFUNCTION()</span><br><span class="line">    virtual void OnTargetDataReplicatedCallback(const FGameplayAbilityTargetDataHandle&amp; Data, FGameplayTag ActivationTag);</span><br><span class="line"></span><br><span class="line">    UFUNCTION()</span><br><span class="line">    virtual void OnTargetDataReplicatedCancelledCallback();</span><br><span class="line"></span><br><span class="line">    UFUNCTION()</span><br><span class="line">    virtual void OnTargetDataReadyCallback(const FGameplayAbilityTargetDataHandle&amp; Data);</span><br><span class="line"></span><br><span class="line">    UFUNCTION()</span><br><span class="line">    virtual void OnTargetDataCancelledCallback(const FGameplayAbilityTargetDataHandle&amp; Data);</span><br><span class="line"></span><br><span class="line">    //静态工厂函数</span><br><span class="line">    //这里有两个工厂函数。</span><br><span class="line">    //一个使用目标类，并由内部处理目标类的对象生成。并使用BeginSpawningActor与FinishSpawningActor。</span><br><span class="line">    //一个使用已有对象。并使用Activate。</span><br><span class="line">    /** Spawns target actor and waits for it to return valid data or to be canceled. */</span><br><span class="line">    UFUNCTION(BlueprintCallable, meta=(HidePin = &quot;OwningAbility&quot;, DefaultToSelf = &quot;OwningAbility&quot;, BlueprintInternalUseOnly = &quot;true&quot;, HideSpawnParms=&quot;Instigator&quot;), Category=&quot;Ability|Tasks&quot;)</span><br><span class="line">    static UAbilityTask_WaitTargetData* WaitTargetData(UGameplayAbility* OwningAbility, FName TaskInstanceName, TEnumAsByte&lt;EGameplayTargetingConfirmation::Type&gt; ConfirmationType, TSubclassOf&lt;AGameplayAbilityTargetActor&gt; Class);</span><br><span class="line"></span><br><span class="line">    /** Uses specified target actor and waits for it to return valid data or to be canceled. */</span><br><span class="line">    UFUNCTION(BlueprintCallable, meta = (HidePin = &quot;OwningAbility&quot;, DefaultToSelf = &quot;OwningAbility&quot;, BlueprintInternalUseOnly = &quot;true&quot;, HideSpawnParms = &quot;Instigator&quot;), Category = &quot;Ability|Tasks&quot;)</span><br><span class="line">    static UAbilityTask_WaitTargetData* WaitTargetDataUsingActor(UGameplayAbility* OwningAbility, FName TaskInstanceName, TEnumAsByte&lt;EGameplayTargetingConfirmation::Type&gt; ConfirmationType, AGameplayAbilityTargetActor* TargetActor);</span><br><span class="line"></span><br><span class="line">    //重写的Activate函数</span><br><span class="line">    virtual void Activate() override;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //由于要生成对象 声明BeginSpawningActor与FinishSpawningActor。</span><br><span class="line">    //这里和SpawnActor的参数还不太一样 可以再研究</span><br><span class="line">    UFUNCTION(BlueprintCallable, meta = (HidePin = &quot;OwningAbility&quot;, DefaultToSelf = &quot;OwningAbility&quot;, BlueprintInternalUseOnly = &quot;true&quot;), Category = &quot;Abilities&quot;)</span><br><span class="line">    virtual bool BeginSpawningActor(UGameplayAbility* OwningAbility, TSubclassOf&lt;AGameplayAbilityTargetActor&gt; Class, AGameplayAbilityTargetActor*&amp; SpawnedActor);</span><br><span class="line"></span><br><span class="line">    UFUNCTION(BlueprintCallable, meta = (HidePin = &quot;OwningAbility&quot;, DefaultToSelf = &quot;OwningAbility&quot;, BlueprintInternalUseOnly = &quot;true&quot;), Category = &quot;Abilities&quot;)</span><br><span class="line">    virtual void FinishSpawningActor(UGameplayAbility* OwningAbility, AGameplayAbilityTargetActor* SpawnedActor);</span><br><span class="line"></span><br><span class="line">    /** Called when the ability is asked to confirm from an outside node. What this means depends on the individual task. By default, this does nothing other than ending if bEndTask is true. */</span><br><span class="line">    virtual void ExternalConfirm(bool bEndTask) override;</span><br><span class="line"></span><br><span class="line">    /** Called when the ability is asked to cancel from an outside node. What this means depends on the individual task. By default, this does nothing other than ending the task. */</span><br><span class="line">    virtual void ExternalCancel() override;</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line"></span><br><span class="line">    virtual bool ShouldSpawnTargetActor() const;</span><br><span class="line">    virtual void InitializeTargetActor(AGameplayAbilityTargetActor* SpawnedActor) const;</span><br><span class="line">    virtual void FinalizeTargetActor(AGameplayAbilityTargetActor* SpawnedActor) const;</span><br><span class="line"></span><br><span class="line">    virtual void RegisterTargetDataCallbacks();</span><br><span class="line"></span><br><span class="line">    virtual void OnDestroy(bool AbilityEnded) override;</span><br><span class="line"></span><br><span class="line">    virtual bool ShouldReplicateDataToServer() const;</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line"></span><br><span class="line">    UPROPERTY()</span><br><span class="line">    TSubclassOf&lt;AGameplayAbilityTargetActor&gt; TargetClass;</span><br><span class="line"></span><br><span class="line">    /** The TargetActor that we spawned */</span><br><span class="line">    UPROPERTY()</span><br><span class="line">    TObjectPtr&lt;AGameplayAbilityTargetActor&gt; TargetActor;</span><br><span class="line"></span><br><span class="line">    TEnumAsByte&lt;EGameplayTargetingConfirmation::Type&gt; ConfirmationType;</span><br><span class="line"></span><br><span class="line">    FDelegateHandle OnTargetDataReplicatedCallbackDelegateHandle;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*	Requirements for using Begin/Finish SpawningActor functionality:</span><br><span class="line">*		-Have a parameters named &#x27;Class&#x27; in your Proxy factor function (E.g., WaitTargetdata)</span><br><span class="line">*		-Have a function named BeginSpawningActor w/ the same Class parameter</span><br><span class="line">*			-This function should spawn the actor with SpawnActorDeferred and return true/false if it spawned something.</span><br><span class="line">*		-Have a function named FinishSpawningActor w/ an AActor* of the class you spawned</span><br><span class="line">*			-This function *must* call ExecuteConstruction + PostActorConstruction</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p>看到实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include UE_INLINE_GENERATED_CPP_BY_NAME(AbilityTask_WaitTargetData)</span><br><span class="line"></span><br><span class="line">UAbilityTask_WaitTargetData::UAbilityTask_WaitTargetData(const FObjectInitializer&amp; ObjectInitializer)</span><br><span class="line">	: Super(ObjectInitializer)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//静态工厂函数</span><br><span class="line">UAbilityTask_WaitTargetData* UAbilityTask_WaitTargetData::WaitTargetData(UGameplayAbility* OwningAbility, FName TaskInstanceName, TEnumAsByte&lt;EGameplayTargetingConfirmation::Type&gt; ConfirmationType, TSubclassOf&lt;AGameplayAbilityTargetActor&gt; InTargetClass)</span><br><span class="line">&#123;</span><br><span class="line">    //NewAbilityTask创建对象</span><br><span class="line">    UAbilityTask_WaitTargetData* MyObj = NewAbilityTask&lt;UAbilityTask_WaitTargetData&gt;(OwningAbility, TaskInstanceName);		//Register for task list here, providing a given FName as a key</span><br><span class="line">    //设置对象的参数</span><br><span class="line">    MyObj-&gt;TargetClass = InTargetClass;</span><br><span class="line">    MyObj-&gt;TargetActor = nullptr;</span><br><span class="line">    MyObj-&gt;ConfirmationType = ConfirmationType;</span><br><span class="line">    return MyObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UAbilityTask_WaitTargetData* UAbilityTask_WaitTargetData::WaitTargetDataUsingActor(UGameplayAbility* OwningAbility, FName TaskInstanceName, TEnumAsByte&lt;EGameplayTargetingConfirmation::Type&gt; ConfirmationType, AGameplayAbilityTargetActor* InTargetActor)</span><br><span class="line">&#123;</span><br><span class="line">    //和上面的一样 不过是用Actor</span><br><span class="line">    UAbilityTask_WaitTargetData* MyObj = NewAbilityTask&lt;UAbilityTask_WaitTargetData&gt;(OwningAbility, TaskInstanceName);		//Register for task list here, providing a given FName as a key</span><br><span class="line">    MyObj-&gt;TargetClass = nullptr;</span><br><span class="line">    MyObj-&gt;TargetActor = InTargetActor;</span><br><span class="line">    MyObj-&gt;ConfirmationType = ConfirmationType;</span><br><span class="line">    return MyObj;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_WaitTargetData::Activate()</span><br><span class="line">&#123;</span><br><span class="line">    //这里是以传入TargetActor的方式来处理的</span><br><span class="line">    // Need to handle case where target actor was passed into task</span><br><span class="line">    if (Ability &amp;&amp; (TargetClass == nullptr))</span><br><span class="line">    &#123;</span><br><span class="line">        if (TargetActor)</span><br><span class="line">        &#123;</span><br><span class="line">            AGameplayAbilityTargetActor* SpawnedActor = TargetActor;</span><br><span class="line">            //获取类</span><br><span class="line">            TargetClass = SpawnedActor-&gt;GetClass();</span><br><span class="line">            //注册回调</span><br><span class="line">            RegisterTargetDataCallbacks();</span><br><span class="line"></span><br><span class="line">            if (!IsValid(this))</span><br><span class="line">            &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (ShouldSpawnTargetActor())</span><br><span class="line">            &#123;   </span><br><span class="line">                //设置PlayerController并注册回调</span><br><span class="line">                InitializeTargetActor(SpawnedActor);</span><br><span class="line">                //ASC设置信息</span><br><span class="line">                FinalizeTargetActor(SpawnedActor);</span><br><span class="line"></span><br><span class="line">                // Note that the call to FinalizeTargetActor, this task could finish and our owning ability may be ended.</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                TargetActor = nullptr;</span><br><span class="line"></span><br><span class="line">                // We may need a better solution here.  We don&#x27;t know the target actor isn&#x27;t needed till after it&#x27;s already been spawned.</span><br><span class="line">                SpawnedActor-&gt;Destroy();</span><br><span class="line">                SpawnedActor = nullptr;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            EndTask();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool UAbilityTask_WaitTargetData::BeginSpawningActor(UGameplayAbility* OwningAbility, TSubclassOf&lt;AGameplayAbilityTargetActor&gt; InTargetClass, AGameplayAbilityTargetActor*&amp; SpawnedActor)</span><br><span class="line">&#123;</span><br><span class="line">    SpawnedActor = nullptr;</span><br><span class="line"></span><br><span class="line">    if (Ability)</span><br><span class="line">    &#123;</span><br><span class="line">        if (ShouldSpawnTargetActor())</span><br><span class="line">        &#123;</span><br><span class="line">            UClass* Class = *InTargetClass;</span><br><span class="line">            if (Class != nullptr)</span><br><span class="line">            &#123;</span><br><span class="line">                if (UWorld* World = GEngine-&gt;GetWorldFromContextObject(OwningAbility, EGetWorldErrorMode::LogAndReturnNull))</span><br><span class="line">                &#123;</span><br><span class="line">                    //生成对应的对象</span><br><span class="line">                    SpawnedActor = World-&gt;SpawnActorDeferred&lt;AGameplayAbilityTargetActor&gt;(Class, FTransform::Identity, nullptr, nullptr, ESpawnActorCollisionHandlingMethod::AlwaysSpawn);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (SpawnedActor)</span><br><span class="line">            &#123;</span><br><span class="line">                TargetActor = SpawnedActor;</span><br><span class="line">                //注册回调</span><br><span class="line">                InitializeTargetActor(SpawnedActor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RegisterTargetDataCallbacks();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return (SpawnedActor != nullptr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_WaitTargetData::FinishSpawningActor(UGameplayAbility* OwningAbility, AGameplayAbilityTargetActor* SpawnedActor)</span><br><span class="line">&#123;</span><br><span class="line">    UAbilitySystemComponent* ASC = AbilitySystemComponent.Get();</span><br><span class="line">    if (ASC &amp;&amp; IsValid(SpawnedActor))</span><br><span class="line">    &#123;</span><br><span class="line">        check(TargetActor == SpawnedActor);</span><br><span class="line"></span><br><span class="line">        const FTransform SpawnTransform = ASC-&gt;GetOwner()-&gt;GetTransform();</span><br><span class="line"></span><br><span class="line">        SpawnedActor-&gt;FinishSpawning(SpawnTransform);</span><br><span class="line"></span><br><span class="line">        FinalizeTargetActor(SpawnedActor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool UAbilityTask_WaitTargetData::ShouldSpawnTargetActor() const</span><br><span class="line">&#123;</span><br><span class="line">    check(TargetClass);</span><br><span class="line">    check(Ability);</span><br><span class="line"></span><br><span class="line">    // Spawn the actor if this is a locally controlled ability (always) or if this is a replicating targeting mode.</span><br><span class="line">    // (E.g., server will spawn this target actor to replicate to all non owning clients)</span><br><span class="line"></span><br><span class="line">    const AGameplayAbilityTargetActor* CDO = CastChecked&lt;AGameplayAbilityTargetActor&gt;(TargetClass-&gt;GetDefaultObject());</span><br><span class="line"></span><br><span class="line">    const bool bReplicates = CDO-&gt;GetIsReplicated();</span><br><span class="line">    const bool bIsLocallyControlled = Ability-&gt;GetCurrentActorInfo()-&gt;IsLocallyControlled();</span><br><span class="line">    const bool bShouldProduceTargetDataOnServer = CDO-&gt;ShouldProduceTargetDataOnServer;</span><br><span class="line"></span><br><span class="line">    return (bReplicates || bIsLocallyControlled || bShouldProduceTargetDataOnServer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_WaitTargetData::InitializeTargetActor(AGameplayAbilityTargetActor* SpawnedActor) const</span><br><span class="line">&#123;</span><br><span class="line">    check(SpawnedActor);</span><br><span class="line">    check(Ability);</span><br><span class="line"></span><br><span class="line">    //设置生成Actor的PlayerController</span><br><span class="line">    SpawnedActor-&gt;PrimaryPC = Ability-&gt;GetCurrentActorInfo()-&gt;PlayerController.Get();</span><br><span class="line"></span><br><span class="line">    //这里见到GameplayAbilityTargetActor</span><br><span class="line">    // If we spawned the target actor, always register the callbacks for when the data is ready.</span><br><span class="line">    SpawnedActor-&gt;TargetDataReadyDelegate.AddUObject(const_cast&lt;UAbilityTask_WaitTargetData*&gt;(this), &amp;UAbilityTask_WaitTargetData::OnTargetDataReadyCallback);</span><br><span class="line">    SpawnedActor-&gt;CanceledDelegate.AddUObject(const_cast&lt;UAbilityTask_WaitTargetData*&gt;(this), &amp;UAbilityTask_WaitTargetData::OnTargetDataCancelledCallback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_WaitTargetData::FinalizeTargetActor(AGameplayAbilityTargetActor* SpawnedActor) const</span><br><span class="line">&#123;</span><br><span class="line">    check(SpawnedActor);</span><br><span class="line">    check(Ability);</span><br><span class="line"></span><br><span class="line">    if (UAbilitySystemComponent* ASC = AbilitySystemComponent.Get())</span><br><span class="line">    &#123;</span><br><span class="line">        // User ability activation is inhibited while this is active</span><br><span class="line">        ASC-&gt;SpawnedTargetActors.Push(SpawnedActor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SpawnedActor-&gt;StartTargeting(Ability);</span><br><span class="line"></span><br><span class="line">    if (SpawnedActor-&gt;ShouldProduceTargetData())</span><br><span class="line">    &#123;   </span><br><span class="line">        //不需要客户端提供信息的情况</span><br><span class="line">        </span><br><span class="line">        // If instant confirm, then stop targeting immediately.</span><br><span class="line">        // Note this is kind of bad: we should be able to just call a static func on the CDO to do this. </span><br><span class="line">        // But then we wouldn&#x27;t get to set ExposeOnSpawnParameters.</span><br><span class="line">        if (ConfirmationType == EGameplayTargetingConfirmation::Instant)</span><br><span class="line">        &#123;</span><br><span class="line">            SpawnedActor-&gt;ConfirmTargeting();</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ConfirmationType == EGameplayTargetingConfirmation::UserConfirmed)</span><br><span class="line">        &#123;</span><br><span class="line">            // Bind to the Cancel/Confirm Delegates (called from local confirm or from repped confirm)</span><br><span class="line">            SpawnedActor-&gt;BindToConfirmCancelInputs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_WaitTargetData::RegisterTargetDataCallbacks()</span><br><span class="line">&#123;</span><br><span class="line">    if (!ensure(IsValid(this)))</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UAbilitySystemComponent* ASC = AbilitySystemComponent.Get();</span><br><span class="line">    if (!ASC)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    check(TargetClass);</span><br><span class="line">    check(Ability);</span><br><span class="line"></span><br><span class="line">    const AGameplayAbilityTargetActor* CDO = CastChecked&lt;AGameplayAbilityTargetActor&gt;(TargetClass-&gt;GetDefaultObject());</span><br><span class="line"></span><br><span class="line">    const bool bIsLocallyControlled = Ability-&gt;GetCurrentActorInfo()-&gt;IsLocallyControlled();</span><br><span class="line">    const bool bShouldProduceTargetDataOnServer = CDO-&gt;ShouldProduceTargetDataOnServer;</span><br><span class="line"></span><br><span class="line">    // If not locally controlled (server for remote client), see if TargetData was already sent</span><br><span class="line">    // else register callback for when it does get here.</span><br><span class="line">    if (!bIsLocallyControlled)</span><br><span class="line">    &#123;</span><br><span class="line">        // Register with the TargetData callbacks if we are expecting client to send them</span><br><span class="line">        if (!bShouldProduceTargetDataOnServer)</span><br><span class="line">        &#123;</span><br><span class="line">            //服务器，且依赖于客户端传输TargetData</span><br><span class="line"></span><br><span class="line">            FGameplayAbilitySpecHandle	SpecHandle = GetAbilitySpecHandle();</span><br><span class="line">            FPredictionKey ActivationPredictionKey = GetActivationPredictionKey();</span><br><span class="line">            </span><br><span class="line">            //进行回调注册</span><br><span class="line">            //Since multifire is supported, we still need to hook up the callbacks</span><br><span class="line">            ASC-&gt;AbilityTargetDataSetDelegate(SpecHandle, ActivationPredictionKey ).AddUObject(this, &amp;UAbilityTask_WaitTargetData::OnTargetDataReplicatedCallback);</span><br><span class="line">            ASC-&gt;AbilityTargetDataCancelledDelegate(SpecHandle, ActivationPredictionKey ).AddUObject(this, &amp;UAbilityTask_WaitTargetData::OnTargetDataReplicatedCancelledCallback);</span><br><span class="line"></span><br><span class="line">            //调用一次 如果数据已经准备好，会直接触发</span><br><span class="line">            ASC-&gt;CallReplicatedTargetDataDelegatesIfSet(SpecHandle, ActivationPredictionKey );</span><br><span class="line"></span><br><span class="line">            SetWaitingOnRemotePlayerData();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Valid TargetData was replicated to use (we are server, was sent from client) */</span><br><span class="line">void UAbilityTask_WaitTargetData::OnTargetDataReplicatedCallback(const FGameplayAbilityTargetDataHandle&amp; Data, FGameplayTag ActivationTag)</span><br><span class="line">&#123;</span><br><span class="line">    FGameplayAbilityTargetDataHandle MutableData = Data;</span><br><span class="line"></span><br><span class="line">    if (UAbilitySystemComponent* ASC = AbilitySystemComponent.Get())</span><br><span class="line">    &#123;</span><br><span class="line">        ASC-&gt;ConsumeClientReplicatedTargetData(GetAbilitySpecHandle(), GetActivationPredictionKey());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** </span><br><span class="line">    *  Call into the TargetActor to sanitize/verify the data. If this returns false, we are rejecting</span><br><span class="line">    *	the replicated target data and will treat this as a cancel.</span><br><span class="line">    *	</span><br><span class="line">    *	This can also be used for bandwidth optimizations. OnReplicatedTargetDataReceived could do an actual</span><br><span class="line">    *	trace/check/whatever server side and use that data. So rather than having the client send that data</span><br><span class="line">    *	explicitly, the client is basically just sending a &#x27;confirm&#x27; and the server is now going to do the work</span><br><span class="line">    *	in OnReplicatedTargetDataReceived.</span><br><span class="line">    */</span><br><span class="line">    //调用OnReplicatedTargetDataReceived</span><br><span class="line">    if (TargetActor &amp;&amp; !TargetActor-&gt;OnReplicatedTargetDataReceived(MutableData))</span><br><span class="line">    &#123;</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            Cancelled.Broadcast(MutableData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            ValidData.Broadcast(MutableData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ConfirmationType != EGameplayTargetingConfirmation::CustomMulti)</span><br><span class="line">    &#123;</span><br><span class="line">        EndTask();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Client canceled this Targeting Task (we are the server) */</span><br><span class="line">void UAbilityTask_WaitTargetData::OnTargetDataReplicatedCancelledCallback()</span><br><span class="line">&#123;</span><br><span class="line">    if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">    &#123;</span><br><span class="line">        Cancelled.Broadcast(FGameplayAbilityTargetDataHandle());</span><br><span class="line">    &#125;</span><br><span class="line">    EndTask();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** The TargetActor we spawned locally has called back with valid target data */</span><br><span class="line">void UAbilityTask_WaitTargetData::OnTargetDataReadyCallback(const FGameplayAbilityTargetDataHandle&amp; Data)</span><br><span class="line">&#123;</span><br><span class="line">    UAbilitySystemComponent* ASC = AbilitySystemComponent.Get();</span><br><span class="line">    if (!Ability || !ASC)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //预测窗口</span><br><span class="line">    FScopedPredictionWindow	ScopedPrediction(ASC, ShouldReplicateDataToServer());</span><br><span class="line"></span><br><span class="line">    const FGameplayAbilityActorInfo* Info = Ability-&gt;GetCurrentActorInfo();</span><br><span class="line">    if (IsPredictingClient())</span><br><span class="line">    &#123;</span><br><span class="line">        if (!TargetActor-&gt;ShouldProduceTargetDataOnServer)</span><br><span class="line">        &#123;</span><br><span class="line">            FGameplayTag ApplicationTag; // Fixme: where would this be useful?</span><br><span class="line">            //发送数据给服务器</span><br><span class="line">            ASC-&gt;CallServerSetReplicatedTargetData(GetAbilitySpecHandle(), GetActivationPredictionKey(), Data, ApplicationTag, ASC-&gt;ScopedPredictionKey);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (ConfirmationType == EGameplayTargetingConfirmation::UserConfirmed)</span><br><span class="line">        &#123;</span><br><span class="line">            // We aren&#x27;t going to send the target data, but we will send a generic confirmed message.</span><br><span class="line">            ASC-&gt;ServerSetReplicatedEvent(EAbilityGenericReplicatedEvent::GenericConfirm, GetAbilitySpecHandle(), GetActivationPredictionKey(), ASC-&gt;ScopedPredictionKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">    &#123;</span><br><span class="line">        ValidData.Broadcast(Data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ConfirmationType != EGameplayTargetingConfirmation::CustomMulti)</span><br><span class="line">    &#123;</span><br><span class="line">        EndTask();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** The TargetActor we spawned locally has called back with a cancel event (they still include the &#x27;last/best&#x27; targetdata but the consumer of this may want to discard it) */</span><br><span class="line">void UAbilityTask_WaitTargetData::OnTargetDataCancelledCallback(const FGameplayAbilityTargetDataHandle&amp; Data)</span><br><span class="line">&#123;</span><br><span class="line">    UAbilitySystemComponent* ASC = AbilitySystemComponent.Get();</span><br><span class="line">    if (!ASC)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FScopedPredictionWindow ScopedPrediction(ASC, IsPredictingClient());</span><br><span class="line"></span><br><span class="line">    if (IsPredictingClient())</span><br><span class="line">    &#123;</span><br><span class="line">        if (!TargetActor-&gt;ShouldProduceTargetDataOnServer)</span><br><span class="line">        &#123;</span><br><span class="line">            ASC-&gt;ServerSetReplicatedTargetDataCancelled(GetAbilitySpecHandle(), GetActivationPredictionKey(), ASC-&gt;ScopedPredictionKey );</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            // We aren&#x27;t going to send the target data, but we will send a generic confirmed message.</span><br><span class="line">            ASC-&gt;ServerSetReplicatedEvent(EAbilityGenericReplicatedEvent::GenericCancel, GetAbilitySpecHandle(), GetActivationPredictionKey(), ASC-&gt;ScopedPredictionKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Cancelled.Broadcast(Data);</span><br><span class="line">    EndTask();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Called when the ability is asked to confirm from an outside node. What this means depends on the individual task. By default, this does nothing other than ending if bEndTask is true. */</span><br><span class="line">void UAbilityTask_WaitTargetData::ExternalConfirm(bool bEndTask)</span><br><span class="line">&#123;</span><br><span class="line">    if (TargetActor)</span><br><span class="line">    &#123;</span><br><span class="line">        if (TargetActor-&gt;ShouldProduceTargetData())</span><br><span class="line">        &#123;</span><br><span class="line">            TargetActor-&gt;ConfirmTargetingAndContinue();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Super::ExternalConfirm(bEndTask);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Called when the ability is asked to confirm from an outside node. What this means depends on the individual task. By default, this does nothing other than ending if bEndTask is true. */</span><br><span class="line">void UAbilityTask_WaitTargetData::ExternalCancel()</span><br><span class="line">&#123;</span><br><span class="line">    if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">    &#123;</span><br><span class="line">        Cancelled.Broadcast(FGameplayAbilityTargetDataHandle());</span><br><span class="line">    &#125;</span><br><span class="line">    Super::ExternalCancel();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_WaitTargetData::OnDestroy(bool AbilityEnded)</span><br><span class="line">&#123;</span><br><span class="line">    if (TargetActor)</span><br><span class="line">    &#123;</span><br><span class="line">        TargetActor-&gt;Destroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Super::OnDestroy(AbilityEnded);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool UAbilityTask_WaitTargetData::ShouldReplicateDataToServer() const</span><br><span class="line">&#123;</span><br><span class="line">    if (!Ability || !TargetActor)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Send TargetData to the server IFF we are the client and this isn&#x27;t a GameplayTargetActor that can produce data on the server	</span><br><span class="line">    const FGameplayAbilityActorInfo* Info = Ability-&gt;GetCurrentActorInfo();</span><br><span class="line">    if (!Info-&gt;IsNetAuthority() &amp;&amp; !TargetActor-&gt;ShouldProduceTargetDataOnServer)</span><br><span class="line">    &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// --------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
        <tag>Lyra</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.5-Lyra-4-GATask-AGameplayAbilityTargetActor</title>
    <url>/2025/04/01/UE/Project/Lyra/UE55Lyra4/</url>
    <content><![CDATA[<h1 id="中间数据-GameplayAbilityTargetActor"><a href="#中间数据-GameplayAbilityTargetActor" class="headerlink" title="中间数据 GameplayAbilityTargetActor"></a>中间数据 GameplayAbilityTargetActor</h1><p>关于目标数据 以下是几个比较关键的类。<br>AGameplayAbilityTargetActor<br>委托：FAbilityTargetData<br>FGameplayAbilityTargetDataHandle<br>FGameplayAbilityTargetData<br>FGameplayEffectContextHandle<br>FGameplayEffectContext</p>
<p>总体上还是比较复杂的。从源码看起。</p>
<h2 id="AGameplayAbilityTargetActor"><a href="#AGameplayAbilityTargetActor" class="headerlink" title="AGameplayAbilityTargetActor"></a>AGameplayAbilityTargetActor</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * TargetActors are spawned to assist with ability targeting. They are spawned by ability tasks and create/determine the outgoing targeting data passed from one task to another</span><br><span class="line"> *</span><br><span class="line"> * WARNING: These actors are spawned once per ability activation and in their default form are not very efficient</span><br><span class="line"> * For most games you will need to subclass and heavily modify this actor, or you will want to implement similar functions in a game-specific actor or blueprint to avoid actor spawn costs</span><br><span class="line"> * This class is not well tested by internal games, but it is a useful class to look at to learn how target replication occurs</span><br><span class="line"> */</span><br><span class="line">UCLASS(Blueprintable, abstract, notplaceable)</span><br><span class="line">class GAMEPLAYABILITIES_API AGameplayAbilityTargetActor : public AActor</span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_UCLASS_BODY()</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    void EndPlay(const EEndPlayReason::Type EndPlayReason) override;</span><br><span class="line"></span><br><span class="line">    //无需客户端数据 客户端只需要提供[confirm]的指令即可</span><br><span class="line">    /** The TargetData this class produces can be entirely generated on the server. We don&#x27;t require the client to send us full or partial TargetData (possibly just a &#x27;confirm&#x27;) */</span><br><span class="line">    UPROPERTY(EditAnywhere, Category=Advanced)</span><br><span class="line">    bool ShouldProduceTargetDataOnServer;</span><br><span class="line"></span><br><span class="line">    /** Describes where the targeting action starts, usually the player character or a socket on the player character. */</span><br><span class="line">    //UPROPERTY(BlueprintReadOnly, meta=(ExposeOnSpawn=true), Category=Targeting)</span><br><span class="line">    UPROPERTY(BlueprintReadOnly, meta = (ExposeOnSpawn = true), Replicated, Category = Targeting)</span><br><span class="line">    FGameplayAbilityTargetingLocationInfo StartLocation;</span><br><span class="line"></span><br><span class="line">    /** Initialize and begin targeting logic  */</span><br><span class="line">    virtual void StartTargeting(UGameplayAbility* Ability);</span><br><span class="line"></span><br><span class="line">    virtual bool IsConfirmTargetingAllowed();</span><br><span class="line"></span><br><span class="line">    /** Requesting targeting data, but not necessarily stopping/destroying the task. Useful for external target data requests. */</span><br><span class="line">    virtual void ConfirmTargetingAndContinue();</span><br><span class="line"></span><br><span class="line">    /** Outside code is saying &#x27;stop and just give me what you have.&#x27; Returns true if the ability accepts this and can be forgotten. */</span><br><span class="line">    UFUNCTION()</span><br><span class="line">    virtual void ConfirmTargeting();</span><br><span class="line"></span><br><span class="line">    /** Outside code is saying &#x27;stop everything and just forget about it&#x27; */</span><br><span class="line">    UFUNCTION()</span><br><span class="line">    virtual void CancelTargeting();</span><br><span class="line"></span><br><span class="line">    virtual void BindToConfirmCancelInputs();</span><br><span class="line"></span><br><span class="line">    virtual bool ShouldProduceTargetData() const;</span><br><span class="line"></span><br><span class="line">    /** Replicated target data was received from a client. Possibly sanitize/verify. return true if data is good and we should broadcast it as valid data. */</span><br><span class="line">    virtual bool OnReplicatedTargetDataReceived(FGameplayAbilityTargetDataHandle&amp; Data) const;</span><br><span class="line"></span><br><span class="line">    // ------------------------------</span><br><span class="line"></span><br><span class="line">    FAbilityTargetData	TargetDataReadyDelegate;</span><br><span class="line">    FAbilityTargetData	CanceledDelegate;</span><br><span class="line"></span><br><span class="line">    virtual bool IsNetRelevantFor(const AActor* RealViewer, const AActor* ViewTarget, const FVector&amp; SrcLocation) const override;</span><br><span class="line"></span><br><span class="line">#if WITH_EDITOR</span><br><span class="line">    UE_DEPRECATED(5.1, &quot;This property is deprecated. Please use PrimaryPC instead.&quot;)</span><br><span class="line">    APlayerController* MasterPC;</span><br><span class="line">#endif // WITH_EDITOR</span><br><span class="line"></span><br><span class="line">    UPROPERTY(BlueprintReadOnly, Category = &quot;Targeting&quot;)</span><br><span class="line">    TObjectPtr&lt;APlayerController&gt; PrimaryPC;</span><br><span class="line"></span><br><span class="line">    UPROPERTY()</span><br><span class="line">    TObjectPtr&lt;UGameplayAbility&gt; OwningAbility;</span><br><span class="line"></span><br><span class="line">    UPROPERTY(BlueprintReadOnly, Replicated, Category = Targeting)</span><br><span class="line">    bool bDestroyOnConfirmation;</span><br><span class="line"></span><br><span class="line">    UPROPERTY(BlueprintReadOnly, Replicated, Category = Targeting)</span><br><span class="line">    TObjectPtr&lt;AActor&gt; SourceActor;</span><br><span class="line"></span><br><span class="line">    /** Parameters for world reticle. Usage of these parameters is dependent on the reticle. */</span><br><span class="line">    UPROPERTY(BlueprintReadWrite, meta = (ExposeOnSpawn = true), Category = Targeting)</span><br><span class="line">    FWorldReticleParameters ReticleParams;</span><br><span class="line"></span><br><span class="line">    /** Reticle that will appear on top of acquired targets. Reticles will be spawned/despawned as targets are acquired/lost. */</span><br><span class="line">    UPROPERTY(BlueprintReadWrite, EditAnywhere, meta = (ExposeOnSpawn = true), Category = Targeting)</span><br><span class="line">    TSubclassOf&lt;AGameplayAbilityWorldReticle&gt; ReticleClass;		//Using a special class for replication purposes.</span><br><span class="line"></span><br><span class="line">    UPROPERTY(BlueprintReadWrite, Replicated, meta = (ExposeOnSpawn = true), Category = Targeting)</span><br><span class="line">    FGameplayTargetDataFilterHandle Filter;</span><br><span class="line"></span><br><span class="line">    /** Draw the debug information (if applicable) for this targeting actor. */</span><br><span class="line">    UPROPERTY(BlueprintReadWrite, EditAnywhere, Replicated, meta = (ExposeOnSpawn = true), Category = Targeting)</span><br><span class="line">    bool bDebug;</span><br><span class="line"></span><br><span class="line">    FDelegateHandle GenericConfirmHandle;</span><br><span class="line">    FDelegateHandle GenericCancelHandle;</span><br><span class="line"></span><br><span class="line">    UPROPERTY()</span><br><span class="line">    TObjectPtr&lt;UAbilitySystemComponent&gt; GenericDelegateBoundASC;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include UE_INLINE_GENERATED_CPP_BY_NAME(GameplayAbilityTargetActor)</span><br><span class="line"></span><br><span class="line">// --------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">//</span><br><span class="line">//	AGameplayAbilityTargetActor</span><br><span class="line">//</span><br><span class="line">// --------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">AGameplayAbilityTargetActor::AGameplayAbilityTargetActor(const FObjectInitializer&amp; ObjectInitializer)</span><br><span class="line">	: Super(ObjectInitializer)</span><br><span class="line">&#123;</span><br><span class="line">    ShouldProduceTargetDataOnServer = false;</span><br><span class="line">    bDebug = false;</span><br><span class="line">    bDestroyOnConfirmation = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//AActor的EndPlay函数</span><br><span class="line">//Called whenever this actor is being removed from a level.</span><br><span class="line">void AGameplayAbilityTargetActor::EndPlay(const EEndPlayReason::Type EndPlayReason)</span><br><span class="line">&#123;</span><br><span class="line">    if (GenericDelegateBoundASC)</span><br><span class="line">    &#123;</span><br><span class="line">        // We must remove ourselves from GenericLocalConfirmCallbacks/GenericLocalCancelCallbacks, since while these are bound they will inhibit any *other* abilities</span><br><span class="line">        // that are bound to the same key.</span><br><span class="line"></span><br><span class="line">        UAbilitySystemComponent* UnboundASC = nullptr;</span><br><span class="line">        const FGameplayAbilityActorInfo* Info = (OwningAbility ? OwningAbility-&gt;GetCurrentActorInfo() : nullptr);</span><br><span class="line">        if (Info &amp;&amp; Info-&gt;IsLocallyControlled())</span><br><span class="line">        &#123;</span><br><span class="line">            UAbilitySystemComponent* ASC = Info-&gt;AbilitySystemComponent.Get();</span><br><span class="line">            if (ASC)</span><br><span class="line">            &#123;</span><br><span class="line">                //获取到对应的ASC（如果能获取到的话）</span><br><span class="line">                //移除对应的事件</span><br><span class="line">                ASC-&gt;GenericLocalConfirmCallbacks.RemoveDynamic(this, &amp;AGameplayAbilityTargetActor::ConfirmTargeting);</span><br><span class="line">                ASC-&gt;GenericLocalCancelCallbacks.RemoveDynamic(this, &amp;AGameplayAbilityTargetActor::CancelTargeting);</span><br><span class="line"></span><br><span class="line">                UnboundASC = ASC;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ensure(GenericDelegateBoundASC == UnboundASC); // Error checking that we have removed delegates from the same ASC we bound them to</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Super::EndPlay(EndPlayReason);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//声明需要复制的变量内容</span><br><span class="line">void AGameplayAbilityTargetActor::GetLifetimeReplicatedProps(TArray&lt; FLifetimeProperty &gt; &amp; OutLifetimeProps) const</span><br><span class="line">&#123;</span><br><span class="line">    Super::GetLifetimeReplicatedProps(OutLifetimeProps);</span><br><span class="line"></span><br><span class="line">    //复制变量</span><br><span class="line">    DOREPLIFETIME(AGameplayAbilityTargetActor, StartLocation);</span><br><span class="line">    DOREPLIFETIME(AGameplayAbilityTargetActor, SourceActor);</span><br><span class="line">    DOREPLIFETIME(AGameplayAbilityTargetActor, bDebug);</span><br><span class="line">    DOREPLIFETIME(AGameplayAbilityTargetActor, bDestroyOnConfirmation);</span><br><span class="line">    //非复制内容</span><br><span class="line">    DISABLE_REPLICATED_PROPERTY(AGameplayAbilityTargetActor, Filter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void AGameplayAbilityTargetActor::StartTargeting(UGameplayAbility* Ability)</span><br><span class="line">&#123;</span><br><span class="line">    OwningAbility = Ability;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool AGameplayAbilityTargetActor::IsConfirmTargetingAllowed()</span><br><span class="line">&#123;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void AGameplayAbilityTargetActor::ConfirmTargetingAndContinue()</span><br><span class="line">&#123;</span><br><span class="line">    check(ShouldProduceTargetData());</span><br><span class="line">    if (IsConfirmTargetingAllowed())</span><br><span class="line">    &#123;</span><br><span class="line">        //这里依据需求 创建对应的Handle并进行广播</span><br><span class="line">        //可以参考其他示例</span><br><span class="line">        TargetDataReadyDelegate.Broadcast(FGameplayAbilityTargetDataHandle());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void AGameplayAbilityTargetActor::ConfirmTargeting()</span><br><span class="line">&#123;</span><br><span class="line">    const FGameplayAbilityActorInfo* ActorInfo = (OwningAbility ? OwningAbility-&gt;GetCurrentActorInfo() : nullptr);</span><br><span class="line">    UAbilitySystemComponent* ASC = (ActorInfo ? ActorInfo-&gt;AbilitySystemComponent.Get() : nullptr);</span><br><span class="line">    if (ASC)</span><br><span class="line">    &#123;</span><br><span class="line">        //移除侦听</span><br><span class="line">        ASC-&gt;AbilityReplicatedEventDelegate(EAbilityGenericReplicatedEvent::GenericConfirm, OwningAbility-&gt;GetCurrentAbilitySpecHandle(), OwningAbility-&gt;GetCurrentActivationInfo().GetActivationPredictionKey() ).Remove(GenericConfirmHandle);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        ABILITY_LOG(Warning, TEXT(&quot;AGameplayAbilityTargetActor::ConfirmTargeting called with null Ability/ASC! Actor %s&quot;), *GetName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (IsConfirmTargetingAllowed())</span><br><span class="line">    &#123;</span><br><span class="line">        //执行逻辑</span><br><span class="line">        ConfirmTargetingAndContinue();</span><br><span class="line">        if (bDestroyOnConfirmation)</span><br><span class="line">        &#123;</span><br><span class="line">            Destroy();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** Outside code is saying &#x27;stop everything and just forget about it&#x27; */</span><br><span class="line">void AGameplayAbilityTargetActor::CancelTargeting()</span><br><span class="line">&#123;</span><br><span class="line">    const FGameplayAbilityActorInfo* ActorInfo = (OwningAbility ? OwningAbility-&gt;GetCurrentActorInfo() : nullptr);</span><br><span class="line">    UAbilitySystemComponent* ASC = (ActorInfo ? ActorInfo-&gt;AbilitySystemComponent.Get() : nullptr);</span><br><span class="line">    if (ASC)</span><br><span class="line">    &#123;</span><br><span class="line">        //移除侦听</span><br><span class="line">        ASC-&gt;AbilityReplicatedEventDelegate(EAbilityGenericReplicatedEvent::GenericCancel, OwningAbility-&gt;GetCurrentAbilitySpecHandle(), OwningAbility-&gt;GetCurrentActivationInfo().GetActivationPredictionKey() ).Remove(GenericCancelHandle);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        ABILITY_LOG(Warning, TEXT(&quot;AGameplayAbilityTargetActor::CancelTargeting called with null ASC! Actor %s&quot;), *GetName());</span><br><span class="line">    &#125;</span><br><span class="line">    //广播</span><br><span class="line">    CanceledDelegate.Broadcast(FGameplayAbilityTargetDataHandle());</span><br><span class="line">    Destroy();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//这里可以看到AActor里面相关的介绍。</span><br><span class="line">//是否关联 并需要复制 - AOI/预测等</span><br><span class="line">bool AGameplayAbilityTargetActor::IsNetRelevantFor(const AActor* RealViewer, const AActor* ViewTarget, const FVector&amp; SrcLocation) const</span><br><span class="line">&#123;</span><br><span class="line">    //The player who created the ability doesn&#x27;t need to be updated about it - there should be local prediction in place.</span><br><span class="line">    if (RealViewer == PrimaryPC)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const FGameplayAbilityActorInfo* ActorInfo = (OwningAbility ? OwningAbility-&gt;GetCurrentActorInfo() : NULL);</span><br><span class="line">    AActor* Avatar = (ActorInfo ? ActorInfo-&gt;AvatarActor.Get() : NULL);</span><br><span class="line"></span><br><span class="line">    //使用Ability来定</span><br><span class="line">    if (Avatar)</span><br><span class="line">    &#123;</span><br><span class="line">        return Avatar-&gt;IsNetRelevantFor(RealViewer, ViewTarget, SrcLocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return Super::IsNetRelevantFor(RealViewer, ViewTarget, SrcLocation);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//处理收到的数据</span><br><span class="line">//验证有效性，合理性等。结合GATask_WaitTargetData来看。</span><br><span class="line">bool AGameplayAbilityTargetActor::OnReplicatedTargetDataReceived(FGameplayAbilityTargetDataHandle&amp; Data) const</span><br><span class="line">&#123;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool AGameplayAbilityTargetActor::ShouldProduceTargetData() const</span><br><span class="line">&#123;</span><br><span class="line">    // return true if we are locally owned, or (we are the server and this is a gameplaytarget ability that can produce target data server side)</span><br><span class="line">    return (PrimaryPC &amp;&amp; PrimaryPC-&gt;IsLocalController()) || ShouldProduceTargetDataOnServer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void AGameplayAbilityTargetActor::BindToConfirmCancelInputs()</span><br><span class="line">&#123;</span><br><span class="line">    check(OwningAbility);</span><br><span class="line"></span><br><span class="line">    const FGameplayAbilityActorInfo* const Info = OwningAbility-&gt;GetCurrentActorInfo();</span><br><span class="line">    UAbilitySystemComponent* const ASC = Info-&gt;AbilitySystemComponent.Get();</span><br><span class="line">    if (ASC)</span><br><span class="line">    &#123;</span><br><span class="line">        //本地情况</span><br><span class="line">        if (Info-&gt;IsLocallyControlled())</span><br><span class="line">        &#123;</span><br><span class="line">            //添加侦听</span><br><span class="line">            // We have to wait for the callback from the AbilitySystemComponent. Which will always be instigated locally</span><br><span class="line">            ASC-&gt;GenericLocalConfirmCallbacks.AddDynamic(this, &amp;AGameplayAbilityTargetActor::ConfirmTargeting);	// Tell me if the confirm input is pressed</span><br><span class="line">            ASC-&gt;GenericLocalCancelCallbacks.AddDynamic(this, &amp;AGameplayAbilityTargetActor::CancelTargeting);	// Tell me if the cancel input is pressed</span><br><span class="line"></span><br><span class="line">            // Save off which ASC we bound so that we can error check that we&#x27;re removing them later</span><br><span class="line">            GenericDelegateBoundASC = ASC;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;	</span><br><span class="line">            //服务端情况</span><br><span class="line">            FGameplayAbilitySpecHandle Handle = OwningAbility-&gt;GetCurrentAbilitySpecHandle();</span><br><span class="line">            FPredictionKey PredKey = OwningAbility-&gt;GetCurrentActivationInfo().GetActivationPredictionKey();</span><br><span class="line">            </span><br><span class="line">            //添加对应的侦听</span><br><span class="line">            GenericConfirmHandle = ASC-&gt;AbilityReplicatedEventDelegate(EAbilityGenericReplicatedEvent::GenericConfirm, Handle, PredKey ).AddUObject(this, &amp;AGameplayAbilityTargetActor::ConfirmTargeting);</span><br><span class="line">            GenericCancelHandle = ASC-&gt;AbilityReplicatedEventDelegate(EAbilityGenericReplicatedEvent::GenericCancel, Handle, PredKey ).AddUObject(this, &amp;AGameplayAbilityTargetActor::CancelTargeting);</span><br><span class="line">            </span><br><span class="line">            //尝试调用</span><br><span class="line">            if (ASC-&gt;CallReplicatedEventDelegateIfSet(EAbilityGenericReplicatedEvent::GenericConfirm, Handle, PredKey))</span><br><span class="line">            &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            if (ASC-&gt;CallReplicatedEventDelegateIfSet(EAbilityGenericReplicatedEvent::GenericCancel, Handle, PredKey))</span><br><span class="line">            &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FAbilityTargetData与FGameplayAbilityTargetDataHandle"><a href="#FAbilityTargetData与FGameplayAbilityTargetDataHandle" class="headerlink" title="FAbilityTargetData与FGameplayAbilityTargetDataHandle"></a>FAbilityTargetData与FGameplayAbilityTargetDataHandle</h2><p>&#x2F;&#x2F;看到FAbilityTargetData委托的声明:<br>&#x2F;** Generic callback for returning when target data is available *&#x2F;<br>DECLARE_MULTICAST_DELEGATE_OneParam(FAbilityTargetData, const FGameplayAbilityTargetDataHandle&amp;);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">*	Handle for Targeting Data. This servers two main purposes:</span><br><span class="line">*		-Avoid us having to copy around the full targeting data structure in Blueprints//避免复制完整的数据</span><br><span class="line">*		-Allows us to leverage polymorphism in the target data structure//在目标数据结构中充分利用多态性</span><br><span class="line">*		-Allows us to implement NetSerialize and replicate by value between clients/server//网络序列化</span><br><span class="line">*</span><br><span class="line">*		-Avoid using UObjects could be used to give us polymorphism and by reference passing in blueprints.</span><br><span class="line">*		-However we would still be screwed when it came to replication</span><br><span class="line">*</span><br><span class="line">*		-Replication by value//值复制</span><br><span class="line">*		-Pass by reference in blueprints//蓝图引用传递</span><br><span class="line">*		-Polymophism in TargetData structure//目标数据结构的多态性</span><br><span class="line">*/</span><br><span class="line">USTRUCT(BlueprintType)</span><br><span class="line">struct GAMEPLAYABILITIES_API FGameplayAbilityTargetDataHandle</span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_USTRUCT_BODY()</span><br><span class="line"></span><br><span class="line">    FGameplayAbilityTargetDataHandle() &#123; &#125;</span><br><span class="line">    FGameplayAbilityTargetDataHandle(FGameplayAbilityTargetData* DataPtr)</span><br><span class="line">    &#123;</span><br><span class="line">        Data.Add(TSharedPtr&lt;FGameplayAbilityTargetData&gt;(DataPtr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FGameplayAbilityTargetDataHandle(FGameplayAbilityTargetDataHandle&amp;&amp; Other) : UniqueId(Other.UniqueId), Data(MoveTemp(Other.Data))	&#123; &#125;</span><br><span class="line">    FGameplayAbilityTargetDataHandle(const FGameplayAbilityTargetDataHandle&amp; Other) : UniqueId(Other.UniqueId), Data(Other.Data) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    FGameplayAbilityTargetDataHandle&amp; operator=(FGameplayAbilityTargetDataHandle&amp;&amp; Other) &#123; UniqueId = Other.UniqueId; Data = MoveTemp(Other.Data); return *this; &#125;</span><br><span class="line">    FGameplayAbilityTargetDataHandle&amp; operator=(const FGameplayAbilityTargetDataHandle&amp; Other) &#123; UniqueId = Other.UniqueId; Data = Other.Data; return *this; &#125;</span><br><span class="line"></span><br><span class="line">    uint8 UniqueId = 0;</span><br><span class="line"></span><br><span class="line">    /** Raw storage of target data, do not modify this directly */</span><br><span class="line">    TArray&lt;TSharedPtr&lt;FGameplayAbilityTargetData&gt;, TInlineAllocator&lt;1&gt; &gt;	Data;</span><br><span class="line"></span><br><span class="line">    /** Resets handle to have no targets */</span><br><span class="line">    void Clear()</span><br><span class="line">    &#123;</span><br><span class="line">        Data.Reset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** Returns number of target data, not number of actors/targets as target data may contain multiple actors */</span><br><span class="line">    int32 Num() const</span><br><span class="line">    &#123;</span><br><span class="line">        return Data.Num();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** Returns true if there are any valid targets */</span><br><span class="line">    bool IsValid(int32 Index) const</span><br><span class="line">    &#123;</span><br><span class="line">        return (Index &lt; Data.Num() &amp;&amp; Data[Index].IsValid());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** Returns data at index, or nullptr if invalid */</span><br><span class="line">    const FGameplayAbilityTargetData* Get(int32 Index) const</span><br><span class="line">    &#123;</span><br><span class="line">        return IsValid(Index) ? Data[Index].Get() : nullptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** Returns data at index, or nullptr if invalid */</span><br><span class="line">    FGameplayAbilityTargetData* Get(int32 Index)</span><br><span class="line">    &#123;</span><br><span class="line">        return IsValid(Index) ? Data[Index].Get() : nullptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** Adds a new target data to handle, it must have been created with new */</span><br><span class="line">    void Add(FGameplayAbilityTargetData* DataPtr)</span><br><span class="line">    &#123;</span><br><span class="line">        Data.Add(TSharedPtr&lt;FGameplayAbilityTargetData&gt;(DataPtr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** Does a shallow copy of target data from one handle to another */</span><br><span class="line">    void Append(const FGameplayAbilityTargetDataHandle&amp; OtherHandle)</span><br><span class="line">    &#123;</span><br><span class="line">        Data.Append(OtherHandle.Data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** Serialize for networking, handles polymorphism */</span><br><span class="line">    bool NetSerialize(FArchive&amp; Ar, class UPackageMap* Map, bool&amp; bOutSuccess);</span><br><span class="line"></span><br><span class="line">    /** Comparison operator */</span><br><span class="line">    bool operator==(const FGameplayAbilityTargetDataHandle&amp; Other) const</span><br><span class="line">    &#123;</span><br><span class="line">        // Both invalid structs or both valid and Pointer compare (???) // deep comparison equality</span><br><span class="line">        if (Data.Num() != Other.Data.Num())</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int32 i = 0; i &lt; Data.Num(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            if (Data[i].IsValid() != Other.Data[i].IsValid())</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            if (Data[i].Get() != Other.Data[i].Get())</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** Comparison operator */</span><br><span class="line">    bool operator!=(const FGameplayAbilityTargetDataHandle&amp; Other) const</span><br><span class="line">    &#123;</span><br><span class="line">        return !(FGameplayAbilityTargetDataHandle::operator==(Other));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
        <tag>Lyra</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.5-Lyra-5-GATask-传输数据流程</title>
    <url>/2025/04/04/UE/Project/Lyra/UE55Lyra5/</url>
    <content><![CDATA[<h1 id="GATask-WaitTargetData"><a href="#GATask-WaitTargetData" class="headerlink" title="GATask_WaitTargetData"></a>GATask_WaitTargetData</h1><p>以WaitTargetData为例子<br>理解TargetActor的使用流程和逻辑</p>
<h2 id="客户端传输数据情况"><a href="#客户端传输数据情况" class="headerlink" title="客户端传输数据情况"></a>客户端传输数据情况</h2><h3 id="Client侧"><a href="#Client侧" class="headerlink" title="Client侧"></a>Client侧</h3><p>p1</p>
<img src="/2025/04/04/UE/Project/Lyra/UE55Lyra5/p1.png" class="">
<p>p2</p>
<img src="/2025/04/04/UE/Project/Lyra/UE55Lyra5/p2.png" class="">
<p>p3</p>
<img src="/2025/04/04/UE/Project/Lyra/UE55Lyra5/p3.png" class="">
<h3 id="Server侧"><a href="#Server侧" class="headerlink" title="Server侧"></a>Server侧</h3><p>p4</p>
<img src="/2025/04/04/UE/Project/Lyra/UE55Lyra5/p4.png" class="">
<p>p5</p>
<img src="/2025/04/04/UE/Project/Lyra/UE55Lyra5/p5.png" class="">

<h2 id="服务端自己产生数据情况"><a href="#服务端自己产生数据情况" class="headerlink" title="服务端自己产生数据情况"></a>服务端自己产生数据情况</h2><p>这里以对应AGameplayAbilityTargetActor_Radius作为例子<br>p6</p>
<img src="/2025/04/04/UE/Project/Lyra/UE55Lyra5/p6.png" class="">]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
        <tag>Lyra</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.5-Lyra-6-MeleeAttack</title>
    <url>/2025/04/06/UE/Project/Lyra/UE55Lyra6/</url>
    <content><![CDATA[<p>学习目标：<br>近战攻击的实现和检测<br>这里还是以Lyra的近战攻击行为GA_Melee作为样例来学习。<br>同时参考项目ActionRPG。<br>ActionRPG本来是虚幻4的项目，网上有UE5的适配版本。以此作为学习的样本。不过，GAS在虚幻4到虚幻5之间还是有较大的改动的。学习的时候还是多想想，多看看。</p>
<h1 id="前言和方法"><a href="#前言和方法" class="headerlink" title="前言和方法"></a>前言和方法</h1><p>GATask的静态工厂函数并不会直接在蓝图中调用。（Rider）里面可以看到显示为“没有蓝图用法”。而是会走蓝图的包一层去实现。正如宏里面meta声明的<code>BlueprintInternalUseOnly = &quot;TRUE&quot;</code>一样。</p>
<p>要搜索蓝图中的用法 可以在编辑器中使用Tools -&gt; Find in Blueprints来查找对应的应用方法。</p>
<p>要查找资产引用，可以右键对应的资产，看到ReferenceViewer。</p>
<h1 id="GATask-PlayMontageAndWait"><a href="#GATask-PlayMontageAndWait" class="headerlink" title="GATask_PlayMontageAndWait"></a>GATask_PlayMontageAndWait</h1><p>首先还是看到蒙太奇的播放</p>
<h2 id="PlayMontageAndWait源码"><a href="#PlayMontageAndWait源码" class="headerlink" title="PlayMontageAndWait源码"></a>PlayMontageAndWait源码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">DECLARE_DYNAMIC_MULTICAST_DELEGATE(FMontageWaitSimpleDelegate);</span><br><span class="line"></span><br><span class="line">/** Ability task to simply play a montage. Many games will want to make a modified version of this task that looks for game-specific events */</span><br><span class="line">UCLASS()</span><br><span class="line">class GAMEPLAYABILITIES_API UAbilityTask_PlayMontageAndWait : public UAbilityTask</span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_BODY()</span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FMontageWaitSimpleDelegate	OnCompleted;</span><br><span class="line"></span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FMontageWaitSimpleDelegate	OnBlendedIn;</span><br><span class="line"></span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FMontageWaitSimpleDelegate	OnBlendOut;</span><br><span class="line"></span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FMontageWaitSimpleDelegate	OnInterrupted;</span><br><span class="line"></span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FMontageWaitSimpleDelegate	OnCancelled;</span><br><span class="line"></span><br><span class="line">    UFUNCTION()</span><br><span class="line">    void OnMontageBlendedIn(UAnimMontage* Montage);</span><br><span class="line"></span><br><span class="line">    UFUNCTION()</span><br><span class="line">    void OnMontageBlendingOut(UAnimMontage* Montage, bool bInterrupted);</span><br><span class="line"></span><br><span class="line">    UE_DEPRECATED(5.3, &quot;Please use OnGameplayAbilityCancelled instead. This function naming implied the Montage was already interrupted (instead, we are about to interrupt it).&quot;)</span><br><span class="line">    UFUNCTION()</span><br><span class="line">    void OnMontageInterrupted();</span><br><span class="line"></span><br><span class="line">    /** Callback function for when the owning Gameplay Ability is cancelled */</span><br><span class="line">    UFUNCTION()</span><br><span class="line">    void OnGameplayAbilityCancelled();</span><br><span class="line"></span><br><span class="line">    UFUNCTION()</span><br><span class="line">    void OnMontageEnded(UAnimMontage* Montage, bool bInterrupted);</span><br><span class="line"></span><br><span class="line">    /** </span><br><span class="line">        * Start playing an animation montage on the avatar actor and wait for it to finish</span><br><span class="line">        * If StopWhenAbilityEnds is true, this montage will be aborted if the ability ends normally. It is always stopped when the ability is explicitly cancelled.</span><br><span class="line">        * On normal execution, OnBlendOut is called when the montage is blending out, and OnCompleted when it is completely done playing</span><br><span class="line">        * OnInterrupted is called if another montage overwrites this, and OnCancelled is called if the ability or task is cancelled</span><br><span class="line">        *</span><br><span class="line">        * @param TaskInstanceName Set to override the name of this task, for later querying</span><br><span class="line">        * @param MontageToPlay The montage to play on the character</span><br><span class="line">        * @param Rate Change to play the montage faster or slower</span><br><span class="line">        * @param StartSection If not empty, named montage section to start from</span><br><span class="line">        * @param bStopWhenAbilityEnds If true, this montage will be aborted if the ability ends normally. It is always stopped when the ability is explicitly cancelled</span><br><span class="line">        * @param AnimRootMotionTranslationScale Change to modify size of root motion or set to 0 to block it entirely</span><br><span class="line">        * @param StartTimeSeconds Starting time offset in montage, this will be overridden by StartSection if that is also set</span><br><span class="line">        * @param bAllowInterruptAfterBlendOut If true, you can receive OnInterrupted after an OnBlendOut started (otherwise OnInterrupted will not fire when interrupted, but you will not get OnComplete).</span><br><span class="line">        */</span><br><span class="line">    UFUNCTION(BlueprintCallable, Category=&quot;Ability|Tasks&quot;, meta = (DisplayName=&quot;PlayMontageAndWait&quot;,</span><br><span class="line">        HidePin = &quot;OwningAbility&quot;, DefaultToSelf = &quot;OwningAbility&quot;, BlueprintInternalUseOnly = &quot;TRUE&quot;))</span><br><span class="line">    static UAbilityTask_PlayMontageAndWait* CreatePlayMontageAndWaitProxy(UGameplayAbility* OwningAbility,</span><br><span class="line">        FName TaskInstanceName, UAnimMontage* MontageToPlay, float Rate = 1.f, FName StartSection = NAME_None, bool bStopWhenAbilityEnds = true, float AnimRootMotionTranslationScale = 1.f, float StartTimeSeconds = 0.f, bool bAllowInterruptAfterBlendOut = false);</span><br><span class="line"></span><br><span class="line">    virtual void Activate() override;</span><br><span class="line"></span><br><span class="line">    /** Called when the ability is asked to cancel from an outside node. What this means depends on the individual task. By default, this does nothing other than ending the task. */</span><br><span class="line">    virtual void ExternalCancel() override;</span><br><span class="line"></span><br><span class="line">    virtual FString GetDebugString() const override;</span><br><span class="line"></span><br><span class="line">protected:</span><br><span class="line"></span><br><span class="line">    virtual void OnDestroy(bool AbilityEnded) override;</span><br><span class="line"></span><br><span class="line">    /** Checks if the ability is playing a montage and stops that montage, returns true if a montage was stopped, false if not. */</span><br><span class="line">    bool StopPlayingMontage();</span><br><span class="line"></span><br><span class="line">    FOnMontageBlendedInEnded BlendedInDelegate;</span><br><span class="line">    FOnMontageBlendingOutStarted BlendingOutDelegate;</span><br><span class="line">    FOnMontageEnded MontageEndedDelegate;</span><br><span class="line">    FDelegateHandle InterruptedHandle;</span><br><span class="line"></span><br><span class="line">    UPROPERTY()</span><br><span class="line">    TObjectPtr&lt;UAnimMontage&gt; MontageToPlay;</span><br><span class="line"></span><br><span class="line">    UPROPERTY()</span><br><span class="line">    float Rate;</span><br><span class="line"></span><br><span class="line">    UPROPERTY()</span><br><span class="line">    FName StartSection;</span><br><span class="line"></span><br><span class="line">    UPROPERTY()</span><br><span class="line">    float AnimRootMotionTranslationScale;</span><br><span class="line"></span><br><span class="line">    UPROPERTY()</span><br><span class="line">    float StartTimeSeconds;</span><br><span class="line"></span><br><span class="line">    UPROPERTY()</span><br><span class="line">    bool bStopWhenAbilityEnds;</span><br><span class="line"></span><br><span class="line">    UPROPERTY()</span><br><span class="line">    bool bAllowInterruptAfterBlendOut;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#include UE_INLINE_GENERATED_CPP_BY_NAME(AbilityTask_PlayMontageAndWait)</span><br><span class="line"></span><br><span class="line">static bool GUseAggressivePlayMontageAndWaitEndTask = true;</span><br><span class="line">static FAutoConsoleVariableRef CVarAggressivePlayMontageAndWaitEndTask(TEXT(&quot;AbilitySystem.PlayMontage.AggressiveEndTask&quot;), GUseAggressivePlayMontageAndWaitEndTask, TEXT(&quot;This should be set to true in order to avoid multiple callbacks off an AbilityTask_PlayMontageAndWait node&quot;));</span><br><span class="line"></span><br><span class="line">static bool GPlayMontageAndWaitFireInterruptOnAnimEndInterrupt = true;</span><br><span class="line">static FAutoConsoleVariableRef CVarPlayMontageAndWaitFireInterruptOnAnimEndInterrupt(TEXT(&quot;AbilitySystem.PlayMontage.FireInterruptOnAnimEndInterrupt&quot;), GPlayMontageAndWaitFireInterruptOnAnimEndInterrupt, TEXT(&quot;This is a fix that will cause AbilityTask_PlayMontageAndWait to fire its Interrupt event if the underlying AnimInstance ends in an interrupted&quot;));</span><br><span class="line"></span><br><span class="line">void UAbilityTask_PlayMontageAndWait::OnMontageBlendingOut(UAnimMontage* Montage, bool bInterrupted)</span><br><span class="line">&#123;</span><br><span class="line">    const bool bPlayingThisMontage = (Montage == MontageToPlay) &amp;&amp; Ability &amp;&amp; Ability-&gt;GetCurrentMontage() == MontageToPlay;</span><br><span class="line">    if (bPlayingThisMontage)</span><br><span class="line">    &#123;</span><br><span class="line">        // Reset AnimRootMotionTranslationScale</span><br><span class="line">        ACharacter* Character = Cast&lt;ACharacter&gt;(GetAvatarActor());</span><br><span class="line">        if (Character &amp;&amp; (Character-&gt;GetLocalRole() == ROLE_Authority ||</span><br><span class="line">                            (Character-&gt;GetLocalRole() == ROLE_AutonomousProxy &amp;&amp; Ability-&gt;GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted)))</span><br><span class="line">        &#123;</span><br><span class="line">            Character-&gt;SetAnimRootMotionTranslationScale(1.f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (bPlayingThisMontage &amp;&amp; (bInterrupted || !bAllowInterruptAfterBlendOut))</span><br><span class="line">    &#123;</span><br><span class="line">        if (UAbilitySystemComponent* ASC = AbilitySystemComponent.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            ASC-&gt;ClearAnimatingAbility(Ability);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">    &#123;</span><br><span class="line">        if (bInterrupted)</span><br><span class="line">        &#123;</span><br><span class="line">            bAllowInterruptAfterBlendOut = false;</span><br><span class="line">            OnInterrupted.Broadcast();</span><br><span class="line"></span><br><span class="line">            if (GUseAggressivePlayMontageAndWaitEndTask)</span><br><span class="line">            &#123;</span><br><span class="line">                EndTask();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            OnBlendOut.Broadcast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_PlayMontageAndWait::OnMontageBlendedIn(UAnimMontage* Montage)</span><br><span class="line">&#123;</span><br><span class="line">    if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">    &#123;</span><br><span class="line">        OnBlendedIn.Broadcast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_PlayMontageAndWait::OnMontageInterrupted()</span><br><span class="line">&#123;</span><br><span class="line">    // Call the new function</span><br><span class="line">    OnGameplayAbilityCancelled();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_PlayMontageAndWait::OnGameplayAbilityCancelled()</span><br><span class="line">&#123;</span><br><span class="line">    if (StopPlayingMontage() || bAllowInterruptAfterBlendOut)</span><br><span class="line">    &#123;</span><br><span class="line">        // Let the BP handle the interrupt as well</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            bAllowInterruptAfterBlendOut = false;</span><br><span class="line">            OnInterrupted.Broadcast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (GUseAggressivePlayMontageAndWaitEndTask)</span><br><span class="line">    &#123;</span><br><span class="line">        EndTask();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_PlayMontageAndWait::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted)</span><br><span class="line">&#123;</span><br><span class="line">    if (!bInterrupted)</span><br><span class="line">    &#123;</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            OnCompleted.Broadcast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(bAllowInterruptAfterBlendOut &amp;&amp; GPlayMontageAndWaitFireInterruptOnAnimEndInterrupt)</span><br><span class="line">    &#123;</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            OnInterrupted.Broadcast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EndTask();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UAbilityTask_PlayMontageAndWait* UAbilityTask_PlayMontageAndWait::CreatePlayMontageAndWaitProxy(UGameplayAbility* OwningAbility,</span><br><span class="line">    FName TaskInstanceName, UAnimMontage *MontageToPlay, float Rate, FName StartSection, bool bStopWhenAbilityEnds, float AnimRootMotionTranslationScale, float StartTimeSeconds, bool bAllowInterruptAfterBlendOut)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    UAbilitySystemGlobals::NonShipping_ApplyGlobalAbilityScaler_Rate(Rate);</span><br><span class="line"></span><br><span class="line">    //创建对应的对象</span><br><span class="line">    UAbilityTask_PlayMontageAndWait* MyObj = NewAbilityTask&lt;UAbilityTask_PlayMontageAndWait&gt;(OwningAbility, TaskInstanceName);</span><br><span class="line">    //设置参数</span><br><span class="line">    MyObj-&gt;MontageToPlay = MontageToPlay;</span><br><span class="line">    MyObj-&gt;Rate = Rate;</span><br><span class="line">    MyObj-&gt;StartSection = StartSection;</span><br><span class="line">    MyObj-&gt;AnimRootMotionTranslationScale = AnimRootMotionTranslationScale;</span><br><span class="line">    MyObj-&gt;bStopWhenAbilityEnds = bStopWhenAbilityEnds;</span><br><span class="line">    MyObj-&gt;bAllowInterruptAfterBlendOut = bAllowInterruptAfterBlendOut;</span><br><span class="line">    MyObj-&gt;StartTimeSeconds = StartTimeSeconds;</span><br><span class="line"></span><br><span class="line">    return MyObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_PlayMontageAndWait::Activate()</span><br><span class="line">&#123;</span><br><span class="line">    if (Ability == nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool bPlayedMontage = false;</span><br><span class="line"></span><br><span class="line">    if (UAbilitySystemComponent* ASC = AbilitySystemComponent.Get())</span><br><span class="line">    &#123;</span><br><span class="line">        const FGameplayAbilityActorInfo* ActorInfo = Ability-&gt;GetCurrentActorInfo();</span><br><span class="line">        //获取动画实例</span><br><span class="line">        //内部通过SkeletalMeshComponent来获取</span><br><span class="line">        UAnimInstance* AnimInstance = ActorInfo-&gt;GetAnimInstance();</span><br><span class="line">        if (AnimInstance != nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            //使用ASC来播放蒙太奇 ASC内部处理网络复制与预测</span><br><span class="line">            //AnimInstance播放失败时返回值为0.f</span><br><span class="line">            if (ASC-&gt;PlayMontage(Ability, Ability-&gt;GetCurrentActivationInfo(), MontageToPlay, Rate, StartSection, StartTimeSeconds) &gt; 0.f)</span><br><span class="line">            &#123;</span><br><span class="line">                // Playing a montage could potentially fire off a callback into game code which could kill this ability! Early out if we are pending kill.</span><br><span class="line"></span><br><span class="line">                //确认当前有效性</span><br><span class="line">                if (ShouldBroadcastAbilityTaskDelegates() == false)</span><br><span class="line">                &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //相关事件的侦听注册</span><br><span class="line">                InterruptedHandle = Ability-&gt;OnGameplayAbilityCancelled.AddUObject(this, &amp;UAbilityTask_PlayMontageAndWait::OnGameplayAbilityCancelled);</span><br><span class="line"></span><br><span class="line">                BlendedInDelegate.BindUObject(this, &amp;UAbilityTask_PlayMontageAndWait::OnMontageBlendedIn);</span><br><span class="line">                AnimInstance-&gt;Montage_SetBlendedInDelegate(BlendedInDelegate, MontageToPlay);</span><br><span class="line"></span><br><span class="line">                BlendingOutDelegate.BindUObject(this, &amp;UAbilityTask_PlayMontageAndWait::OnMontageBlendingOut);</span><br><span class="line">                AnimInstance-&gt;Montage_SetBlendingOutDelegate(BlendingOutDelegate, MontageToPlay);</span><br><span class="line"></span><br><span class="line">                MontageEndedDelegate.BindUObject(this, &amp;UAbilityTask_PlayMontageAndWait::OnMontageEnded);</span><br><span class="line">                AnimInstance-&gt;Montage_SetEndDelegate(MontageEndedDelegate, MontageToPlay);</span><br><span class="line"></span><br><span class="line">                ACharacter* Character = Cast&lt;ACharacter&gt;(GetAvatarActor());</span><br><span class="line">                //服务端/本地客户端预测</span><br><span class="line">                if (Character &amp;&amp; (Character-&gt;GetLocalRole() == ROLE_Authority ||</span><br><span class="line">                                    (Character-&gt;GetLocalRole() == ROLE_AutonomousProxy &amp;&amp; Ability-&gt;GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted)))</span><br><span class="line">                &#123;</span><br><span class="line">                    //RootMotion参数设置</span><br><span class="line">                    Character-&gt;SetAnimRootMotionTranslationScale(AnimRootMotionTranslationScale);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                bPlayedMontage = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            ABILITY_LOG(Warning, TEXT(&quot;UAbilityTask_PlayMontageAndWait call to PlayMontage failed!&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        ABILITY_LOG(Warning, TEXT(&quot;UAbilityTask_PlayMontageAndWait called on invalid AbilitySystemComponent&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!bPlayedMontage)</span><br><span class="line">    &#123;</span><br><span class="line">        ABILITY_LOG(Warning, TEXT(&quot;UAbilityTask_PlayMontageAndWait called in Ability %s failed to play montage %s; Task Instance Name %s.&quot;), *Ability-&gt;GetName(), *GetNameSafe(MontageToPlay),*InstanceName.ToString());</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            //播放不成功也是走Cancel</span><br><span class="line">            OnCancelled.Broadcast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //实体销毁时 由ASC终止GA</span><br><span class="line">    SetWaitingOnAvatar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_PlayMontageAndWait::ExternalCancel()</span><br><span class="line">&#123;</span><br><span class="line">    if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">    &#123;</span><br><span class="line">        OnCancelled.Broadcast();</span><br><span class="line">    &#125;</span><br><span class="line">    Super::ExternalCancel();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void UAbilityTask_PlayMontageAndWait::OnDestroy(bool AbilityEnded)</span><br><span class="line">&#123;</span><br><span class="line">    // Note: Clearing montage end delegate isn&#x27;t necessary since its not a multicast and will be cleared when the next montage plays.</span><br><span class="line">    // (If we are destroyed, it will detect this and not do anything)</span><br><span class="line"></span><br><span class="line">    // This delegate, however, should be cleared as it is a multicast</span><br><span class="line">    if (Ability)</span><br><span class="line">    &#123;</span><br><span class="line">        //移除侦听</span><br><span class="line">        Ability-&gt;OnGameplayAbilityCancelled.Remove(InterruptedHandle);</span><br><span class="line">        if (AbilityEnded &amp;&amp; bStopWhenAbilityEnds)</span><br><span class="line">        &#123;</span><br><span class="line">            StopPlayingMontage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Super::OnDestroy(AbilityEnded);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool UAbilityTask_PlayMontageAndWait::StopPlayingMontage()</span><br><span class="line">&#123;</span><br><span class="line">    if (Ability == nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const FGameplayAbilityActorInfo* ActorInfo = Ability-&gt;GetCurrentActorInfo();</span><br><span class="line">    if (ActorInfo == nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UAnimInstance* AnimInstance = ActorInfo-&gt;GetAnimInstance();</span><br><span class="line">    if (AnimInstance == nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check if the montage is still playing</span><br><span class="line">    // The ability would have been interrupted, in which case we should automatically stop the montage</span><br><span class="line">    UAbilitySystemComponent* ASC = AbilitySystemComponent.Get();</span><br><span class="line">    if (ASC &amp;&amp; Ability)</span><br><span class="line">    &#123;</span><br><span class="line">        if (ASC-&gt;GetAnimatingAbility() == Ability</span><br><span class="line">            &amp;&amp; ASC-&gt;GetCurrentMontage() == MontageToPlay)</span><br><span class="line">        &#123;</span><br><span class="line">            // Unbind delegates so they don&#x27;t get called as well</span><br><span class="line">            FAnimMontageInstance* MontageInstance = AnimInstance-&gt;GetActiveInstanceForMontage(MontageToPlay);</span><br><span class="line">            if (MontageInstance)</span><br><span class="line">            &#123;</span><br><span class="line">                //解除委托绑定</span><br><span class="line">                //这里的这些委托，并不是多播委托 而为单播委托</span><br><span class="line">                MontageInstance-&gt;OnMontageBlendedInEnded.Unbind();</span><br><span class="line">                MontageInstance-&gt;OnMontageBlendingOutStarted.Unbind();</span><br><span class="line">                MontageInstance-&gt;OnMontageEnded.Unbind();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //ASC调用处理蒙太奇停止</span><br><span class="line">            ASC-&gt;CurrentMontageStop();</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FString UAbilityTask_PlayMontageAndWait::GetDebugString() const</span><br><span class="line">&#123;</span><br><span class="line">    UAnimMontage* PlayingMontage = nullptr;</span><br><span class="line">    if (Ability)</span><br><span class="line">    &#123;</span><br><span class="line">        const FGameplayAbilityActorInfo* ActorInfo = Ability-&gt;GetCurrentActorInfo();</span><br><span class="line">        UAnimInstance* AnimInstance = ActorInfo-&gt;GetAnimInstance();</span><br><span class="line"></span><br><span class="line">        if (AnimInstance != nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            PlayingMontage = AnimInstance-&gt;Montage_IsActive(MontageToPlay) ? ToRawPtr(MontageToPlay) : AnimInstance-&gt;GetCurrentActiveMontage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return FString::Printf(TEXT(&quot;PlayMontageAndWait. MontageToPlay: %s  (Currently Playing): %s&quot;), *GetNameSafe(MontageToPlay), *GetNameSafe(PlayingMontage));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="补充源码"><a href="#补充源码" class="headerlink" title="补充源码"></a>补充源码</h2><h3 id="ASC的PlayMontage"><a href="#ASC的PlayMontage" class="headerlink" title="ASC的PlayMontage"></a>ASC的PlayMontage</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">float UAbilitySystemComponent::PlayMontage(UGameplayAbility* InAnimatingAbility, FGameplayAbilityActivationInfo ActivationInfo, UAnimMontage* NewAnimMontage, float InPlayRate, FName StartSectionName, float StartTimeSeconds)</span><br><span class="line">&#123;</span><br><span class="line">    float Duration = -1.f;</span><br><span class="line"></span><br><span class="line">    UAnimInstance* AnimInstance = AbilityActorInfo.IsValid() ? AbilityActorInfo-&gt;GetAnimInstance() : nullptr;</span><br><span class="line">    if (AnimInstance &amp;&amp; NewAnimMontage)</span><br><span class="line">    &#123;   </span><br><span class="line">        //执行蒙太奇播放</span><br><span class="line">        //客户端预测 &amp;&amp; 服务端执行</span><br><span class="line">        //播放失败时返回0.f</span><br><span class="line">        Duration = AnimInstance-&gt;Montage_Play(NewAnimMontage, InPlayRate, EMontagePlayReturnType::MontageLength, StartTimeSeconds);</span><br><span class="line">        if (Duration &gt; 0.f)</span><br><span class="line">        &#123;</span><br><span class="line">            if (const UGameplayAbility* RawAnimatingAbility = LocalAnimMontageInfo.AnimatingAbility.Get())</span><br><span class="line">            &#123;</span><br><span class="line">                if (RawAnimatingAbility != InAnimatingAbility)</span><br><span class="line">                &#123;</span><br><span class="line">                    // The ability that was previously animating will have already gotten the &#x27;interrupted&#x27; callback.</span><br><span class="line">                    // It may be a good idea to make this a global policy and &#x27;cancel&#x27; the ability.</span><br><span class="line">                    // </span><br><span class="line">                    // For now, we expect it to end itself when this happens.</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            UAnimSequenceBase* Animation = NewAnimMontage-&gt;IsDynamicMontage() ? NewAnimMontage-&gt;GetFirstAnimReference() : NewAnimMontage;</span><br><span class="line"></span><br><span class="line">            if (NewAnimMontage-&gt;HasRootMotion() &amp;&amp; AnimInstance-&gt;GetOwningActor())</span><br><span class="line">            &#123;</span><br><span class="line">                UE_LOG(LogRootMotion, Log, TEXT(&quot;UAbilitySystemComponent::PlayMontage %s, Role: %s&quot;)</span><br><span class="line">                    , *GetNameSafe(Animation)</span><br><span class="line">                    , *UEnum::GetValueAsString(TEXT(&quot;Engine.ENetRole&quot;), AnimInstance-&gt;GetOwningActor()-&gt;GetLocalRole())</span><br><span class="line">                    );</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            LocalAnimMontageInfo.AnimMontage = NewAnimMontage;</span><br><span class="line">            LocalAnimMontageInfo.AnimatingAbility = InAnimatingAbility;</span><br><span class="line">            LocalAnimMontageInfo.PlayInstanceId = (LocalAnimMontageInfo.PlayInstanceId &lt; UINT8_MAX ? LocalAnimMontageInfo.PlayInstanceId + 1 : 0);</span><br><span class="line">            </span><br><span class="line">            //设置GA当前播放的蒙太奇信息</span><br><span class="line">            if (InAnimatingAbility)</span><br><span class="line">            &#123;</span><br><span class="line">                InAnimatingAbility-&gt;SetCurrentMontage(NewAnimMontage);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            // Start at a given Section.</span><br><span class="line">            if (StartSectionName != NAME_None)</span><br><span class="line">            &#123;</span><br><span class="line">                AnimInstance-&gt;Montage_JumpToSection(StartSectionName, NewAnimMontage);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //网络复制</span><br><span class="line">            // Replicate for non-owners and for replay recordings</span><br><span class="line">            // The data we set from GetRepAnimMontageInfo_Mutable() is used both by the server to replicate to clients and by clients to record replays.</span><br><span class="line">            // - 服务端广播以及客户端用于记录回放</span><br><span class="line">            // We need to set this data for recording clients because there exists network configurations where an abilities montage data will not replicate to some clients (for example: if the client is an autonomous proxy.)</span><br><span class="line">            //客户端自己是自主代理时。且需要回放</span><br><span class="line"></span><br><span class="line">            // Returns true IF the owner is authoritative OR the world is recording a replay.</span><br><span class="line">            //（服务端）||（客户端 - 回放时） 客户端非回放时不用考虑</span><br><span class="line">            if (ShouldRecordMontageReplication())</span><br><span class="line">            &#123;</span><br><span class="line">                FGameplayAbilityRepAnimMontage&amp; MutableRepAnimMontageInfo = GetRepAnimMontageInfo_Mutable();</span><br><span class="line"></span><br><span class="line">                // Those are static parameters, they are only set when the montage is played. They are not changed after that.</span><br><span class="line">                MutableRepAnimMontageInfo.Animation = Animation;</span><br><span class="line">                MutableRepAnimMontageInfo.PlayInstanceId = (MutableRepAnimMontageInfo.PlayInstanceId &lt; UINT8_MAX ? MutableRepAnimMontageInfo.PlayInstanceId + 1 : 0);</span><br><span class="line"></span><br><span class="line">                MutableRepAnimMontageInfo.SectionIdToPlay = 0;</span><br><span class="line">                if (MutableRepAnimMontageInfo.Animation &amp;&amp; StartSectionName != NAME_None)</span><br><span class="line">                &#123;</span><br><span class="line">                    // we add one so INDEX_NONE can be used in the on rep</span><br><span class="line">                    MutableRepAnimMontageInfo.SectionIdToPlay = NewAnimMontage-&gt;GetSectionIndex(StartSectionName) + 1;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (NewAnimMontage-&gt;IsDynamicMontage())</span><br><span class="line">                &#123;</span><br><span class="line">                    check(!NewAnimMontage-&gt;SlotAnimTracks.IsEmpty());</span><br><span class="line">                    MutableRepAnimMontageInfo.SlotName = NewAnimMontage-&gt;SlotAnimTracks[0].SlotName;</span><br><span class="line">                    MutableRepAnimMontageInfo.BlendOutTime = NewAnimMontage-&gt;GetDefaultBlendInTime();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Update parameters that change during Montage life time.</span><br><span class="line">                AnimMontage_UpdateReplicatedData();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //服务端广播</span><br><span class="line">            // Replicate to non-owners</span><br><span class="line">            if (IsOwnerActorAuthoritative())</span><br><span class="line">            &#123;</span><br><span class="line">                // Force net update on our avatar actor.</span><br><span class="line">                if (AbilityActorInfo-&gt;AvatarActor != nullptr)</span><br><span class="line">                &#123;</span><br><span class="line">                    AbilityActorInfo-&gt;AvatarActor-&gt;ForceNetUpdate();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                // If this prediction key is rejected, we need to end the preview</span><br><span class="line">                FPredictionKey PredictionKey = GetPredictionKeyForNewAction();</span><br><span class="line">                if (PredictionKey.IsValidKey())</span><br><span class="line">                &#123;</span><br><span class="line">                    //注册回调</span><br><span class="line">                    PredictionKey.NewRejectedDelegate().BindUObject(this, &amp;UAbilitySystemComponent::OnPredictiveMontageRejected, NewAnimMontage);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return Duration;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Lyra的近战攻击检测"><a href="#Lyra的近战攻击检测" class="headerlink" title="Lyra的近战攻击检测"></a>Lyra的近战攻击检测</h1><p>Lyra的近战检测做的其实比较简单。<br>可以看到GA_Melee蓝图。</p>
<img src="/2025/04/06/UE/Project/Lyra/UE55Lyra6/image-1.png" class="" title="alt text">  
<p>依据Authority - 控制仅在服务端进行伤害逻辑处理<br>碰撞检测方式 - Capsule碰撞检测[基于挂点socket和直线确定起点和终点]<br>在获取到应用对象后，服务端使用ApplyGameplayEffectToTarget来应用近战伤害效果。<br>从实现上看，Lyra的客户端并没有做伤害预测。表现上，客户端仅会预测播放蒙太奇。如果有目标，目标也不会有预测的受击效果（受击效果位于GE上而不是GA了）。<br>要等到服务端确认了，执行了对应的检测和GE应用逻辑，客户端才能看到对应的受击效果。</p>
<h1 id="ActionRPG的近战攻击检测"><a href="#ActionRPG的近战攻击检测" class="headerlink" title="ActionRPG的近战攻击检测"></a>ActionRPG的近战攻击检测</h1><p>ActionRPG中的近战攻击检测主要还是依赖于蒙太奇。</p>
<img src="/2025/04/06/UE/Project/Lyra/UE55Lyra6/image-2.png" class="" title="alt text">
<h2 id="GA与GE应用"><a href="#GA与GE应用" class="headerlink" title="GA与GE应用"></a>GA与GE应用</h2><p>这部分还是可以研究一下：</p>
<h3 id="GA重写和重要函数"><a href="#GA重写和重要函数" class="headerlink" title="GA重写和重要函数"></a>GA重写和重要函数</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Subclass of ability blueprint type with game-specific data</span><br><span class="line"> * This class uses GameplayEffectContainers to allow easier execution of gameplay effects based on a triggering tag</span><br><span class="line"> * Most games will need to implement a subclass to support their game-specific code</span><br><span class="line"> */</span><br><span class="line">UCLASS()</span><br><span class="line">class ACTIONRPG_API URPGGameplayAbility : public UGameplayAbility</span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_BODY()</span><br><span class="line">public:</span><br><span class="line">    // Constructor and overrides</span><br><span class="line">    URPGGameplayAbility();</span><br><span class="line"></span><br><span class="line">    //GATags-&gt;GEContainer</span><br><span class="line">    //这里的GEContainer是单独声明的一个容器，非GAS系统自带的。</span><br><span class="line">    /** Map of gameplay tags to gameplay effect containers */</span><br><span class="line">    UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = GameplayEffects)</span><br><span class="line">    TMap&lt;FGameplayTag, FRPGGameplayEffectContainer&gt; EffectContainerMap;</span><br><span class="line"></span><br><span class="line">    /** Make gameplay effect container spec to be applied later, using the passed in container */</span><br><span class="line">    UFUNCTION(BlueprintCallable, Category = Ability, meta=(AutoCreateRefTerm = &quot;EventData&quot;))</span><br><span class="line">    virtual FRPGGameplayEffectContainerSpec MakeEffectContainerSpecFromContainer(const FRPGGameplayEffectContainer&amp; Container, const FGameplayEventData&amp; EventData, int32 OverrideGameplayLevel = -1);</span><br><span class="line"></span><br><span class="line">    /** Search for and make a gameplay effect container spec to be applied later, from the EffectContainerMap */</span><br><span class="line">    UFUNCTION(BlueprintCallable, Category = Ability, meta = (AutoCreateRefTerm = &quot;EventData&quot;))</span><br><span class="line">    virtual FRPGGameplayEffectContainerSpec MakeEffectContainerSpec(FGameplayTag ContainerTag, const FGameplayEventData&amp; EventData, int32 OverrideGameplayLevel = -1);</span><br><span class="line"></span><br><span class="line">    /** Applies a gameplay effect container spec that was previously created */</span><br><span class="line">    UFUNCTION(BlueprintCallable, Category = Ability)</span><br><span class="line">    virtual TArray&lt;FActiveGameplayEffectHandle&gt; ApplyEffectContainerSpec(const FRPGGameplayEffectContainerSpec&amp; ContainerSpec);</span><br><span class="line"></span><br><span class="line">    /** Applies a gameplay effect container, by creating and then applying the spec */</span><br><span class="line">    UFUNCTION(BlueprintCallable, Category = Ability, meta = (AutoCreateRefTerm = &quot;EventData&quot;))</span><br><span class="line">    virtual TArray&lt;FActiveGameplayEffectHandle&gt; ApplyEffectContainer(FGameplayTag ContainerTag, const FGameplayEventData&amp; EventData, int32 OverrideGameplayLevel = -1);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">URPGGameplayAbility::URPGGameplayAbility() &#123;&#125;</span><br><span class="line"></span><br><span class="line">FRPGGameplayEffectContainerSpec URPGGameplayAbility::MakeEffectContainerSpecFromContainer(const FRPGGameplayEffectContainer&amp; Container, const FGameplayEventData&amp; EventData, int32 OverrideGameplayLevel)</span><br><span class="line">&#123;</span><br><span class="line">    // First figure out our actor info</span><br><span class="line">    FRPGGameplayEffectContainerSpec ReturnSpec;</span><br><span class="line">    AActor* OwningActor = GetOwningActorFromActorInfo();</span><br><span class="line">    ARPGCharacterBase* OwningCharacter = Cast&lt;ARPGCharacterBase&gt;(OwningActor);</span><br><span class="line">    URPGAbilitySystemComponent* OwningASC = URPGAbilitySystemComponent::GetAbilitySystemComponentFromActor(OwningActor);</span><br><span class="line"></span><br><span class="line">    if (OwningASC)</span><br><span class="line">    &#123;</span><br><span class="line">        // If we have a target type, run the targeting logic. This is optional, targets can be added later</span><br><span class="line">        if (Container.TargetType.Get())</span><br><span class="line">        &#123;</span><br><span class="line">            TArray&lt;FHitResult&gt; HitResults;</span><br><span class="line">            TArray&lt;AActor*&gt; TargetActors;</span><br><span class="line">            const URPGTargetType* TargetTypeCDO = Container.TargetType.GetDefaultObject();</span><br><span class="line">            AActor* AvatarActor = GetAvatarActorFromActorInfo();</span><br><span class="line">            TargetTypeCDO-&gt;GetTargets(OwningCharacter, AvatarActor, EventData, HitResults, TargetActors);</span><br><span class="line">            ReturnSpec.AddTargets(HitResults, TargetActors);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // If we don&#x27;t have an override level, use the default on the ability itself</span><br><span class="line">        if (OverrideGameplayLevel == INDEX_NONE)</span><br><span class="line">        &#123;</span><br><span class="line">            OverrideGameplayLevel = OverrideGameplayLevel = this-&gt;GetAbilityLevel(); //OwningASC-&gt;GetDefaultAbilityLevel();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //创建GESpec</span><br><span class="line">        // Build GameplayEffectSpecs for each applied effect</span><br><span class="line">        for (const TSubclassOf&lt;UGameplayEffect&gt;&amp; EffectClass : Container.TargetGameplayEffectClasses)</span><br><span class="line">        &#123;</span><br><span class="line">            ReturnSpec.TargetGameplayEffectSpecs.Add(MakeOutgoingGameplayEffectSpec(EffectClass, OverrideGameplayLevel));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ReturnSpec;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FRPGGameplayEffectContainerSpec URPGGameplayAbility::MakeEffectContainerSpec(FGameplayTag ContainerTag, const FGameplayEventData&amp; EventData, int32 OverrideGameplayLevel)</span><br><span class="line">&#123;</span><br><span class="line">    FRPGGameplayEffectContainer* FoundContainer = EffectContainerMap.Find(ContainerTag);</span><br><span class="line"></span><br><span class="line">    if (FoundContainer)</span><br><span class="line">    &#123;</span><br><span class="line">        return MakeEffectContainerSpecFromContainer(*FoundContainer, EventData, OverrideGameplayLevel);</span><br><span class="line">    &#125;</span><br><span class="line">    return FRPGGameplayEffectContainerSpec();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TArray&lt;FActiveGameplayEffectHandle&gt; URPGGameplayAbility::ApplyEffectContainerSpec(const FRPGGameplayEffectContainerSpec&amp; ContainerSpec)</span><br><span class="line">&#123;</span><br><span class="line">    TArray&lt;FActiveGameplayEffectHandle&gt; AllEffects;</span><br><span class="line"></span><br><span class="line">    // Iterate list of effect specs and apply them to their target data</span><br><span class="line">    for (const FGameplayEffectSpecHandle&amp; SpecHandle : ContainerSpec.TargetGameplayEffectSpecs)</span><br><span class="line">    &#123;</span><br><span class="line">        AllEffects.Append(K2_ApplyGameplayEffectSpecToTarget(SpecHandle, ContainerSpec.TargetData));</span><br><span class="line">    &#125;</span><br><span class="line">    return AllEffects;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TArray&lt;FActiveGameplayEffectHandle&gt; URPGGameplayAbility::ApplyEffectContainer(FGameplayTag ContainerTag, const FGameplayEventData&amp; EventData, int32 OverrideGameplayLevel)</span><br><span class="line">&#123;</span><br><span class="line">    FRPGGameplayEffectContainerSpec Spec = MakeEffectContainerSpec(ContainerTag, EventData, OverrideGameplayLevel);</span><br><span class="line">    return ApplyEffectContainerSpec(Spec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="辅助类声明"><a href="#辅助类声明" class="headerlink" title="辅助类声明"></a>辅助类声明</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Struct defining a list of gameplay effects, a tag, and targeting info</span><br><span class="line"> * These containers are defined statically in blueprints or assets and then turn into Specs at runtime</span><br><span class="line"> */</span><br><span class="line">USTRUCT(BlueprintType)</span><br><span class="line">struct FRPGGameplayEffectContainer</span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_BODY()</span><br><span class="line">public:</span><br><span class="line">    FRPGGameplayEffectContainer() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    /** Sets the way that targeting happens */</span><br><span class="line">    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = GameplayEffectContainer)</span><br><span class="line">    TSubclassOf&lt;URPGTargetType&gt; TargetType;</span><br><span class="line"></span><br><span class="line">    /** List of gameplay effects to apply to the targets */</span><br><span class="line">    UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = GameplayEffectContainer)</span><br><span class="line">    TArray&lt;TSubclassOf&lt;UGameplayEffect&gt;&gt; TargetGameplayEffectClasses;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Class that is used to determine targeting for abilities</span><br><span class="line"> * It is meant to be blueprinted to run target logic</span><br><span class="line"> * This does not subclass GameplayAbilityTargetActor because this class is never instanced into the world</span><br><span class="line"> * This can be used as a basis for a game-specific targeting blueprint</span><br><span class="line"> * If your targeting is more complicated you may need to instance into the world once or as a pooled actor</span><br><span class="line"> */</span><br><span class="line">UCLASS(Blueprintable, meta = (ShowWorldContextPin))</span><br><span class="line">class ACTIONRPG_API URPGTargetType : public UObject</span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_BODY()</span><br><span class="line">public:</span><br><span class="line">    // Constructor and overrides</span><br><span class="line">    URPGTargetType() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    /** Called to determine targets to apply gameplay effects to */</span><br><span class="line">    UFUNCTION(BlueprintNativeEvent)</span><br><span class="line">    void GetTargets(ARPGCharacterBase* TargetingCharacter, AActor* TargetingActor, FGameplayEventData EventData, TArray&lt;FHitResult&gt;&amp; OutHitResults, TArray&lt;AActor*&gt;&amp; OutActors) const;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/** Trivial target type that uses the owner */</span><br><span class="line">UCLASS(NotBlueprintable)</span><br><span class="line">class ACTIONRPG_API URPGTargetType_UseOwner : public URPGTargetType</span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_BODY()</span><br><span class="line">public:</span><br><span class="line">    // Constructor and overrides</span><br><span class="line">    URPGTargetType_UseOwner() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    /** Uses the passed in event data */</span><br><span class="line">    virtual void GetTargets_Implementation(ARPGCharacterBase* TargetingCharacter, AActor* TargetingActor, FGameplayEventData EventData, TArray&lt;FHitResult&gt;&amp; OutHitResults, TArray&lt;AActor*&gt;&amp; OutActors) const override;</span><br><span class="line"></span><br><span class="line">    //cpp实现逻辑</span><br><span class="line">    void URPGTargetType_UseOwner::GetTargets_Implementation(ARPGCharacterBase* TargetingCharacter, AActor* TargetingActor, FGameplayEventData EventData, TArray&lt;FHitResult&gt;&amp; OutHitResults, TArray&lt;AActor*&gt;&amp; OutActors) const</span><br><span class="line">    &#123;</span><br><span class="line">        OutActors.Add(TargetingCharacter);</span><br><span class="line">    &#125;</span><br><span class="line">    //</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/** Trivial target type that pulls the target out of the event data */</span><br><span class="line">UCLASS(NotBlueprintable)</span><br><span class="line">class ACTIONRPG_API URPGTargetType_UseEventData : public URPGTargetType</span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_BODY()</span><br><span class="line">public:</span><br><span class="line">    // Constructor and overrides</span><br><span class="line">    URPGTargetType_UseEventData() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    /** Uses the passed in event data */</span><br><span class="line">    virtual void GetTargets_Implementation(ARPGCharacterBase* TargetingCharacter, AActor* TargetingActor, FGameplayEventData EventData, TArray&lt;FHitResult&gt;&amp; OutHitResults, TArray&lt;AActor*&gt;&amp; OutActors) const override;</span><br><span class="line"></span><br><span class="line">    //cpp实现逻辑：</span><br><span class="line">    void URPGTargetType_UseEventData::GetTargets_Implementation(ARPGCharacterBase* TargetingCharacter, AActor* TargetingActor, FGameplayEventData EventData, TArray&lt;FHitResult&gt;&amp; OutHitResults, TArray&lt;AActor*&gt;&amp; OutActors) const</span><br><span class="line">    &#123;</span><br><span class="line">        const FHitResult* FoundHitResult = EventData.ContextHandle.GetHitResult();</span><br><span class="line">        if (FoundHitResult)</span><br><span class="line">        &#123;</span><br><span class="line">            OutHitResults.Add(*FoundHitResult);</span><br><span class="line">        &#125;</span><br><span class="line">        else if (EventData.Target)</span><br><span class="line">        &#123;</span><br><span class="line">            //OutActors.Add(const_cast&lt;AActor*&gt;(EventData.Target));</span><br><span class="line">            OutActors.Add(const_cast&lt;AActor*&gt;(ToRawPtr(EventData.Target)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>主要是用Tag来映射对应的GEList。一个GA可以通过不同的Tag来应用不同的GEList。中间的函数会帮助确定GE的应用对象（Target），并创建对应的GESpec来处理GE应用逻辑。</p>
<h2 id="目标筛选与Tag"><a href="#目标筛选与Tag" class="headerlink" title="目标筛选与Tag"></a>目标筛选与Tag</h2><h3 id="PlayMontageAndWaitForEvent"><a href="#PlayMontageAndWaitForEvent" class="headerlink" title="PlayMontageAndWaitForEvent"></a>PlayMontageAndWaitForEvent</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class URPGAbilitySystemComponent;</span><br><span class="line"></span><br><span class="line">/** Delegate type used, EventTag and Payload may be empty if it came from the montage callbacks */</span><br><span class="line">DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FRPGPlayMontageAndWaitForEventDelegate, FGameplayTag, EventTag, FGameplayEventData, EventData);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * This task combines PlayMontageAndWait and WaitForEvent into one task, so you can wait for multiple types of activations such as from a melee combo</span><br><span class="line"> * Much of this code is copied from one of those two ability tasks</span><br><span class="line"> * This is a good task to look at as an example when creating game-specific tasks</span><br><span class="line"> * It is expected that each game will have a set of game-specific tasks to do what they want</span><br><span class="line"> */</span><br><span class="line">UCLASS()</span><br><span class="line">class ACTIONRPG_API URPGAbilityTask_PlayMontageAndWaitForEvent : public UAbilityTask</span><br><span class="line">&#123;</span><br><span class="line">    GENERATED_BODY()</span><br><span class="line">public:</span><br><span class="line">    // Constructor and overrides</span><br><span class="line">    URPGAbilityTask_PlayMontageAndWaitForEvent(const FObjectInitializer&amp; ObjectInitializer);</span><br><span class="line">    virtual void Activate() override;</span><br><span class="line">    virtual void ExternalCancel() override;</span><br><span class="line">    virtual FString GetDebugString() const override;</span><br><span class="line">    virtual void OnDestroy(bool AbilityEnded) override;</span><br><span class="line"></span><br><span class="line">    /** The montage completely finished playing */</span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FRPGPlayMontageAndWaitForEventDelegate OnCompleted;</span><br><span class="line"></span><br><span class="line">    /** The montage started blending out */</span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FRPGPlayMontageAndWaitForEventDelegate OnBlendOut;</span><br><span class="line"></span><br><span class="line">    /** The montage was interrupted */</span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FRPGPlayMontageAndWaitForEventDelegate OnInterrupted;</span><br><span class="line"></span><br><span class="line">    /** The ability task was explicitly cancelled by another ability */</span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FRPGPlayMontageAndWaitForEventDelegate OnCancelled;</span><br><span class="line"></span><br><span class="line">    /** One of the triggering gameplay events happened */</span><br><span class="line">    UPROPERTY(BlueprintAssignable)</span><br><span class="line">    FRPGPlayMontageAndWaitForEventDelegate EventReceived;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">        * Play a montage and wait for it end. If a gameplay event happens that matches EventTags (or EventTags is empty), the EventReceived delegate will fire with a tag and event data.</span><br><span class="line">        * If StopWhenAbilityEnds is true, this montage will be aborted if the ability ends normally. It is always stopped when the ability is explicitly cancelled.</span><br><span class="line">        * On normal execution, OnBlendOut is called when the montage is blending out, and OnCompleted when it is completely done playing</span><br><span class="line">        * OnInterrupted is called if another montage overwrites this, and OnCancelled is called if the ability or task is cancelled</span><br><span class="line">        *</span><br><span class="line">        * @param TaskInstanceName Set to override the name of this task, for later querying</span><br><span class="line">        * @param MontageToPlay The montage to play on the character</span><br><span class="line">        * @param EventTags Any gameplay events matching this tag will activate the EventReceived callback. If empty, all events will trigger callback</span><br><span class="line">        * @param Rate Change to play the montage faster or slower</span><br><span class="line">        * @param bStopWhenAbilityEnds If true, this montage will be aborted if the ability ends normally. It is always stopped when the ability is explicitly cancelled</span><br><span class="line">        * @param AnimRootMotionTranslationScale Change to modify size of root motion or set to 0 to block it entirely</span><br><span class="line">        */</span><br><span class="line">    UFUNCTION(BlueprintCallable, Category=&quot;Ability|Tasks&quot;, meta = (HidePin = &quot;OwningAbility&quot;, DefaultToSelf = &quot;OwningAbility&quot;, BlueprintInternalUseOnly = &quot;TRUE&quot;))</span><br><span class="line">    static URPGAbilityTask_PlayMontageAndWaitForEvent* PlayMontageAndWaitForEvent(</span><br><span class="line">        UGameplayAbility* OwningAbility,</span><br><span class="line">        FName TaskInstanceName,</span><br><span class="line">        UAnimMontage* MontageToPlay,</span><br><span class="line">        FGameplayTagContainer EventTags,</span><br><span class="line">        float Rate = 1.f,</span><br><span class="line">        FName StartSection = NAME_None,</span><br><span class="line">        bool bStopWhenAbilityEnds = true,</span><br><span class="line">        float AnimRootMotionTranslationScale = 1.f);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    /** Montage that is playing */</span><br><span class="line">    UPROPERTY()</span><br><span class="line">    UAnimMontage* MontageToPlay;</span><br><span class="line"></span><br><span class="line">    //关键参数</span><br><span class="line">    /** List of tags to match against gameplay events */</span><br><span class="line">    UPROPERTY()</span><br><span class="line">    FGameplayTagContainer EventTags;</span><br><span class="line"></span><br><span class="line">    /** Playback rate */</span><br><span class="line">    UPROPERTY()</span><br><span class="line">    float Rate;</span><br><span class="line"></span><br><span class="line">    /** Section to start montage from */</span><br><span class="line">    UPROPERTY()</span><br><span class="line">    FName StartSection;</span><br><span class="line"></span><br><span class="line">    /** Modifies how root motion movement to apply */</span><br><span class="line">    UPROPERTY()</span><br><span class="line">    float AnimRootMotionTranslationScale;</span><br><span class="line"></span><br><span class="line">    /** Rather montage should be aborted if ability ends */</span><br><span class="line">    UPROPERTY()</span><br><span class="line">    bool bStopWhenAbilityEnds;</span><br><span class="line"></span><br><span class="line">    /** Checks if the ability is playing a montage and stops that montage, returns true if a montage was stopped, false if not. */</span><br><span class="line">    bool StopPlayingMontage();</span><br><span class="line"></span><br><span class="line">    /** Returns our ability system component */</span><br><span class="line">    URPGAbilitySystemComponent* GetTargetASC();</span><br><span class="line"></span><br><span class="line">    void OnMontageBlendingOut(UAnimMontage* Montage, bool bInterrupted);</span><br><span class="line">    void OnAbilityCancelled();</span><br><span class="line">    void OnMontageEnded(UAnimMontage* Montage, bool bInterrupted);</span><br><span class="line">    void OnGameplayEvent(FGameplayTag EventTag, const FGameplayEventData* Payload);</span><br><span class="line"></span><br><span class="line">    FOnMontageBlendingOutStarted BlendingOutDelegate;</span><br><span class="line">    FOnMontageEnded MontageEndedDelegate;</span><br><span class="line">    FDelegateHandle CancelledHandle;</span><br><span class="line">    FDelegateHandle EventHandle;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">URPGAbilityTask_PlayMontageAndWaitForEvent::URPGAbilityTask_PlayMontageAndWaitForEvent(const FObjectInitializer&amp; ObjectInitializer)</span><br><span class="line">    : Super(ObjectInitializer)</span><br><span class="line">&#123;</span><br><span class="line">    Rate = 1.f;</span><br><span class="line">    bStopWhenAbilityEnds = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">URPGAbilitySystemComponent* URPGAbilityTask_PlayMontageAndWaitForEvent::GetTargetASC()</span><br><span class="line">&#123;</span><br><span class="line">    return Cast&lt;URPGAbilitySystemComponent&gt;(AbilitySystemComponent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void URPGAbilityTask_PlayMontageAndWaitForEvent::OnMontageBlendingOut(UAnimMontage* Montage, bool bInterrupted)</span><br><span class="line">&#123;</span><br><span class="line">    if (Ability &amp;&amp; Ability-&gt;GetCurrentMontage() == MontageToPlay)</span><br><span class="line">    &#123;</span><br><span class="line">        if (Montage == MontageToPlay)</span><br><span class="line">        &#123;</span><br><span class="line">            AbilitySystemComponent-&gt;ClearAnimatingAbility(Ability);</span><br><span class="line"></span><br><span class="line">            // Reset AnimRootMotionTranslationScale</span><br><span class="line">            ACharacter* Character = Cast&lt;ACharacter&gt;(GetAvatarActor());</span><br><span class="line">            if (Character &amp;&amp; (Character-&gt;GetLocalRole() == ROLE_Authority ||</span><br><span class="line">                                (Character-&gt;GetLocalRole() == ROLE_AutonomousProxy &amp;&amp; Ability-&gt;GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted)))</span><br><span class="line">            &#123;</span><br><span class="line">                Character-&gt;SetAnimRootMotionTranslationScale(1.f);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (bInterrupted)</span><br><span class="line">    &#123;</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            OnInterrupted.Broadcast(FGameplayTag(), FGameplayEventData());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            OnBlendOut.Broadcast(FGameplayTag(), FGameplayEventData());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void URPGAbilityTask_PlayMontageAndWaitForEvent::OnAbilityCancelled()</span><br><span class="line">&#123;</span><br><span class="line">    // TODO: Merge this fix back to engine, it was calling the wrong callback</span><br><span class="line"></span><br><span class="line">    if (StopPlayingMontage())</span><br><span class="line">    &#123;</span><br><span class="line">        // Let the BP handle the interrupt as well</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            OnCancelled.Broadcast(FGameplayTag(), FGameplayEventData());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void URPGAbilityTask_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted)</span><br><span class="line">&#123;</span><br><span class="line">    if (!bInterrupted)</span><br><span class="line">    &#123;</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            OnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EndTask();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//重点广播函数</span><br><span class="line">void URPGAbilityTask_PlayMontageAndWaitForEvent::OnGameplayEvent(FGameplayTag EventTag, const FGameplayEventData* Payload)</span><br><span class="line">&#123;</span><br><span class="line">    if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">    &#123;</span><br><span class="line">        FGameplayEventData TempData = *Payload;</span><br><span class="line">        TempData.EventTag = EventTag;</span><br><span class="line"></span><br><span class="line">        EventReceived.Broadcast(EventTag, TempData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">URPGAbilityTask_PlayMontageAndWaitForEvent* URPGAbilityTask_PlayMontageAndWaitForEvent::PlayMontageAndWaitForEvent(UGameplayAbility* OwningAbility,</span><br><span class="line">    FName TaskInstanceName, UAnimMontage* MontageToPlay, FGameplayTagContainer EventTags, float Rate, FName StartSection, bool bStopWhenAbilityEnds, float AnimRootMotionTranslationScale)</span><br><span class="line">&#123;</span><br><span class="line">    //静态工厂函数。这部分和PlayMontageAndWait大差不差</span><br><span class="line">    UAbilitySystemGlobals::NonShipping_ApplyGlobalAbilityScaler_Rate(Rate);</span><br><span class="line"></span><br><span class="line">    URPGAbilityTask_PlayMontageAndWaitForEvent* MyObj = NewAbilityTask&lt;URPGAbilityTask_PlayMontageAndWaitForEvent&gt;(OwningAbility, TaskInstanceName);</span><br><span class="line">    MyObj-&gt;MontageToPlay = MontageToPlay;</span><br><span class="line">    MyObj-&gt;EventTags = EventTags;</span><br><span class="line">    MyObj-&gt;Rate = Rate;</span><br><span class="line">    MyObj-&gt;StartSection = StartSection;</span><br><span class="line">    MyObj-&gt;AnimRootMotionTranslationScale = AnimRootMotionTranslationScale;</span><br><span class="line">    MyObj-&gt;bStopWhenAbilityEnds = bStopWhenAbilityEnds;</span><br><span class="line"></span><br><span class="line">    return MyObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void URPGAbilityTask_PlayMontageAndWaitForEvent::Activate()</span><br><span class="line">&#123;</span><br><span class="line">    //这部分也是和PlayMontageAndWait大体相似</span><br><span class="line"></span><br><span class="line">    if (Ability == nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bool bPlayedMontage = false;</span><br><span class="line">    URPGAbilitySystemComponent* RPGAbilitySystemComponent = GetTargetASC();</span><br><span class="line"></span><br><span class="line">    if (RPGAbilitySystemComponent)</span><br><span class="line">    &#123;</span><br><span class="line">        const FGameplayAbilityActorInfo* ActorInfo = Ability-&gt;GetCurrentActorInfo();</span><br><span class="line">        UAnimInstance* AnimInstance = ActorInfo-&gt;GetAnimInstance();</span><br><span class="line">        if (AnimInstance != nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            //关键事件侦听函数</span><br><span class="line">            // Bind to event callback</span><br><span class="line">            EventHandle = RPGAbilitySystemComponent-&gt;AddGameplayEventTagContainerDelegate(EventTags, FGameplayEventTagMulticastDelegate::FDelegate::CreateUObject(this, &amp;URPGAbilityTask_PlayMontageAndWaitForEvent::OnGameplayEvent));</span><br><span class="line"></span><br><span class="line">            if (RPGAbilitySystemComponent-&gt;PlayMontage(Ability, Ability-&gt;GetCurrentActivationInfo(), MontageToPlay, Rate, StartSection) &gt; 0.f)</span><br><span class="line">            &#123;</span><br><span class="line">                // Playing a montage could potentially fire off a callback into game code which could kill this ability! Early out if we are  pending kill.</span><br><span class="line">                if (ShouldBroadcastAbilityTaskDelegates() == false)</span><br><span class="line">                &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                CancelledHandle = Ability-&gt;OnGameplayAbilityCancelled.AddUObject(this, &amp;URPGAbilityTask_PlayMontageAndWaitForEvent::OnAbilityCancelled);</span><br><span class="line"></span><br><span class="line">                BlendingOutDelegate.BindUObject(this, &amp;URPGAbilityTask_PlayMontageAndWaitForEvent::OnMontageBlendingOut);</span><br><span class="line">                AnimInstance-&gt;Montage_SetBlendingOutDelegate(BlendingOutDelegate, MontageToPlay);</span><br><span class="line"></span><br><span class="line">                MontageEndedDelegate.BindUObject(this, &amp;URPGAbilityTask_PlayMontageAndWaitForEvent::OnMontageEnded);</span><br><span class="line">                AnimInstance-&gt;Montage_SetEndDelegate(MontageEndedDelegate, MontageToPlay);</span><br><span class="line"></span><br><span class="line">                ACharacter* Character = Cast&lt;ACharacter&gt;(GetAvatarActor());</span><br><span class="line">                if (Character &amp;&amp; (Character-&gt;GetLocalRole() == ROLE_Authority ||</span><br><span class="line">                                    (Character-&gt;GetLocalRole() == ROLE_AutonomousProxy &amp;&amp; Ability-&gt;GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted)))</span><br><span class="line">                &#123;</span><br><span class="line">                    Character-&gt;SetAnimRootMotionTranslationScale(AnimRootMotionTranslationScale);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                bPlayedMontage = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            ABILITY_LOG(Warning, TEXT(&quot;URPGAbilityTask_PlayMontageAndWaitForEvent call to PlayMontage failed!&quot;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        ABILITY_LOG(Warning, TEXT(&quot;URPGAbilityTask_PlayMontageAndWaitForEvent called on invalid AbilitySystemComponent&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!bPlayedMontage)</span><br><span class="line">    &#123;</span><br><span class="line">        ABILITY_LOG(Warning, TEXT(&quot;URPGAbilityTask_PlayMontageAndWaitForEvent called in Ability %s failed to play montage %s; Task Instance Name %s.&quot;), *Ability-&gt;GetName(), *GetNameSafe(MontageToPlay),*InstanceName.ToString());</span><br><span class="line">        if (ShouldBroadcastAbilityTaskDelegates())</span><br><span class="line">        &#123;</span><br><span class="line">            OnCancelled.Broadcast(FGameplayTag(), FGameplayEventData());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SetWaitingOnAvatar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void URPGAbilityTask_PlayMontageAndWaitForEvent::ExternalCancel()</span><br><span class="line">&#123;</span><br><span class="line">    UAbilitySystemComponent* ASC = GetTargetASC();</span><br><span class="line"></span><br><span class="line">    if (ASC)</span><br><span class="line">    //check(AbilitySystemComponent);</span><br><span class="line"></span><br><span class="line">    OnAbilityCancelled();</span><br><span class="line"></span><br><span class="line">    Super::ExternalCancel();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void URPGAbilityTask_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded)</span><br><span class="line">&#123;</span><br><span class="line">    // Note: Clearing montage end delegate isn&#x27;t necessary since its not a multicast and will be cleared when the next montage plays.</span><br><span class="line">    // (If we are destroyed, it will detect this and not do anything)</span><br><span class="line"></span><br><span class="line">    // This delegate, however, should be cleared as it is a multicast</span><br><span class="line">    if (Ability)</span><br><span class="line">    &#123;</span><br><span class="line">        Ability-&gt;OnGameplayAbilityCancelled.Remove(CancelledHandle);</span><br><span class="line">        if (AbilityEnded &amp;&amp; bStopWhenAbilityEnds)</span><br><span class="line">        &#123;</span><br><span class="line">            StopPlayingMontage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    URPGAbilitySystemComponent* RPGAbilitySystemComponent = GetTargetASC();</span><br><span class="line">    if (RPGAbilitySystemComponent)</span><br><span class="line">    &#123;</span><br><span class="line">        RPGAbilitySystemComponent-&gt;RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Super::OnDestroy(AbilityEnded);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool URPGAbilityTask_PlayMontageAndWaitForEvent::StopPlayingMontage()</span><br><span class="line">&#123;</span><br><span class="line">    const FGameplayAbilityActorInfo* ActorInfo = Ability-&gt;GetCurrentActorInfo();</span><br><span class="line">    if (!ActorInfo)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UAnimInstance* AnimInstance = ActorInfo-&gt;GetAnimInstance();</span><br><span class="line">    if (AnimInstance == nullptr)</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Check if the montage is still playing</span><br><span class="line">    // The ability would have been interrupted, in which case we should automatically stop the montage</span><br><span class="line">    UAbilitySystemComponent* ASC = GetTargetASC();</span><br><span class="line"></span><br><span class="line">    if (ASC &amp;&amp; Ability)</span><br><span class="line">    //if (AbilitySystemComponent &amp;&amp; Ability)</span><br><span class="line">    &#123;</span><br><span class="line">        if (AbilitySystemComponent-&gt;GetAnimatingAbility() == Ability</span><br><span class="line">            &amp;&amp; AbilitySystemComponent-&gt;GetCurrentMontage() == MontageToPlay)</span><br><span class="line">        &#123;</span><br><span class="line">            // Unbind delegates so they don&#x27;t get called as well</span><br><span class="line">            FAnimMontageInstance* MontageInstance = AnimInstance-&gt;GetActiveInstanceForMontage(MontageToPlay);</span><br><span class="line">            if (MontageInstance)</span><br><span class="line">            &#123;</span><br><span class="line">                MontageInstance-&gt;OnMontageBlendingOutStarted.Unbind();</span><br><span class="line">                MontageInstance-&gt;OnMontageEnded.Unbind();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            AbilitySystemComponent-&gt;CurrentMontageStop();</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FString URPGAbilityTask_PlayMontageAndWaitForEvent::GetDebugString() const</span><br><span class="line">&#123;</span><br><span class="line">    UAnimMontage* PlayingMontage = nullptr;</span><br><span class="line">    if (Ability)</span><br><span class="line">    &#123;</span><br><span class="line">        const FGameplayAbilityActorInfo* ActorInfo = Ability-&gt;GetCurrentActorInfo();</span><br><span class="line">        UAnimInstance* AnimInstance = ActorInfo-&gt;GetAnimInstance();</span><br><span class="line"></span><br><span class="line">        if (AnimInstance != nullptr)</span><br><span class="line">        &#123;</span><br><span class="line">            PlayingMontage = AnimInstance-&gt;Montage_IsActive(MontageToPlay) ? MontageToPlay : AnimInstance-&gt;GetCurrentActiveMontage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return FString::Printf(TEXT(&quot;PlayMontageAndWaitForEvent. MontageToPlay: %s  (Currently Playing): %s&quot;), *GetNameSafe(MontageToPlay), *GetNameSafe(PlayingMontage));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="蒙太奇播放与Notify"><a href="#蒙太奇播放与Notify" class="headerlink" title="蒙太奇播放与Notify"></a>蒙太奇播放与Notify</h2><img src="/2025/04/06/UE/Project/Lyra/UE55Lyra6/image-3.png" class="" title="alt text">
<p>这里有两个相对关键重要的Notify<br>1.Weapon Attack NS<br>2.Jump Section NS</p>
<h3 id="WeaponAttackNS"><a href="#WeaponAttackNS" class="headerlink" title="WeaponAttackNS"></a>WeaponAttackNS</h3><p>这个动画通知主要用于启用武器攻击检测。<br>关键参数 - EventTag<br>具体的检测逻辑 放在WeaponActor上。<br>逻辑链条：<br>RecNotifyBegin -&gt; 获取Actor -&gt; 获取Weapon -&gt; Weapon设置开始攻击检测<br>RecNotifyEnd -&gt; 获取Actor -&gt; 获取Weapon -&gt; Weapon设置结束攻击检测</p>
<h4 id="攻击检测"><a href="#攻击检测" class="headerlink" title="攻击检测"></a>攻击检测</h4><p>看到WeaponActor。实际上还是在某段时间内，启用Capsule碰撞体积来实现的。</p>
<p>碰撞逻辑内部使用了DoOnce,并用结束碰撞的延迟来做DoOnce的Reset，从而设置攻击间隔。在进行了目标非发出者(Instigator)的检测后，使用目标和发出者来构造GameplayEventData,并使用SendGameplayEventToActor将Tag和构造的GameplayEventData发送给发出者。</p>
<p>ASC::HandleGameplayEvent -&gt; ASC的GameplayEventTagContainerDelegates进行广播。</p>
<h3 id="JumpSectionNS"><a href="#JumpSectionNS" class="headerlink" title="JumpSectionNS"></a>JumpSectionNS</h3><p>主要是理解ActionRPG中，Combo的实现方式。<br>在这个项目中，一个攻击的多个连段是放在同一个蒙太奇里做的，分为了不同的Section。Combo其实是在不同的Section中进行切换。</p>
<p>Character上存在一个EnableComboPeriod标志位，NotifyBegin与End的时候设置该标志位。<br>在Notify上会存一个JumpSection的信息。</p>
<img src="/2025/04/06/UE/Project/Lyra/UE55Lyra6/image4.png" class="" title="alt text">
<img src="/2025/04/06/UE/Project/Lyra/UE55Lyra6/image5.png" class="" title="alt text">
<p>可以看到，仅有第一个Combo会使用GA。后面的只是切换蒙太奇片段。<br>这种设计并不严谨。</p>
<h1 id="网络延迟模拟和测试"><a href="#网络延迟模拟和测试" class="headerlink" title="网络延迟模拟和测试"></a>网络延迟模拟和测试</h1><p>还是以Lyra项目为例子<br>NetMode使用Play As Client，并设置为2个玩家来作为测试样例。<br>网络延迟可以在下面的AdvancedSettings来进行设置</p>
<img src="/2025/04/06/UE/Project/Lyra/UE55Lyra6/image.png" class="" title="alt text">
<p>通过网络延迟，可以更好的看到客户端的预测效果和情况。</p>
<p>如果这里的网络延迟没有生效，可以尝试以下配置。</p>
<img src="/2025/04/06/UE/Project/Lyra/UE55Lyra6/image6.png" class="" title="alt text">

<h1 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h1><p>ActionRPG的生命值相关改动 还是通过GE来实现的。定义为“PassivegGameplayEffects”。<br>ActionRPG的设计和实现，可以看出来还是针对单机模式的。包括连击的实现，也没有使用多个GA，仅在第一次触发的时候使用了GA。可以参考其武器近战攻击的碰撞检测实现，以及连击的Notify设置，但这块最好还是用Tag来做比较好。</p>
]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
        <tag>Lyra</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5.5-Lyra-8-Shooting</title>
    <url>/2025/04/16/UE/Project/Lyra/UE55Lyra8/</url>
    <content><![CDATA[<p>主要分析Lyra项目射击的完整流程。</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>深入分析的时候，GAS的调试工具就很重要了。<br>可以参考官方GAS插件目录下的Readme文件。</p>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行 &#96;"></a>命令行 &#96;</h2><h2 id="基础调试命令"><a href="#基础调试命令" class="headerlink" title="基础调试命令"></a>基础调试命令</h2><p>启用GAS调试 - ShowDebug AbilitySystem</p>
<p>切换目录 - AbilitySystem.Debug.NextCategory</p>
<h1 id="Lyra射击分析"><a href="#Lyra射击分析" class="headerlink" title="Lyra射击分析"></a>Lyra射击分析</h1><h2 id="主要GA分析"><a href="#主要GA分析" class="headerlink" title="主要GA分析"></a>主要GA分析</h2><h3 id="类继承图"><a href="#类继承图" class="headerlink" title="类继承图"></a>类继承图</h3><p>以手枪射击为例子<br>GA_Weapon_Fire_Pistol<br>↑<br>GA_Weapon_Fire<br>↑<br>ULyraGameplayAbility_RangedWeapon<br>↑<br>ULyraGameplayAbility_FromEquipment<br>↑<br>ULyraGameplayAbility</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>从ActivateAbility来看。<br>逻辑处理函数:</p>
<ul>
<li>(Locally Controlled判定) - StartRangedWeaponTargeting</li>
</ul>
<p>表现处理函数：</p>
<ul>
<li>播放蒙太奇异步任务 PlayMontageAndWait</li>
</ul>
<p>这里比较巧妙的一点是，由人物的蒙太奇播放，添加动画通知，驱动了武器蒙太奇动画的播放。</p>
<p>StartRangedWeaponTargeting：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void ULyraGameplayAbility_RangedWeapon::StartRangedWeaponTargeting()</span><br><span class="line">&#123;</span><br><span class="line">  check(CurrentActorInfo);</span><br><span class="line"></span><br><span class="line">  AActor* AvatarActor = CurrentActorInfo-&gt;AvatarActor.Get();</span><br><span class="line">  check(AvatarActor);</span><br><span class="line"></span><br><span class="line">  UAbilitySystemComponent* MyAbilityComponent = CurrentActorInfo-&gt;AbilitySystemComponent.Get();</span><br><span class="line">  check(MyAbilityComponent);</span><br><span class="line"></span><br><span class="line">  AController* Controller = GetControllerFromActorInfo();</span><br><span class="line">  check(Controller);</span><br><span class="line"></span><br><span class="line">  //继承自UControllerComponent.(用于接受Controller的Events)</span><br><span class="line">  //Tracks weapon state and recent confirmed hit markers to display on screen</span><br><span class="line">  ULyraWeaponStateComponent* WeaponStateComponent = Controller-&gt;FindComponentByClass&lt;ULyraWeaponStateComponent&gt;();</span><br><span class="line"></span><br><span class="line">  //预测窗口</span><br><span class="line">  FScopedPredictionWindow ScopedPrediction(MyAbilityComponent, CurrentActivationInfo.GetActivationPredictionKey());</span><br><span class="line"></span><br><span class="line">  TArray&lt;FHitResult&gt; FoundHits;</span><br><span class="line"></span><br><span class="line">  //关键函数</span><br><span class="line">  PerformLocalTargeting(/*out*/ FoundHits);</span><br><span class="line"></span><br><span class="line">  // Fill out the target data from the hit results</span><br><span class="line">  FGameplayAbilityTargetDataHandle TargetData;</span><br><span class="line">  TargetData.UniqueId = WeaponStateComponent ? WeaponStateComponent-&gt;GetUnconfirmedServerSideHitMarkerCount() : 0;</span><br><span class="line"></span><br><span class="line">  //处理TargetData</span><br><span class="line">  if (FoundHits.Num() &gt; 0)</span><br><span class="line">  &#123;</span><br><span class="line">    const int32 CartridgeID = FMath::Rand();</span><br><span class="line"></span><br><span class="line">    for (const FHitResult&amp; FoundHit : FoundHits)</span><br><span class="line">    &#123;</span><br><span class="line">      FLyraGameplayAbilityTargetData_SingleTargetHit* NewTargetData = new FLyraGameplayAbilityTargetData_SingleTargetHit();</span><br><span class="line">      NewTargetData-&gt;HitResult = FoundHit;</span><br><span class="line">      NewTargetData-&gt;CartridgeID = CartridgeID;</span><br><span class="line"></span><br><span class="line">      TargetData.Add(NewTargetData);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Send hit marker information</span><br><span class="line">  const bool bProjectileWeapon = false;</span><br><span class="line">  if (!bProjectileWeapon &amp;&amp; (WeaponStateComponent != nullptr))</span><br><span class="line">  &#123;</span><br><span class="line">    WeaponStateComponent-&gt;AddUnconfirmedServerSideHitMarkers(TargetData, FoundHits);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Process the target data immediately</span><br><span class="line">  OnTargetDataReadyCallback(TargetData, FGameplayTag());</span><br><span class="line"></span><br><span class="line">  //预测窗口结束</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总体而言还是比较复杂的 一个一个来吧。</p>
<h4 id="目标逻辑数据的获取-PerformLocalTargeting"><a href="#目标逻辑数据的获取-PerformLocalTargeting" class="headerlink" title="目标逻辑数据的获取 - PerformLocalTargeting"></a>目标逻辑数据的获取 - PerformLocalTargeting</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void ULyraGameplayAbility_RangedWeapon::PerformLocalTargeting(OUT TArray&lt;FHitResult&gt;&amp; OutHits)</span><br><span class="line">&#123;</span><br><span class="line">  APawn* const AvatarPawn = Cast&lt;APawn&gt;(GetAvatarActorFromActorInfo());</span><br><span class="line"></span><br><span class="line">  ULyraRangedWeaponInstance* WeaponData = GetWeaponInstance();</span><br><span class="line"></span><br><span class="line">  //还是一样的 IsLocallyControlled判断。</span><br><span class="line">  if (AvatarPawn &amp;&amp; AvatarPawn-&gt;IsLocallyControlled() &amp;&amp; WeaponData)</span><br><span class="line">  &#123;</span><br><span class="line">    FRangedWeaponFiringInput InputData;</span><br><span class="line">    //武器数据</span><br><span class="line">    InputData.WeaponData = WeaponData;</span><br><span class="line"></span><br><span class="line">    //非专用服务器时可以播放特效</span><br><span class="line">    InputData.bCanPlayBulletFX = (AvatarPawn-&gt;GetNetMode() != NM_DedicatedServer);</span><br><span class="line"></span><br><span class="line">    //开始做射线检测相关工作</span><br><span class="line">    //@TODO: Should do more complicated logic here when the player is close to a wall, etc...</span><br><span class="line">    //选取射线检测的位置和方向</span><br><span class="line">    const FTransform TargetTransform = GetTargetingTransform(AvatarPawn, ELyraAbilityTargetingSource::CameraTowardsFocus);</span><br><span class="line"></span><br><span class="line">    InputData.AimDir = TargetTransform.GetUnitAxis(EAxis::X);</span><br><span class="line"></span><br><span class="line">    InputData.StartTrace = TargetTransform.GetTranslation();</span><br><span class="line"></span><br><span class="line">    InputData.EndAim = InputData.StartTrace + InputData.AimDir * WeaponData-&gt;GetMaxDamageRange();</span><br><span class="line"></span><br><span class="line">  #if ENABLE_DRAW_DEBUG</span><br><span class="line">    if (LyraConsoleVariables::DrawBulletTracesDuration &gt; 0.0f)</span><br><span class="line">    &#123;</span><br><span class="line">      static float DebugThickness = 2.0f;</span><br><span class="line">      DrawDebugLine(GetWorld(), InputData.StartTrace, InputData.StartTrace + (InputData.AimDir * 100.0f), FColor::Yellow, false, LyraConsoleVariables::DrawBulletTracesDuration, 0, DebugThickness);</span><br><span class="line">    &#125;</span><br><span class="line">  #endif</span><br><span class="line">    //这里单独有一个函数出来处理逻辑</span><br><span class="line">    //主要是对于霰弹枪这种多子弹情况</span><br><span class="line">    //具体的检测函数可以看到WeaponTrace函数</span><br><span class="line">    TraceBulletsInCartridge(InputData, /*out*/ OutHits);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="数据逻辑处理-OnTargetDataReadyCallback"><a href="#数据逻辑处理-OnTargetDataReadyCallback" class="headerlink" title="数据逻辑处理 - OnTargetDataReadyCallback"></a>数据逻辑处理 - OnTargetDataReadyCallback</h4><p>通过PerformLocalTargeting，我们获取到了目标对象（如果有）。<br>即确定了GE的应用对象和本GA的效果的目标对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void ULyraGameplayAbility_RangedWeapon::OnTargetDataReadyCallback(const FGameplayAbilityTargetDataHandle&amp; InData, FGameplayTag ApplicationTag)</span><br><span class="line">&#123;</span><br><span class="line">  UAbilitySystemComponent* MyAbilityComponent = CurrentActorInfo-&gt;AbilitySystemComponent.Get();</span><br><span class="line">  check(MyAbilityComponent);</span><br><span class="line"></span><br><span class="line">  //获取当前的GASpec</span><br><span class="line">  if (const FGameplayAbilitySpec* AbilitySpec = MyAbilityComponent-&gt;FindAbilitySpecFromHandle(CurrentSpecHandle))</span><br><span class="line">  &#123;</span><br><span class="line">    //创建预测窗口</span><br><span class="line">    FScopedPredictionWindow	ScopedPrediction(MyAbilityComponent);</span><br><span class="line"></span><br><span class="line">    //确保对当前数据的掌控权</span><br><span class="line">    //考虑数据结构</span><br><span class="line">    //Take ownership of the target data to make sure no callbacks into game code invalidate it out from under us</span><br><span class="line">    FGameplayAbilityTargetDataHandle LocalTargetDataHandle(MoveTemp(const_cast&lt;FGameplayAbilityTargetDataHandle&amp;&gt;(InData)));</span><br><span class="line"></span><br><span class="line">    const bool bShouldNotifyServer = CurrentActorInfo-&gt;IsLocallyControlled() &amp;&amp; !CurrentActorInfo-&gt;IsNetAuthority();</span><br><span class="line">    if (bShouldNotifyServer)</span><br><span class="line">    &#123;</span><br><span class="line">      //传输数据给服务器</span><br><span class="line">      //这里需要进行对应事件的绑定。</span><br><span class="line">      MyAbilityComponent-&gt;CallServerSetReplicatedTargetData(CurrentSpecHandle, CurrentActivationInfo.GetActivationPredictionKey(), LocalTargetDataHandle, ApplicationTag, MyAbilityComponent-&gt;ScopedPredictionKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const bool bIsTargetDataValid = true;</span><br><span class="line"></span><br><span class="line">    bool bProjectileWeapon = false;</span><br><span class="line"></span><br><span class="line">  #if WITH_SERVER_CODE</span><br><span class="line">    if (!bProjectileWeapon)</span><br><span class="line">    &#123;</span><br><span class="line">      if (AController* Controller = GetControllerFromActorInfo())</span><br><span class="line">      &#123;</span><br><span class="line">        if (Controller-&gt;GetLocalRole() == ROLE_Authority)</span><br><span class="line">        &#123;</span><br><span class="line">          // Confirm hit markers</span><br><span class="line">          if (ULyraWeaponStateComponent* WeaponStateComponent = Controller-&gt;FindComponentByClass&lt;ULyraWeaponStateComponent&gt;())</span><br><span class="line">          &#123;</span><br><span class="line">            TArray&lt;uint8&gt; HitReplaces;</span><br><span class="line">            for (uint8 i = 0; (i &lt; LocalTargetDataHandle.Num()) &amp;&amp; (i &lt; 255); ++i)</span><br><span class="line">            &#123;</span><br><span class="line">              if (FGameplayAbilityTargetData_SingleTargetHit* SingleTargetHit = static_cast&lt;FGameplayAbilityTargetData_SingleTargetHit*&gt;(LocalTargetDataHandle.Get(i)))</span><br><span class="line">              &#123;</span><br><span class="line">                if (SingleTargetHit-&gt;bHitReplaced)</span><br><span class="line">                &#123;</span><br><span class="line">                  HitReplaces.Add(i);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            WeaponStateComponent-&gt;ClientConfirmTargetData(LocalTargetDataHandle.UniqueId, bIsTargetDataValid, HitReplaces);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  #endif //WITH_SERVER_CODE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //CommitAbility在这里进行的 </span><br><span class="line">    // See if we still have ammo（弹药）</span><br><span class="line">    if (bIsTargetDataValid &amp;&amp; CommitAbility(CurrentSpecHandle, CurrentActorInfo, CurrentActivationInfo))</span><br><span class="line">    &#123;</span><br><span class="line">      // We fired the weapon, add spread</span><br><span class="line">      ULyraRangedWeaponInstance* WeaponData = GetWeaponInstance();</span><br><span class="line">      check(WeaponData);</span><br><span class="line">      </span><br><span class="line">      //表现</span><br><span class="line">      WeaponData-&gt;AddSpread();</span><br><span class="line"></span><br><span class="line">      //蓝图 - GE/GCN</span><br><span class="line">      // Let the blueprint do stuff like apply effects to the targets</span><br><span class="line">      OnRangedWeaponTargetDataReady(LocalTargetDataHandle);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      UE_LOG(LogLyraAbilitySystem, Warning, TEXT(&quot;Weapon ability %s failed to commit (bIsTargetDataValid=%d)&quot;), *GetPathName(), bIsTargetDataValid ? 1 : 0);</span><br><span class="line">      K2_EndAbility();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // We&#x27;ve processed the data</span><br><span class="line">  MyAbilityComponent-&gt;ConsumeClientReplicatedTargetData(CurrentSpecHandle, CurrentActivationInfo.GetActivationPredictionKey());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="射击的伤害效果和表现-OnRangedWeaponTargetDataReady"><a href="#射击的伤害效果和表现-OnRangedWeaponTargetDataReady" class="headerlink" title="射击的伤害效果和表现 - OnRangedWeaponTargetDataReady"></a>射击的伤害效果和表现 - OnRangedWeaponTargetDataReady</h4><p>这部分逻辑Lyra项目使用蓝图来实现。</p>
<ul>
<li>表现部分 - GCN - 使用 ExectueGameplayCueWithParamsOnOwner来做。<ul>
<li>攻击者GCN：音效、镜头抖动、手柄反馈。武器的Fire逻辑（粒子特效等）</li>
<li>受击者GCN：音效、镜头抖动、手柄反馈（见ForceFeedbackEffect）</li>
</ul>
</li>
<li>逻辑部分 - GE - 仅服务端执行 - ApplyGameplayEffectToTarget。<ul>
<li>添加GE Damage。并由其处理伤害逻辑。</li>
</ul>
</li>
</ul>
<h4 id="蒙太奇表现"><a href="#蒙太奇表现" class="headerlink" title="蒙太奇表现"></a>蒙太奇表现</h4><p>使用了GATask - PlayMontageAndWait来处理蒙太奇动画播放。<br>并设置了定时器，动画播放完毕触发事件&#x2F;定时器触发事件后，EndAbility。</p>
<p>蒙太奇内容：<br>3个Notify：<br>1.武器蒙太奇播放通知 - 通过人物蒙太奇驱动武器来播放蒙太奇，处理武器动画<br>2.骨架的动画通知 - SaveAttack<br>3.骨架的动画通知 - ResetCombo</p>
<p>创建的自定义通知保存在骨架上，并可以用于执行自定义逻辑。如在动画蓝图进行处理。<br>目前看Lyra并没有详细用到这两个通知。</p>
<h4 id="ULyraGameplayAbility-FromEquipment"><a href="#ULyraGameplayAbility-FromEquipment" class="headerlink" title="ULyraGameplayAbility_FromEquipment"></a>ULyraGameplayAbility_FromEquipment</h4><p>主要是处理了其中的装备类：ULyraEquipmentInstance<br>以及对应的库存Item：ULyraInventoryItemInstance</p>
<h4 id="ULyraGameplayAbility-RangedWeapon"><a href="#ULyraGameplayAbility-RangedWeapon" class="headerlink" title="ULyraGameplayAbility_RangedWeapon"></a>ULyraGameplayAbility_RangedWeapon</h4><p>定义了对应的武器信息：ULyraRangedWeaponInstance</p>
<p>定义了目标选择的相关数据结构（用于射线检测）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct FRangedWeaponFiringInput</span><br><span class="line">&#123;</span><br><span class="line">    // Start of the trace</span><br><span class="line">    FVector StartTrace;</span><br><span class="line"></span><br><span class="line">    // End of the trace if aim were perfect</span><br><span class="line">    FVector EndAim;</span><br><span class="line"></span><br><span class="line">    // The direction of the trace if aim were perfect</span><br><span class="line">    FVector AimDir;</span><br><span class="line"></span><br><span class="line">    // The weapon instance / source of weapon data</span><br><span class="line">    ULyraRangedWeaponInstance* WeaponData = nullptr;</span><br><span class="line"></span><br><span class="line">    // Can we play bullet FX for hits during this trace</span><br><span class="line">    bool bCanPlayBulletFX = false;</span><br><span class="line"></span><br><span class="line">    FRangedWeaponFiringInput()</span><br><span class="line">        : StartTrace(ForceInitToZero)</span><br><span class="line">        , EndAim(ForceInitToZero)</span><br><span class="line">        , AimDir(ForceInitToZero)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h5 id="关键变量"><a href="#关键变量" class="headerlink" title="关键变量:"></a>关键变量:</h5><p>定义委托 - FDelegateHandle OnTargetDataReadyCallbackDelegateHandle</p>
<h5 id="关键函数："><a href="#关键函数：" class="headerlink" title="关键函数："></a>关键函数：</h5><p>&#x2F;&#x2F;能力激活后的主函数<br>StartRangedWeaponTargeting</p>
<p>&#x2F;&#x2F;GA的目标选取<br>PerformLocalTargeting</p>
<p>&#x2F;&#x2F;射线检测，以及中间障碍物判定<br>WeaponTrace </p>
<p>&#x2F;&#x2F;目标选取完毕后的回调函数。服务端与客户端的连接。<br>OnTargetDataReadyCallback</p>
<p>&#x2F;&#x2F;关键蓝图事件，处理伤害判定等。<br>OnRangedWeaponTargetDataReady </p>
<p>关于回调的注册：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void ULyraGameplayAbility_RangedWeapon::ActivateAbility(const FGameplayAbilitySpecHandle Handle, const FGameplayAbilityActorInfo* ActorInfo, const FGameplayAbilityActivationInfo ActivationInfo, const FGameplayEventData* TriggerEventData)</span><br><span class="line">&#123;</span><br><span class="line">  //注册回调。回调的UnRegister在EndAbility部分进行。</span><br><span class="line">  // Bind target data callback</span><br><span class="line">  UAbilitySystemComponent* MyAbilityComponent = CurrentActorInfo-&gt;AbilitySystemComponent.Get();</span><br><span class="line">  check(MyAbilityComponent);</span><br><span class="line"></span><br><span class="line">  OnTargetDataReadyCallbackDelegateHandle = MyAbilityComponent-&gt;AbilityTargetDataSetDelegate(CurrentSpecHandle, CurrentActivationInfo.GetActivationPredictionKey()).AddUObject(this, &amp;ThisClass::OnTargetDataReadyCallback);</span><br><span class="line"></span><br><span class="line">  // Update the last firing time</span><br><span class="line">  ULyraRangedWeaponInstance* WeaponData = GetWeaponInstance();</span><br><span class="line">  check(WeaponData);</span><br><span class="line">  WeaponData-&gt;UpdateFiringTime();</span><br><span class="line"></span><br><span class="line">  Super::ActivateAbility(Handle, ActorInfo, ActivationInfo, TriggerEventData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="额外话题"><a href="#额外话题" class="headerlink" title="额外话题"></a>额外话题</h3><h4 id="增强输入，输入绑定和GA的触发"><a href="#增强输入，输入绑定和GA的触发" class="headerlink" title="增强输入，输入绑定和GA的触发"></a>增强输入，输入绑定和GA的触发</h4><p>LyrHeroComponent -&gt; LyraASC AbilityInputTagPressed</p>
<p>关于输入映射关系<br>B_Hero_ShooterMannequin -&gt; B_Hero_Default<br>B_Hero_Default的LyraHeroComp 重定义了 DefaultInputMappings</p>
<p>关于能力、增强输入设置：<br>见到数据文件：InputData_Hero<br>具体的绑定可以看到ULyraInputComponent。<br>其中进行了相关的AbilityInputActions绑定。由此，在进行对应的增强操作时，会触发对应的Tag。并由Tag去激活对应的能力。</p>
<p>空子弹时，也会尝试触发对应的能力。但在GA的CanActivateAbility会被驳回。<br>（子类的GA写了子弹数量作为Cost）。<br>关于开销，可以看到ULyraAbilityCost_ItemTagStack。</p>
<h4 id="Lyra中GameplayCue目录的添加："><a href="#Lyra中GameplayCue目录的添加：" class="headerlink" title="Lyra中GameplayCue目录的添加："></a>Lyra中GameplayCue目录的添加：</h4><p>正如之前所述，必须要注册GameplayCueNotfiy对应的目录，在运行时才能通过对应的Tag来触发GameplayCue。Lyra中做了对应的插件GameplayCueNotify目录注册工作。可以以插件ShotterCoreContent为例子。看到关键文件：ShooterCore。Lyra中添加了对应GameFeature的注册回调，看到类ULyraGameFeaturePolicy，内部有做对应的工作。<br>这样GameplayCueNotify的目录规划就可以比较整洁好处理了。<br>体外话：要看哪些东西使用了对应的GameplayTag,可以在蓝图中找到对应Tag后右键，点击SearchForReferences。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Lyra射击的判定还是以LocallyControled为准。如果是专用服务器，那么射击的判定都是依赖于客户端提供的数据的。</p>
<p>依赖于客户端提供数据的好处在于，即便有网络延迟，玩家自己本地的攻击也能够较为正常的结算。</p>
<p>但是在竞技&#x2F;多人网络游戏中，防作弊就成了一个非常关键的话题了。虽然GAS本身的机制，确保了对应的开销判断，但是Lyra并没有对目标传来的实体对象有效性做判断。<br>比如，如果A客户端的攻击目标在服务器收到之前，A客户端的实体在服务器端由于其他玩家伤害，而被击杀，对于的GA在服务端就不会被激活。（在客户端，GA的激活和TargetData的选取是有序执行的，预测窗口和GAS的底层涉及确保了服务端的执行顺序也一致。）</p>
<p>换言之，服务端在处理OnRangedWeaponTargetDataReady事件之前，需要对客户端传来的数据进行有效性判定。否则可能会出现比较离谱的情况。</p>
<p>此外，从逻辑实现可以看到，Lyra本身并没有创建“实体子弹”，而是依赖于射线检测。</p>
]]></content>
      <categories>
        <category>UE</category>
      </categories>
      <tags>
        <tag>UE</tag>
        <tag>GAS</tag>
        <tag>Lyra</tag>
      </tags>
  </entry>
</search>
